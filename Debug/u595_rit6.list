
u595_rit6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b8  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08008808  08008808  00009808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080088b4  080088b4  000098b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  080088b8  080088b8  000098b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000000fe  20000000  080088bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d04  20000100  080089ba  0000a100  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001e04  080089ba  0000ae04  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000a0fe  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001314a  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003176  00000000  00000000  0001d27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001058  00000000  00000000  000203f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000c2c  00000000  00000000  00021450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000353cd  00000000  00000000  0002207c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000149af  00000000  00000000  00057449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013fb57  00000000  00000000  0006bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ab94f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004210  00000000  00000000  001ab994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001afba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000100 	.word	0x20000100
 800026c:	00000000 	.word	0x00000000
 8000270:	080087f0 	.word	0x080087f0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000104 	.word	0x20000104
 800028c:	080087f0 	.word	0x080087f0

08000290 <Fill_Buffer>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ICACHE_Init(void);
static void MX_USB_OTG_HS_PCD_Init(void);
/* USER CODE BEGIN PFP */
void Fill_Buffer(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    memset(buffer, FILL_VALUE, PACKET_SIZE);
 8000294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000298:	2155      	movs	r1, #85	@ 0x55
 800029a:	4802      	ldr	r0, [pc, #8]	@ (80002a4 <Fill_Buffer+0x14>)
 800029c:	f008 fa7c 	bl	8008798 <memset>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000600 	.word	0x20000600

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b5b0      	push	{r4, r5, r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	Fill_Buffer();
 80002ae:	f7ff ffef 	bl	8000290 <Fill_Buffer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 fa2b 	bl	800070c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f81b 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f8b3 	bl	8000424 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002be:	f000 f86f 	bl	80003a0 <MX_ICACHE_Init>
  MX_USB_OTG_HS_PCD_Init();
 80002c2:	f000 f881 	bl	80003c8 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80002c6:	f007 fd99 	bl	8007dfc <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t msg[] = "Hello, USB CDC!\r\n";
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <main+0x40>)
 80002cc:	1d3c      	adds	r4, r7, #4
 80002ce:	461d      	mov	r5, r3
 80002d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d4:	682b      	ldr	r3, [r5, #0]
 80002d6:	8023      	strh	r3, [r4, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //CDC_Transmit_HS(msg, sizeof(msg) - 1);
	  CDC_Transmit_HS(buffer, PACKET_SIZE);
 80002d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <main+0x44>)
 80002de:	f007 fe4b 	bl	8007f78 <CDC_Transmit_HS>
  {
 80002e2:	bf00      	nop
 80002e4:	e7f8      	b.n	80002d8 <main+0x30>
 80002e6:	bf00      	nop
 80002e8:	08008808 	.word	0x08008808
 80002ec:	20000600 	.word	0x20000600

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b09e      	sub	sp, #120	@ 0x78
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0318 	add.w	r3, r7, #24
 80002fa:	2260      	movs	r2, #96	@ 0x60
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f008 fa4a 	bl	8008798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]
 8000312:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000314:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000318:	f001 ff5c 	bl	80021d4 <HAL_PWREx_ControlVoltageScaling>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000322:	f000 f8a9 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000326:	2301      	movs	r3, #1
 8000328:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800032a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	2303      	movs	r3, #3
 8000336:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800033c:	2301      	movs	r3, #1
 800033e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000340:	2314      	movs	r3, #20
 8000342:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 10;
 8000344:	230a      	movs	r3, #10
 8000346:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000348:	2302      	movs	r3, #2
 800034a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800034c:	2302      	movs	r3, #2
 800034e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000350:	230c      	movs	r3, #12
 8000352:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000354:	2300      	movs	r3, #0
 8000356:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fff3 	bl	8002348 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000368:	f000 f886 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	231f      	movs	r3, #31
 800036e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000370:	2303      	movs	r3, #3
 8000372:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000384:	463b      	mov	r3, r7
 8000386:	2104      	movs	r1, #4
 8000388:	4618      	mov	r0, r3
 800038a:	f002 feb9 	bl	8003100 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000394:	f000 f870 	bl	8000478 <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3778      	adds	r7, #120	@ 0x78
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003a4:	2000      	movs	r0, #0
 80003a6:	f000 fc57 	bl	8000c58 <HAL_ICACHE_ConfigAssociativityMode>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003b0:	f000 f862 	bl	8000478 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003b4:	f000 fc70 	bl	8000c98 <HAL_ICACHE_Enable>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003be:	f000 f85b 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
	...

080003c8 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80003cc:	4b13      	ldr	r3, [pc, #76]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003ce:	4a14      	ldr	r2, [pc, #80]	@ (8000420 <MX_USB_OTG_HS_PCD_Init+0x58>)
 80003d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80003d2:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003d4:	2209      	movs	r2, #9
 80003d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 80003d8:	4b10      	ldr	r3, [pc, #64]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003da:	2200      	movs	r2, #0
 80003dc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003e0:	2203      	movs	r2, #3
 80003e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80003e4:	4b0d      	ldr	r3, [pc, #52]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 80003fe:	2200      	movs	r2, #0
 8000400:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 8000404:	2200      	movs	r2, #0
 8000406:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	@ (800041c <MX_USB_OTG_HS_PCD_Init+0x54>)
 800040a:	f000 fc55 	bl	8000cb8 <HAL_PCD_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_USB_OTG_HS_PCD_Init+0x50>
  {
    Error_Handler();
 8000414:	f000 f830 	bl	8000478 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000011c 	.word	0x2000011c
 8000420:	42040000 	.word	0x42040000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_GPIO_Init+0x50>)
 800042c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000430:	4a10      	ldr	r2, [pc, #64]	@ (8000474 <MX_GPIO_Init+0x50>)
 8000432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000436:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <MX_GPIO_Init+0x50>)
 800043c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <MX_GPIO_Init+0x50>)
 800044a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800044e:	4a09      	ldr	r2, [pc, #36]	@ (8000474 <MX_GPIO_Init+0x50>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <MX_GPIO_Init+0x50>)
 800045a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	603b      	str	r3, [r7, #0]
 8000464:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	46020c00 	.word	0x46020c00

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <Error_Handler+0x8>

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0a      	ldr	r3, [pc, #40]	@ (80004b4 <HAL_MspInit+0x30>)
 800048c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000490:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <HAL_MspInit+0x30>)
 8000492:	f043 0304 	orr.w	r3, r3, #4
 8000496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800049a:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <HAL_MspInit+0x30>)
 800049c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 80004a8:	f001 ff20 	bl	80022ec <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	46020c00 	.word	0x46020c00

080004b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b0bc      	sub	sp, #240	@ 0xf0
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	f107 0318 	add.w	r3, r7, #24
 80004c4:	22d8      	movs	r2, #216	@ 0xd8
 80004c6:	2100      	movs	r1, #0
 80004c8:	4618      	mov	r0, r3
 80004ca:	f008 f965 	bl	8008798 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a3e      	ldr	r2, [pc, #248]	@ (80005cc <HAL_PCD_MspInit+0x114>)
 80004d4:	4293      	cmp	r3, r2
 80004d6:	d175      	bne.n	80005c4 <HAL_PCD_MspInit+0x10c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d8:	4b3d      	ldr	r3, [pc, #244]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 80004da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80004de:	4a3c      	ldr	r2, [pc, #240]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80004e8:	4b39      	ldr	r3, [pc, #228]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 80004ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 80004f6:	f04f 0200 	mov.w	r2, #0
 80004fa:	f04f 0308 	mov.w	r3, #8
 80004fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 8000502:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000506:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800050a:	f107 0318 	add.w	r3, r7, #24
 800050e:	4618      	mov	r0, r3
 8000510:	f003 f98a 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 800051a:	f7ff ffad 	bl	8000478 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_6);
 800051e:	202c      	movs	r0, #44	@ 0x2c
 8000520:	f000 f9f2 	bl	8000908 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000524:	4b2a      	ldr	r3, [pc, #168]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800052a:	4a29      	ldr	r2, [pc, #164]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 800052c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000530:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000534:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800053a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 8000542:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000544:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000548:	4a21      	ldr	r2, [pc, #132]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 800054a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800054e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000552:	4b1f      	ldr	r3, [pc, #124]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	2b00      	cmp	r3, #0
 800056c:	d11b      	bne.n	80005a6 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000574:	4a16      	ldr	r2, [pc, #88]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000576:	f043 0304 	orr.w	r3, r3, #4
 800057a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800057e:	4b14      	ldr	r3, [pc, #80]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000584:	f003 0304 	and.w	r3, r3, #4
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800058c:	f001 feae 	bl	80022ec <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000590:	f001 febc 	bl	800230c <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 8000596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800059a:	4a0d      	ldr	r2, [pc, #52]	@ (80005d0 <HAL_PCD_MspInit+0x118>)
 800059c:	f023 0304 	bic.w	r3, r3, #4
 80005a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80005a4:	e003      	b.n	80005ae <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80005a6:	f001 fea1 	bl	80022ec <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 80005aa:	f001 feaf 	bl	800230c <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f000 f996 	bl	80008e0 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2100      	movs	r1, #0
 80005b8:	2049      	movs	r0, #73	@ 0x49
 80005ba:	f000 fa71 	bl	8000aa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80005be:	2049      	movs	r0, #73	@ 0x49
 80005c0:	f000 fa88 	bl	8000ad4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80005c4:	bf00      	nop
 80005c6:	37f0      	adds	r7, #240	@ 0xf0
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	42040000 	.word	0x42040000
 80005d0:	46020c00 	.word	0x46020c00

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <NMI_Handler+0x4>

080005dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <HardFault_Handler+0x4>

080005e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <MemManage_Handler+0x4>

080005ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <BusFault_Handler+0x4>

080005f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <UsageFault_Handler+0x4>

080005fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062a:	f000 f915 	bl	8000858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <OTG_HS_IRQHandler+0x10>)
 800063a:	f000 fc6b 	bl	8000f14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	2000011c 	.word	0x2000011c

08000648 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <SystemInit+0x68>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000652:	4a17      	ldr	r2, [pc, #92]	@ (80006b0 <SystemInit+0x68>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <SystemInit+0x6c>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <SystemInit+0x6c>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <SystemInit+0x6c>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <SystemInit+0x6c>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <SystemInit+0x6c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <SystemInit+0x6c>)
 800067a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800067e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000682:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000684:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <SystemInit+0x6c>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <SystemInit+0x6c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a09      	ldr	r2, [pc, #36]	@ (80006b4 <SystemInit+0x6c>)
 8000690:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000694:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000696:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <SystemInit+0x6c>)
 8000698:	2200      	movs	r2, #0
 800069a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800069c:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <SystemInit+0x68>)
 800069e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80006a2:	609a      	str	r2, [r3, #8]
  #endif
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e000ed00 	.word	0xe000ed00
 80006b4:	46020c00 	.word	0x46020c00

080006b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80006b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006f0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006bc:	f7ff ffc4 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006c2:	e003      	b.n	80006cc <LoopCopyDataInit>

080006c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006ca:	3104      	adds	r1, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006cc:	480a      	ldr	r0, [pc, #40]	@ (80006f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80006d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006d4:	d3f6      	bcc.n	80006c4 <CopyDataInit>
	ldr	r2, =_sbss
 80006d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006d8:	e002      	b.n	80006e0 <LoopFillZerobss>

080006da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006dc:	f842 3b04 	str.w	r3, [r2], #4

080006e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <LoopForever+0x16>)
	cmp	r2, r3
 80006e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006e4:	d3f9      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006e6:	f008 f85f 	bl	80087a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ea:	f7ff fddd 	bl	80002a8 <main>

080006ee <LoopForever>:

LoopForever:
    b LoopForever
 80006ee:	e7fe      	b.n	80006ee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80006f0:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80006f4:	080088bc 	.word	0x080088bc
	ldr	r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006fc:	200000fe 	.word	0x200000fe
	ldr	r2, =_sbss
 8000700:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 8000704:	20001e04 	.word	0x20001e04

08000708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000708:	e7fe      	b.n	8000708 <ADC1_2_IRQHandler>
	...

0800070c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_Init+0x50>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a11      	ldr	r2, [pc, #68]	@ (800075c <HAL_Init+0x50>)
 8000716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800071a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800071c:	2003      	movs	r0, #3
 800071e:	f000 f9b4 	bl	8000a8a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000722:	f002 fedf 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 8000726:	4602      	mov	r2, r0
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <HAL_Init+0x54>)
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	f003 030f 	and.w	r3, r3, #15
 8000730:	490c      	ldr	r1, [pc, #48]	@ (8000764 <HAL_Init+0x58>)
 8000732:	5ccb      	ldrb	r3, [r1, r3]
 8000734:	fa22 f303 	lsr.w	r3, r2, r3
 8000738:	4a0b      	ldr	r2, [pc, #44]	@ (8000768 <HAL_Init+0x5c>)
 800073a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800073c:	2004      	movs	r0, #4
 800073e:	f000 f9f9 	bl	8000b34 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000742:	200e      	movs	r0, #14
 8000744:	f000 f812 	bl	800076c <HAL_InitTick>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e002      	b.n	8000758 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000752:	f7ff fe97 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
}
 8000758:	4618      	mov	r0, r3
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40022000 	.word	0x40022000
 8000760:	46020c00 	.word	0x46020c00
 8000764:	08008864 	.word	0x08008864
 8000768:	20000000 	.word	0x20000000

0800076c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000778:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <HAL_InitTick+0xdc>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	e05c      	b.n	800083e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000784:	4b31      	ldr	r3, [pc, #196]	@ (800084c <HAL_InitTick+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	2b04      	cmp	r3, #4
 800078e:	d10c      	bne.n	80007aa <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000790:	4b2f      	ldr	r3, [pc, #188]	@ (8000850 <HAL_InitTick+0xe4>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <HAL_InitTick+0xdc>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800079e:	fbb3 f3f1 	udiv	r3, r3, r1
 80007a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	e037      	b.n	800081a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80007aa:	f000 fa1b 	bl	8000be4 <HAL_SYSTICK_GetCLKSourceConfig>
 80007ae:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d023      	beq.n	80007fe <HAL_InitTick+0x92>
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d82d      	bhi.n	8000818 <HAL_InitTick+0xac>
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d003      	beq.n	80007ca <HAL_InitTick+0x5e>
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d00d      	beq.n	80007e4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80007c8:	e026      	b.n	8000818 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80007ca:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <HAL_InitTick+0xe4>)
 80007cc:	681a      	ldr	r2, [r3, #0]
 80007ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <HAL_InitTick+0xdc>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4619      	mov	r1, r3
 80007d4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80007d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80007dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e0:	60fb      	str	r3, [r7, #12]
        break;
 80007e2:	e01a      	b.n	800081a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <HAL_InitTick+0xdc>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80007f2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	60fb      	str	r3, [r7, #12]
        break;
 80007fc:	e00d      	b.n	800081a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <HAL_InitTick+0xdc>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000808:	fbb3 f3f2 	udiv	r3, r3, r2
 800080c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000810:	fbb2 f3f3 	udiv	r3, r2, r3
 8000814:	60fb      	str	r3, [r7, #12]
        break;
 8000816:	e000      	b.n	800081a <HAL_InitTick+0xae>
        break;
 8000818:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f000 f968 	bl	8000af0 <HAL_SYSTICK_Config>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	e009      	b.n	800083e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082a:	2200      	movs	r2, #0
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	f04f 30ff 	mov.w	r0, #4294967295
 8000832:	f000 f935 	bl	8000aa0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8000836:	4a07      	ldr	r2, [pc, #28]	@ (8000854 <HAL_InitTick+0xe8>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000008 	.word	0x20000008
 800084c:	e000e010 	.word	0xe000e010
 8000850:	20000000 	.word	0x20000000
 8000854:	20000004 	.word	0x20000004

08000858 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800085c:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_IncTick+0x20>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b06      	ldr	r3, [pc, #24]	@ (800087c <HAL_IncTick+0x24>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a04      	ldr	r2, [pc, #16]	@ (800087c <HAL_IncTick+0x24>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000008 	.word	0x20000008
 800087c:	20000700 	.word	0x20000700

08000880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  return uwTick;
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <HAL_GetTick+0x14>)
 8000886:	681b      	ldr	r3, [r3, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	20000700 	.word	0x20000700

08000898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a0:	f7ff ffee 	bl	8000880 <HAL_GetTick>
 80008a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008b0:	d005      	beq.n	80008be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_Delay+0x44>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4413      	add	r3, r2
 80008bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008be:	bf00      	nop
 80008c0:	f7ff ffde 	bl	8000880 <HAL_GetTick>
 80008c4:	4602      	mov	r2, r0
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8f7      	bhi.n	80008c0 <HAL_Delay+0x28>
  {
  }
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008

080008e0 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80008ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80008ec:	f023 0201 	bic.w	r2, r3, #1
 80008f0:	4904      	ldr	r1, [pc, #16]	@ (8000904 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	46000400 	.word	0x46000400

08000908 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 8000912:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000914:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 8000918:	4904      	ldr	r1, [pc, #16]	@ (800092c <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4313      	orrs	r3, r2
 800091e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	46000400 	.word	0x46000400

08000930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000958:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800095c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000962:	4a04      	ldr	r2, [pc, #16]	@ (8000974 <__NVIC_SetPriorityGrouping+0x44>)
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	60d3      	str	r3, [r2, #12]
}
 8000968:	bf00      	nop
 800096a:	3714      	adds	r7, #20
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800097c:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <__NVIC_GetPriorityGrouping+0x18>)
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	f003 0307 	and.w	r3, r3, #7
}
 8000986:	4618      	mov	r0, r3
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800099e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	db0b      	blt.n	80009be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	f003 021f 	and.w	r2, r3, #31
 80009ac:	4907      	ldr	r1, [pc, #28]	@ (80009cc <__NVIC_EnableIRQ+0x38>)
 80009ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009b2:	095b      	lsrs	r3, r3, #5
 80009b4:	2001      	movs	r0, #1
 80009b6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db0a      	blt.n	80009fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	490c      	ldr	r1, [pc, #48]	@ (8000a1c <__NVIC_SetPriority+0x4c>)
 80009ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ee:	0112      	lsls	r2, r2, #4
 80009f0:	b2d2      	uxtb	r2, r2
 80009f2:	440b      	add	r3, r1
 80009f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f8:	e00a      	b.n	8000a10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4908      	ldr	r1, [pc, #32]	@ (8000a20 <__NVIC_SetPriority+0x50>)
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	3b04      	subs	r3, #4
 8000a08:	0112      	lsls	r2, r2, #4
 8000a0a:	b2d2      	uxtb	r2, r2
 8000a0c:	440b      	add	r3, r1
 8000a0e:	761a      	strb	r2, [r3, #24]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000e100 	.word	0xe000e100
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b089      	sub	sp, #36	@ 0x24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	60f8      	str	r0, [r7, #12]
 8000a2c:	60b9      	str	r1, [r7, #8]
 8000a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	f1c3 0307 	rsb	r3, r3, #7
 8000a3e:	2b04      	cmp	r3, #4
 8000a40:	bf28      	it	cs
 8000a42:	2304      	movcs	r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	3304      	adds	r3, #4
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d902      	bls.n	8000a54 <NVIC_EncodePriority+0x30>
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3b03      	subs	r3, #3
 8000a52:	e000      	b.n	8000a56 <NVIC_EncodePriority+0x32>
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43da      	mvns	r2, r3
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	401a      	ands	r2, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa01 f303 	lsl.w	r3, r1, r3
 8000a76:	43d9      	mvns	r1, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	4313      	orrs	r3, r2
         );
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3724      	adds	r7, #36	@ 0x24
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ff4c 	bl	8000930 <__NVIC_SetPriorityGrouping>
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
 8000aac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aae:	f7ff ff63 	bl	8000978 <__NVIC_GetPriorityGrouping>
 8000ab2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	6978      	ldr	r0, [r7, #20]
 8000aba:	f7ff ffb3 	bl	8000a24 <NVIC_EncodePriority>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ac4:	4611      	mov	r1, r2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff ff82 	bl	80009d0 <__NVIC_SetPriority>
}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ff56 	bl	8000994 <__NVIC_EnableIRQ>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b00:	d301      	bcc.n	8000b06 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00d      	b.n	8000b22 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <HAL_SYSTICK_Config+0x40>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <HAL_SYSTICK_Config+0x40>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_SYSTICK_Config+0x40>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <HAL_SYSTICK_Config+0x40>)
 8000b1a:	f043 0303 	orr.w	r3, r3, #3
 8000b1e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e010 	.word	0xe000e010

08000b34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	d844      	bhi.n	8000bcc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000b42:	a201      	add	r2, pc, #4	@ (adr r2, 8000b48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000b6b 	.word	0x08000b6b
 8000b4c:	08000b89 	.word	0x08000b89
 8000b50:	08000bab 	.word	0x08000bab
 8000b54:	08000bcd 	.word	0x08000bcd
 8000b58:	08000b5d 	.word	0x08000b5d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a1e      	ldr	r2, [pc, #120]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6013      	str	r3, [r2, #0]
      break;
 8000b68:	e031      	b.n	8000bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b70:	f023 0304 	bic.w	r3, r3, #4
 8000b74:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b86:	e022      	b.n	8000bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a13      	ldr	r2, [pc, #76]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b8e:	f023 0304 	bic.w	r3, r3, #4
 8000b92:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000b94:	4b12      	ldr	r3, [pc, #72]	@ (8000be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b9e:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ba0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ba8:	e011      	b.n	8000bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	@ (8000bdc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000bb0:	f023 0304 	bic.w	r3, r3, #4
 8000bb4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000bc0:	4a07      	ldr	r2, [pc, #28]	@ (8000be0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000bc2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000bca:	e000      	b.n	8000bce <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000bcc:	bf00      	nop
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010
 8000be0:	46020c00 	.word	0x46020c00

08000be4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000bea:	4b19      	ldr	r3, [pc, #100]	@ (8000c50 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	e021      	b.n	8000c40 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c02:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000c06:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000c0e:	d011      	beq.n	8000c34 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000c16:	d810      	bhi.n	8000c3a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d004      	beq.n	8000c28 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000c24:	d003      	beq.n	8000c2e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000c26:	e008      	b.n	8000c3a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
        break;
 8000c2c:	e008      	b.n	8000c40 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
        break;
 8000c32:	e005      	b.n	8000c40 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000c34:	2302      	movs	r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
        break;
 8000c38:	e002      	b.n	8000c40 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
        break;
 8000c3e:	bf00      	nop
    }
  }
  return systick_source;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010
 8000c54:	46020c00 	.word	0x46020c00

08000c58 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000c64:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
 8000c72:	73fb      	strb	r3, [r7, #15]
 8000c74:	e007      	b.n	8000c86 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 0204 	bic.w	r2, r3, #4
 8000c7e:	4905      	ldr	r1, [pc, #20]	@ (8000c94 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	40030400 	.word	0x40030400

08000c98 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <HAL_ICACHE_Enable+0x1c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_ICACHE_Enable+0x1c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40030400 	.word	0x40030400

08000cb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0fe      	b.n	8000ec8 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d106      	bne.n	8000ce4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff fbea 	bl	80004b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fe4a 	bl	800498a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7c1a      	ldrb	r2, [r3, #16]
 8000cfe:	f88d 2000 	strb.w	r2, [sp]
 8000d02:	3304      	adds	r3, #4
 8000d04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d06:	f003 fd5d 	bl	80047c4 <USB_CoreInit>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d005      	beq.n	8000d1c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2202      	movs	r2, #2
 8000d14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e0d5      	b.n	8000ec8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 fe42 	bl	80049ac <USB_SetCurrentMode>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2202      	movs	r2, #2
 8000d32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e0c6      	b.n	8000ec8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	73fb      	strb	r3, [r7, #15]
 8000d3e:	e04a      	b.n	8000dd6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d40:	7bfa      	ldrb	r2, [r7, #15]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	3315      	adds	r3, #21
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000d54:	7bfa      	ldrb	r2, [r7, #15]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	3314      	adds	r3, #20
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d68:	7bfa      	ldrb	r2, [r7, #15]
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	b298      	uxth	r0, r3
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	4613      	mov	r3, r2
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4413      	add	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	440b      	add	r3, r1
 8000d7a:	332e      	adds	r3, #46	@ 0x2e
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d80:	7bfa      	ldrb	r2, [r7, #15]
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4413      	add	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3318      	adds	r3, #24
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	440b      	add	r3, r1
 8000da2:	331c      	adds	r3, #28
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000da8:	7bfa      	ldrb	r2, [r7, #15]
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	4613      	mov	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4413      	add	r3, r2
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	3320      	adds	r3, #32
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000dbc:	7bfa      	ldrb	r2, [r7, #15]
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	440b      	add	r3, r1
 8000dca:	3324      	adds	r3, #36	@ 0x24
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	791b      	ldrb	r3, [r3, #4]
 8000dda:	7bfa      	ldrb	r2, [r7, #15]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d3af      	bcc.n	8000d40 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	e044      	b.n	8000e70 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000de6:	7bfa      	ldrb	r2, [r7, #15]
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	4613      	mov	r3, r2
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000e0e:	7bfa      	ldrb	r2, [r7, #15]
 8000e10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e12:	7bfa      	ldrb	r2, [r7, #15]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	4413      	add	r3, r2
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e28:	7bfa      	ldrb	r2, [r7, #15]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	4413      	add	r3, r2
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	440b      	add	r3, r1
 8000e36:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000e3e:	7bfa      	ldrb	r2, [r7, #15]
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	4613      	mov	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	4413      	add	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000e54:	7bfa      	ldrb	r2, [r7, #15]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4413      	add	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	7bfa      	ldrb	r2, [r7, #15]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d3b5      	bcc.n	8000de6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7c1a      	ldrb	r2, [r3, #16]
 8000e82:	f88d 2000 	strb.w	r2, [sp]
 8000e86:	3304      	adds	r3, #4
 8000e88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8a:	f003 fddb 	bl	8004a44 <USB_DevInit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d005      	beq.n	8000ea0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2202      	movs	r2, #2
 8000e98:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e013      	b.n	8000ec8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7b1b      	ldrb	r3, [r3, #12]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d102      	bne.n	8000ebc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f001 f95c 	bl	8002174 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f004 fe2a 	bl	8005b1a <USB_DevDisconnect>

  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_PCD_Start+0x16>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e012      	b.n	8000f0c <HAL_PCD_Start+0x3c>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fd38 	bl	8004968 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 fdeb 	bl	8005ad8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b08d      	sub	sp, #52	@ 0x34
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000f22:	6a3b      	ldr	r3, [r7, #32]
 8000f24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f004 fea9 	bl	8005c82 <USB_GetMode>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 84b9 	bne.w	80018aa <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f004 fe0d 	bl	8005b5c <USB_ReadInterrupts>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f000 84af 	beq.w	80018a8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 fdfa 	bl	8005b5c <USB_ReadInterrupts>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d107      	bne.n	8000f82 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f002 0202 	and.w	r2, r2, #2
 8000f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f004 fde8 	bl	8005b5c <USB_ReadInterrupts>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b10      	cmp	r3, #16
 8000f94:	d161      	bne.n	800105a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	699a      	ldr	r2, [r3, #24]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0210 	bic.w	r2, r2, #16
 8000fa4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000fa6:	6a3b      	ldr	r3, [r7, #32]
 8000fa8:	6a1b      	ldr	r3, [r3, #32]
 8000faa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	f003 020f 	and.w	r2, r3, #15
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	3304      	adds	r3, #4
 8000fc4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	0c5b      	lsrs	r3, r3, #17
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d124      	bne.n	800101c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d035      	beq.n	800104a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fec:	b29b      	uxth	r3, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	6a38      	ldr	r0, [r7, #32]
 8000ff2:	f004 fc1f 	bl	8005834 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	68da      	ldr	r2, [r3, #12]
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001002:	441a      	add	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	091b      	lsrs	r3, r3, #4
 8001010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001014:	441a      	add	r2, r3
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	615a      	str	r2, [r3, #20]
 800101a:	e016      	b.n	800104a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	0c5b      	lsrs	r3, r3, #17
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	2b06      	cmp	r3, #6
 8001026:	d110      	bne.n	800104a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800102e:	2208      	movs	r2, #8
 8001030:	4619      	mov	r1, r3
 8001032:	6a38      	ldr	r0, [r7, #32]
 8001034:	f004 fbfe 	bl	8005834 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001044:	441a      	add	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f042 0210 	orr.w	r2, r2, #16
 8001058:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f004 fd7c 	bl	8005b5c <USB_ReadInterrupts>
 8001064:	4603      	mov	r3, r0
 8001066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800106a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800106e:	f040 80a7 	bne.w	80011c0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fd81 	bl	8005b82 <USB_ReadDevAllOutEpInterrupt>
 8001080:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001082:	e099      	b.n	80011b8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 808e 	beq.w	80011ac <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f004 fda5 	bl	8005bea <USB_ReadDevOutEPInterrupt>
 80010a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00c      	beq.n	80010c6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80010ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ae:	015a      	lsls	r2, r3, #5
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80010b8:	461a      	mov	r2, r3
 80010ba:	2301      	movs	r3, #1
 80010bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80010be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 fed1 	bl	8001e68 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00c      	beq.n	80010ea <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	4413      	add	r3, r2
 80010d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80010dc:	461a      	mov	r2, r3
 80010de:	2308      	movs	r3, #8
 80010e0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80010e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 ffa7 	bl	8002038 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	f003 0310 	and.w	r3, r3, #16
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d008      	beq.n	8001106 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	015a      	lsls	r2, r3, #5
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	4413      	add	r3, r2
 80010fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001100:	461a      	mov	r2, r3
 8001102:	2310      	movs	r3, #16
 8001104:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d030      	beq.n	8001172 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001118:	2b80      	cmp	r3, #128	@ 0x80
 800111a:	d109      	bne.n	8001130 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800112a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800112e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001132:	4613      	mov	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	3304      	adds	r3, #4
 8001144:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	78db      	ldrb	r3, [r3, #3]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2200      	movs	r2, #0
 8001152:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4619      	mov	r1, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f007 f908 	bl	8008370 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	015a      	lsls	r2, r3, #5
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800116c:	461a      	mov	r2, r3
 800116e:	2302      	movs	r3, #2
 8001170:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f003 0320 	and.w	r3, r3, #32
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	015a      	lsls	r2, r3, #5
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001188:	461a      	mov	r2, r3
 800118a:	2320      	movs	r3, #32
 800118c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d009      	beq.n	80011ac <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119a:	015a      	lsls	r2, r3, #5
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	4413      	add	r3, r2
 80011a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80011a4:	461a      	mov	r2, r3
 80011a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011aa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	3301      	adds	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80011b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b4:	085b      	lsrs	r3, r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80011b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f47f af62 	bne.w	8001084 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 fcc9 	bl	8005b5c <USB_ReadInterrupts>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80011d4:	f040 80db 	bne.w	800138e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 fcea 	bl	8005bb6 <USB_ReadDevAllInEpInterrupt>
 80011e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80011e8:	e0cd      	b.n	8001386 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80011ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011ec:	f003 0301 	and.w	r3, r3, #1
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80c2 	beq.w	800137a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f004 fd10 	bl	8005c26 <USB_ReadDevInEPInterrupt>
 8001206:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d057      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	2201      	movs	r2, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	69f9      	ldr	r1, [r7, #28]
 800122e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001232:	4013      	ands	r3, r2
 8001234:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	015a      	lsls	r2, r3, #5
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	4413      	add	r3, r2
 800123e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001242:	461a      	mov	r2, r3
 8001244:	2301      	movs	r3, #1
 8001246:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	799b      	ldrb	r3, [r3, #6]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d132      	bne.n	80012b6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001254:	4613      	mov	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	3320      	adds	r3, #32
 8001260:	6819      	ldr	r1, [r3, #0]
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001266:	4613      	mov	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4403      	add	r3, r0
 8001270:	331c      	adds	r3, #28
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4419      	add	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800127a:	4613      	mov	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4403      	add	r3, r0
 8001284:	3320      	adds	r3, #32
 8001286:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	2b00      	cmp	r3, #0
 800128c:	d113      	bne.n	80012b6 <HAL_PCD_IRQHandler+0x3a2>
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4413      	add	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3324      	adds	r3, #36	@ 0x24
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d108      	bne.n	80012b6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80012ae:	461a      	mov	r2, r3
 80012b0:	2101      	movs	r1, #1
 80012b2:	f004 fd17 	bl	8005ce4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f006 ffd3 	bl	8008268 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80012cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ce:	015a      	lsls	r2, r3, #5
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	4413      	add	r3, r2
 80012d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80012d8:	461a      	mov	r2, r3
 80012da:	2308      	movs	r3, #8
 80012dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80012e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ea:	015a      	lsls	r2, r3, #5
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80012f4:	461a      	mov	r2, r3
 80012f6:	2310      	movs	r3, #16
 80012f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001306:	015a      	lsls	r2, r3, #5
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	4413      	add	r3, r2
 800130c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001310:	461a      	mov	r2, r3
 8001312:	2340      	movs	r3, #64	@ 0x40
 8001314:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d023      	beq.n	8001368 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001322:	6a38      	ldr	r0, [r7, #32]
 8001324:	f003 fcfe 	bl	8004d24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132a:	4613      	mov	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	3310      	adds	r3, #16
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	3304      	adds	r3, #4
 800133a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	78db      	ldrb	r3, [r3, #3]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	2200      	movs	r2, #0
 8001348:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4619      	mov	r1, r3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f007 f81f 	bl	8008394 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001362:	461a      	mov	r2, r3
 8001364:	2302      	movs	r3, #2
 8001366:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001372:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 fcea 	bl	8001d4e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800137a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137c:	3301      	adds	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001382:	085b      	lsrs	r3, r3, #1
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f af2e 	bne.w	80011ea <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f004 fbe2 	bl	8005b5c <USB_ReadInterrupts>
 8001398:	4603      	mov	r3, r0
 800139a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800139e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013a2:	d122      	bne.n	80013ea <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d108      	bne.n	80013d4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fef5 	bl	80021bc <HAL_PCDEx_LPM_Callback>
 80013d2:	e002      	b.n	80013da <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f006 ffbd 	bl	8008354 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695a      	ldr	r2, [r3, #20]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80013e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f004 fbb4 	bl	8005b5c <USB_ReadInterrupts>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80013fe:	d112      	bne.n	8001426 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d102      	bne.n	8001416 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f006 ff79 	bl	8008308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	695a      	ldr	r2, [r3, #20]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001424:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f004 fb96 	bl	8005b5c <USB_ReadInterrupts>
 8001430:	4603      	mov	r3, r0
 8001432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800143a:	d121      	bne.n	8001480 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800144a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001452:	2b00      	cmp	r3, #0
 8001454:	d111      	bne.n	800147a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	f003 020f 	and.w	r2, r3, #15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001470:	2101      	movs	r1, #1
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fea2 	bl	80021bc <HAL_PCDEx_LPM_Callback>
 8001478:	e002      	b.n	8001480 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f006 ff44 	bl	8008308 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f004 fb69 	bl	8005b5c <USB_ReadInterrupts>
 800148a:	4603      	mov	r3, r0
 800148c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001494:	f040 80b7 	bne.w	8001606 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014a6:	f023 0301 	bic.w	r3, r3, #1
 80014aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2110      	movs	r1, #16
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fc36 	bl	8004d24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014bc:	e046      	b.n	800154c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80014be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c0:	015a      	lsls	r2, r3, #5
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	4413      	add	r3, r2
 80014c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014ca:	461a      	mov	r2, r3
 80014cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80014d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80014d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d4:	015a      	lsls	r2, r3, #5
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014e2:	0151      	lsls	r1, r2, #5
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	440a      	add	r2, r1
 80014e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80014ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80014f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014fe:	461a      	mov	r2, r3
 8001500:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001504:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	4413      	add	r3, r2
 800150e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001516:	0151      	lsls	r1, r2, #5
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	440a      	add	r2, r1
 800151c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001520:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001524:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001528:	015a      	lsls	r2, r3, #5
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	4413      	add	r3, r2
 800152e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001536:	0151      	lsls	r1, r2, #5
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	440a      	add	r2, r1
 800153c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001540:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001544:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001548:	3301      	adds	r3, #1
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	791b      	ldrb	r3, [r3, #4]
 8001550:	461a      	mov	r2, r3
 8001552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001554:	4293      	cmp	r3, r2
 8001556:	d3b2      	bcc.n	80014be <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001566:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800156a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7bdb      	ldrb	r3, [r3, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d016      	beq.n	80015a2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800157a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001584:	f043 030b 	orr.w	r3, r3, #11
 8001588:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001594:	69fa      	ldr	r2, [r7, #28]
 8001596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800159a:	f043 030b 	orr.w	r3, r3, #11
 800159e:	6453      	str	r3, [r2, #68]	@ 0x44
 80015a0:	e015      	b.n	80015ce <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80015b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015c8:	f043 030b 	orr.w	r3, r3, #11
 80015cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015dc:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80015e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80015f0:	461a      	mov	r2, r3
 80015f2:	f004 fb77 	bl	8005ce4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f004 faa6 	bl	8005b5c <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800161a:	d123      	bne.n	8001664 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f004 fb3c 	bl	8005c9e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fbf3 	bl	8004e16 <USB_GetDevSpeed>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681c      	ldr	r4, [r3, #0]
 800163c:	f002 f854 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8001640:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001646:	461a      	mov	r2, r3
 8001648:	4620      	mov	r0, r4
 800164a:	f003 f8eb 	bl	8004824 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f006 fe32 	bl	80082b8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	695a      	ldr	r2, [r3, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001662:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f004 fa77 	bl	8005b5c <USB_ReadInterrupts>
 800166e:	4603      	mov	r3, r0
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b08      	cmp	r3, #8
 8001676:	d10a      	bne.n	800168e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f006 fe0f 	bl	800829c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f002 0208 	and.w	r2, r2, #8
 800168c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f004 fa62 	bl	8005b5c <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169e:	2b80      	cmp	r3, #128	@ 0x80
 80016a0:	d123      	bne.n	80016ea <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016ae:	2301      	movs	r3, #1
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80016b2:	e014      	b.n	80016de <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	4413      	add	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d105      	bne.n	80016d8 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fb0a 	bl	8001cec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016da:	3301      	adds	r3, #1
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	461a      	mov	r2, r3
 80016e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d3e4      	bcc.n	80016b4 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f004 fa34 	bl	8005b5c <USB_ReadInterrupts>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80016fe:	d13c      	bne.n	800177a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001700:	2301      	movs	r3, #1
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
 8001704:	e02b      	b.n	800175e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	015a      	lsls	r2, r3, #5
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	4413      	add	r3, r2
 800170e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800171a:	4613      	mov	r3, r2
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	4413      	add	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	3318      	adds	r3, #24
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d115      	bne.n	8001758 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800172c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800172e:	2b00      	cmp	r3, #0
 8001730:	da12      	bge.n	8001758 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001732:	6879      	ldr	r1, [r7, #4]
 8001734:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3317      	adds	r3, #23
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 faca 	bl	8001cec <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175a:	3301      	adds	r3, #1
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	791b      	ldrb	r3, [r3, #4]
 8001762:	461a      	mov	r2, r3
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	4293      	cmp	r3, r2
 8001768:	d3cd      	bcc.n	8001706 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f004 f9ec 	bl	8005b5c <USB_ReadInterrupts>
 8001784:	4603      	mov	r3, r0
 8001786:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800178e:	d156      	bne.n	800183e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001790:	2301      	movs	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24
 8001794:	e045      	b.n	8001822 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	015a      	lsls	r2, r3, #5
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	4413      	add	r3, r2
 800179e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017aa:	4613      	mov	r3, r2
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4413      	add	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d12e      	bne.n	800181c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80017be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da2b      	bge.n	800181c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	0c1a      	lsrs	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80017ce:	4053      	eors	r3, r2
 80017d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d121      	bne.n	800181c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10a      	bne.n	800181c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001814:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001818:	6053      	str	r3, [r2, #4]
            break;
 800181a:	e008      	b.n	800182e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	791b      	ldrb	r3, [r3, #4]
 8001826:	461a      	mov	r2, r3
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	4293      	cmp	r3, r2
 800182c:	d3b3      	bcc.n	8001796 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	695a      	ldr	r2, [r3, #20]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800183c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f004 f98a 	bl	8005b5c <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800184e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001852:	d10a      	bne.n	800186a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f006 fdaf 	bl	80083b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f004 f974 	bl	8005b5c <USB_ReadInterrupts>
 8001874:	4603      	mov	r3, r0
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b04      	cmp	r3, #4
 800187c:	d115      	bne.n	80018aa <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d002      	beq.n	8001896 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f006 fd9f 	bl	80083d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	e000      	b.n	80018aa <HAL_PCD_IRQHandler+0x996>
      return;
 80018a8:	bf00      	nop
    }
  }
}
 80018aa:	3734      	adds	r7, #52	@ 0x34
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd90      	pop	{r4, r7, pc}

080018b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d101      	bne.n	80018ca <HAL_PCD_SetAddress+0x1a>
 80018c6:	2302      	movs	r3, #2
 80018c8:	e012      	b.n	80018f0 <HAL_PCD_SetAddress+0x40>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	78fa      	ldrb	r2, [r7, #3]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f004 f8d3 	bl	8005a8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	4608      	mov	r0, r1
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4603      	mov	r3, r0
 8001908:	70fb      	strb	r3, [r7, #3]
 800190a:	460b      	mov	r3, r1
 800190c:	803b      	strh	r3, [r7, #0]
 800190e:	4613      	mov	r3, r2
 8001910:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800191a:	2b00      	cmp	r3, #0
 800191c:	da0f      	bge.n	800193e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	f003 020f 	and.w	r2, r3, #15
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	3310      	adds	r3, #16
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	4413      	add	r3, r2
 8001932:	3304      	adds	r3, #4
 8001934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	705a      	strb	r2, [r3, #1]
 800193c:	e00f      	b.n	800195e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	f003 020f 	and.w	r2, r3, #15
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4413      	add	r3, r2
 8001954:	3304      	adds	r3, #4
 8001956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	b2da      	uxtb	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800196a:	883b      	ldrh	r3, [r7, #0]
 800196c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	78ba      	ldrb	r2, [r7, #2]
 8001978:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	785b      	ldrb	r3, [r3, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d004      	beq.n	800198c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800198c:	78bb      	ldrb	r3, [r7, #2]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d102      	bne.n	8001998 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_PCD_EP_Open+0xae>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e00e      	b.n	80019c4 <HAL_PCD_EP_Open+0xcc>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fa53 	bl	8004e60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80019c2:	7afb      	ldrb	r3, [r7, #11]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da0f      	bge.n	8001a00 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 020f 	and.w	r2, r3, #15
 80019e6:	4613      	mov	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3310      	adds	r3, #16
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	3304      	adds	r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2201      	movs	r2, #1
 80019fc:	705a      	strb	r2, [r3, #1]
 80019fe:	e00f      	b.n	8001a20 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	f003 020f 	and.w	r2, r3, #15
 8001a06:	4613      	mov	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	3304      	adds	r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_PCD_EP_Close+0x6e>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e00e      	b.n	8001a58 <HAL_PCD_EP_Close+0x8c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fa91 	bl	8004f70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	f003 020f 	and.w	r2, r3, #15
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4413      	add	r3, r2
 8001a86:	3304      	adds	r3, #4
 8001a88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa2:	7afb      	ldrb	r3, [r7, #11]
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	799b      	ldrb	r3, [r3, #6]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d102      	bne.n	8001abc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	799b      	ldrb	r3, [r3, #6]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	6979      	ldr	r1, [r7, #20]
 8001ac8:	f003 fb2e 	bl	8005128 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	f003 020f 	and.w	r2, r3, #15
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001af8:	681b      	ldr	r3, [r3, #0]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	460b      	mov	r3, r1
 8001b14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b16:	7afb      	ldrb	r3, [r7, #11]
 8001b18:	f003 020f 	and.w	r2, r3, #15
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	3310      	adds	r3, #16
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4413      	add	r3, r2
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2201      	movs	r2, #1
 8001b44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b46:	7afb      	ldrb	r3, [r7, #11]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	799b      	ldrb	r3, [r3, #6]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	799b      	ldrb	r3, [r3, #6]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	6979      	ldr	r1, [r7, #20]
 8001b6c:	f003 fadc 	bl	8005128 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b084      	sub	sp, #16
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	460b      	mov	r3, r1
 8001b84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b86:	78fb      	ldrb	r3, [r7, #3]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	7912      	ldrb	r2, [r2, #4]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e04f      	b.n	8001c38 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da0f      	bge.n	8001bc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	f003 020f 	and.w	r2, r3, #15
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	3310      	adds	r3, #16
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	705a      	strb	r2, [r3, #1]
 8001bbe:	e00d      	b.n	8001bdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <HAL_PCD_EP_SetStall+0x82>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e01d      	b.n	8001c38 <HAL_PCD_EP_SetStall+0xbe>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f003 fe6a 	bl	80058e4 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7999      	ldrb	r1, [r3, #6]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f004 f85b 	bl	8005ce4 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	7912      	ldrb	r2, [r2, #4]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e042      	b.n	8001ce4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da0f      	bge.n	8001c86 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	f003 020f 	and.w	r2, r3, #15
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	3310      	adds	r3, #16
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	705a      	strb	r2, [r3, #1]
 8001c84:	e00f      	b.n	8001ca6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c86:	78fb      	ldrb	r3, [r7, #3]
 8001c88:	f003 020f 	and.w	r2, r3, #15
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_PCD_EP_ClrStall+0x86>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e00e      	b.n	8001ce4 <HAL_PCD_EP_ClrStall+0xa4>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68f9      	ldr	r1, [r7, #12]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f003 fe73 	bl	80059c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001cf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	da0c      	bge.n	8001d1a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	f003 020f 	and.w	r2, r3, #15
 8001d06:	4613      	mov	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3310      	adds	r3, #16
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	4413      	add	r3, r2
 8001d14:	3304      	adds	r3, #4
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	e00c      	b.n	8001d34 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	f003 020f 	and.w	r2, r3, #15
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	3304      	adds	r3, #4
 8001d32:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fc92 	bl	8005664 <USB_EPStopXfer>
 8001d40:	4603      	mov	r3, r0
 8001d42:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001d44:	7afb      	ldrb	r3, [r7, #11]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b08a      	sub	sp, #40	@ 0x28
 8001d52:	af02      	add	r7, sp, #8
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d901      	bls.n	8001d86 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e06b      	b.n	8001e5e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d902      	bls.n	8001da2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3303      	adds	r3, #3
 8001da6:	089b      	lsrs	r3, r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001daa:	e02a      	b.n	8001e02 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	69fa      	ldr	r2, [r7, #28]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d902      	bls.n	8001dc8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	3303      	adds	r3, #3
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68d9      	ldr	r1, [r3, #12]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4603      	mov	r3, r0
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f003 fce7 	bl	80057b8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	441a      	add	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	441a      	add	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d809      	bhi.n	8001e2c <PCD_WriteEmptyTxFifo+0xde>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d203      	bcs.n	8001e2c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1bf      	bne.n	8001dac <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d811      	bhi.n	8001e5c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	2201      	movs	r2, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	6939      	ldr	r1, [r7, #16]
 8001e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001e58:	4013      	ands	r3, r2
 8001e5a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
	...

08001e68 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	333c      	adds	r3, #60	@ 0x3c
 8001e80:	3304      	adds	r3, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	015a      	lsls	r2, r3, #5
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	799b      	ldrb	r3, [r3, #6]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d17b      	bne.n	8001f96 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d015      	beq.n	8001ed4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	4a61      	ldr	r2, [pc, #388]	@ (8002030 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	f240 80b9 	bls.w	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80b3 	beq.w	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ed0:	6093      	str	r3, [r2, #8]
 8001ed2:	e0a7      	b.n	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eea:	461a      	mov	r2, r3
 8001eec:	2320      	movs	r3, #32
 8001eee:	6093      	str	r3, [r2, #8]
 8001ef0:	e098      	b.n	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 8093 	bne.w	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	4a4b      	ldr	r2, [pc, #300]	@ (8002030 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d90f      	bls.n	8001f26 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f22:	6093      	str	r3, [r2, #8]
 8001f24:	e07e      	b.n	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	0159      	lsls	r1, r3, #5
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	440b      	add	r3, r1
 8001f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f52:	1ad2      	subs	r2, r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d114      	bne.n	8001f88 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f70:	461a      	mov	r2, r3
 8001f72:	2101      	movs	r1, #1
 8001f74:	f003 feb6 	bl	8005ce4 <USB_EP0_OutStart>
 8001f78:	e006      	b.n	8001f88 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	441a      	add	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f006 f94f 	bl	8008232 <HAL_PCD_DataOutStageCallback>
 8001f94:	e046      	b.n	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	4a26      	ldr	r2, [pc, #152]	@ (8002034 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d124      	bne.n	8001fe8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00a      	beq.n	8001fbe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fba:	6093      	str	r3, [r2, #8]
 8001fbc:	e032      	b.n	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f006 f926 	bl	8008232 <HAL_PCD_DataOutStageCallback>
 8001fe6:	e01d      	b.n	8002024 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d114      	bne.n	8002018 <PCD_EP_OutXfrComplete_int+0x1b0>
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d108      	bne.n	8002018 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002010:	461a      	mov	r2, r3
 8002012:	2100      	movs	r1, #0
 8002014:	f003 fe66 	bl	8005ce4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f006 f907 	bl	8008232 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	4f54300a 	.word	0x4f54300a
 8002034:	4f54310a 	.word	0x4f54310a

08002038 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	333c      	adds	r3, #60	@ 0x3c
 8002050:	3304      	adds	r3, #4
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	015a      	lsls	r2, r3, #5
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4413      	add	r3, r2
 800205e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4a15      	ldr	r2, [pc, #84]	@ (80020c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d90e      	bls.n	800208c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002084:	461a      	mov	r2, r3
 8002086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800208a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f006 f8be 	bl	800820e <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d90c      	bls.n	80020b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	799b      	ldrb	r3, [r3, #6]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80020ac:	461a      	mov	r2, r3
 80020ae:	2101      	movs	r1, #1
 80020b0:	f003 fe18 	bl	8005ce4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	4f54300a 	.word	0x4f54300a

080020c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	70fb      	strb	r3, [r7, #3]
 80020d0:	4613      	mov	r3, r2
 80020d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020dc:	78fb      	ldrb	r3, [r7, #3]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d107      	bne.n	80020f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020e2:	883b      	ldrh	r3, [r7, #0]
 80020e4:	0419      	lsls	r1, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80020f0:	e028      	b.n	8002144 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002100:	2300      	movs	r3, #0
 8002102:	73fb      	strb	r3, [r7, #15]
 8002104:	e00d      	b.n	8002122 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3340      	adds	r3, #64	@ 0x40
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4413      	add	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	3301      	adds	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	3b01      	subs	r3, #1
 8002128:	429a      	cmp	r2, r3
 800212a:	d3ec      	bcc.n	8002106 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800212c:	883b      	ldrh	r3, [r7, #0]
 800212e:	0418      	lsls	r0, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	3b01      	subs	r3, #1
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	4302      	orrs	r2, r0
 800213c:	3340      	adds	r3, #64	@ 0x40
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	f043 0303 	orr.w	r3, r3, #3
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80021dc:	4b39      	ldr	r3, [pc, #228]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021e4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10b      	bne.n	8002206 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021f4:	d905      	bls.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80021f6:	4b33      	ldr	r3, [pc, #204]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	4a32      	ldr	r2, [pc, #200]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002200:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002202:	2300      	movs	r3, #0
 8002204:	e057      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800220c:	d90a      	bls.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800220e:	4b2d      	ldr	r3, [pc, #180]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4313      	orrs	r3, r2
 800221a:	4a2a      	ldr	r2, [pc, #168]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002220:	60d3      	str	r3, [r2, #12]
 8002222:	e007      	b.n	8002234 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002224:	4b27      	ldr	r3, [pc, #156]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800222c:	4925      	ldr	r1, [pc, #148]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002234:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a24      	ldr	r2, [pc, #144]	@ (80022cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	2232      	movs	r2, #50	@ 0x32
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	4a21      	ldr	r2, [pc, #132]	@ (80022cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002252:	e002      	b.n	800225a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3b01      	subs	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800225a:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f3      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01b      	beq.n	80022aa <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002272:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a15      	ldr	r2, [pc, #84]	@ (80022cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	2232      	movs	r2, #50	@ 0x32
 8002280:	fb02 f303 	mul.w	r3, r2, r3
 8002284:	4a11      	ldr	r2, [pc, #68]	@ (80022cc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002286:	fba2 2303 	umull	r2, r3, r2, r3
 800228a:	099b      	lsrs	r3, r3, #6
 800228c:	3301      	adds	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002290:	e002      	b.n	8002298 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3b01      	subs	r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002298:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800229a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_PWREx_ControlVoltageScaling+0xd6>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f3      	bne.n	8002292 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e000      	b.n	80022b6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	46020800 	.word	0x46020800
 80022c8:	20000000 	.word	0x20000000
 80022cc:	10624dd3 	.word	0x10624dd3

080022d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80022d4:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80022dc:	4618      	mov	r0, r3
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	46020800 	.word	0x46020800

080022ec <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80022f0:	4b05      	ldr	r3, [pc, #20]	@ (8002308 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <HAL_PWREx_EnableVddUSB+0x1c>)
 80022f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	6113      	str	r3, [r2, #16]
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	46020800 	.word	0x46020800

0800230c <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 8002312:	f7ff ffdd 	bl	80022d0 <HAL_PWREx_GetVoltageRange>
 8002316:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800231e:	d003      	beq.n	8002328 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002326:	d107      	bne.n	8002338 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a05      	ldr	r2, [pc, #20]	@ (8002344 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 800232e:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 8002332:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	e000      	b.n	800233a <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	46020800 	.word	0x46020800

08002348 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	@ 0x38
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	f000 bec8 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002362:	4b99      	ldr	r3, [pc, #612]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800236c:	4b96      	ldr	r3, [pc, #600]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 816c 	beq.w	800265c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_RCC_OscConfig+0x52>
 800238a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238c:	2b0c      	cmp	r3, #12
 800238e:	f040 80de 	bne.w	800254e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	2b01      	cmp	r3, #1
 8002396:	f040 80da 	bne.w	800254e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d102      	bne.n	80023a8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	f000 bea5 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ac:	4b86      	ldr	r3, [pc, #536]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_RCC_OscConfig+0x7a>
 80023b8:	4b83      	ldr	r3, [pc, #524]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80023c0:	e005      	b.n	80023ce <HAL_RCC_OscConfig+0x86>
 80023c2:	4b81      	ldr	r3, [pc, #516]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023c8:	041b      	lsls	r3, r3, #16
 80023ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d255      	bcs.n	800247e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10a      	bne.n	80023ee <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	4618      	mov	r0, r3
 80023de:	f001 f99d 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f000 be82 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80023ee:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4a75      	ldr	r2, [pc, #468]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023f8:	6093      	str	r3, [r2, #8]
 80023fa:	4b73      	ldr	r3, [pc, #460]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	4970      	ldr	r1, [pc, #448]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002410:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002414:	d309      	bcc.n	800242a <HAL_RCC_OscConfig+0xe2>
 8002416:	4b6c      	ldr	r3, [pc, #432]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f023 021f 	bic.w	r2, r3, #31
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4969      	ldr	r1, [pc, #420]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
 8002428:	e07e      	b.n	8002528 <HAL_RCC_OscConfig+0x1e0>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	2b00      	cmp	r3, #0
 8002430:	da0a      	bge.n	8002448 <HAL_RCC_OscConfig+0x100>
 8002432:	4b65      	ldr	r3, [pc, #404]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	015b      	lsls	r3, r3, #5
 8002440:	4961      	ldr	r1, [pc, #388]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002442:	4313      	orrs	r3, r2
 8002444:	60cb      	str	r3, [r1, #12]
 8002446:	e06f      	b.n	8002528 <HAL_RCC_OscConfig+0x1e0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002450:	d30a      	bcc.n	8002468 <HAL_RCC_OscConfig+0x120>
 8002452:	4b5d      	ldr	r3, [pc, #372]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	029b      	lsls	r3, r3, #10
 8002460:	4959      	ldr	r1, [pc, #356]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002462:	4313      	orrs	r3, r2
 8002464:	60cb      	str	r3, [r1, #12]
 8002466:	e05f      	b.n	8002528 <HAL_RCC_OscConfig+0x1e0>
 8002468:	4b57      	ldr	r3, [pc, #348]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	03db      	lsls	r3, r3, #15
 8002476:	4954      	ldr	r1, [pc, #336]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002478:	4313      	orrs	r3, r2
 800247a:	60cb      	str	r3, [r1, #12]
 800247c:	e054      	b.n	8002528 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800247e:	4b52      	ldr	r3, [pc, #328]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a51      	ldr	r2, [pc, #324]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002484:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002488:	6093      	str	r3, [r2, #8]
 800248a:	4b4f      	ldr	r3, [pc, #316]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	494c      	ldr	r1, [pc, #304]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80024a4:	d309      	bcc.n	80024ba <HAL_RCC_OscConfig+0x172>
 80024a6:	4b48      	ldr	r3, [pc, #288]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f023 021f 	bic.w	r2, r3, #31
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	4945      	ldr	r1, [pc, #276]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
 80024b8:	e028      	b.n	800250c <HAL_RCC_OscConfig+0x1c4>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da0a      	bge.n	80024d8 <HAL_RCC_OscConfig+0x190>
 80024c2:	4b41      	ldr	r3, [pc, #260]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	015b      	lsls	r3, r3, #5
 80024d0:	493d      	ldr	r1, [pc, #244]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60cb      	str	r3, [r1, #12]
 80024d6:	e019      	b.n	800250c <HAL_RCC_OscConfig+0x1c4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e0:	d30a      	bcc.n	80024f8 <HAL_RCC_OscConfig+0x1b0>
 80024e2:	4b39      	ldr	r3, [pc, #228]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	029b      	lsls	r3, r3, #10
 80024f0:	4935      	ldr	r1, [pc, #212]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60cb      	str	r3, [r1, #12]
 80024f6:	e009      	b.n	800250c <HAL_RCC_OscConfig+0x1c4>
 80024f8:	4b33      	ldr	r3, [pc, #204]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	03db      	lsls	r3, r3, #15
 8002506:	4930      	ldr	r1, [pc, #192]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002508:	4313      	orrs	r3, r2
 800250a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800250c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	4618      	mov	r0, r3
 8002518:	f001 f900 	bl	800371c <RCC_SetFlashLatencyFromMSIRange>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	f000 bde5 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8002528:	f001 f8de 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800252c:	4b27      	ldr	r3, [pc, #156]	@ (80025cc <HAL_RCC_OscConfig+0x284>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe f91b 	bl	800076c <HAL_InitTick>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800253c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 808a 	beq.w	800265a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8002546:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800254a:	f000 bdd2 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d066      	beq.n	8002624 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1b      	ldr	r2, [pc, #108]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002562:	f7fe f98d 	bl	8000880 <HAL_GetTick>
 8002566:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002568:	e009      	b.n	800257e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800256a:	f7fe f989 	bl	8000880 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d902      	bls.n	800257e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	f000 bdba 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ef      	beq.n	800256a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4a0e      	ldr	r2, [pc, #56]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002594:	6093      	str	r3, [r2, #8]
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	4909      	ldr	r1, [pc, #36]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80025b0:	d30e      	bcc.n	80025d0 <HAL_RCC_OscConfig+0x288>
 80025b2:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f023 021f 	bic.w	r2, r3, #31
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4902      	ldr	r1, [pc, #8]	@ (80025c8 <HAL_RCC_OscConfig+0x280>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60cb      	str	r3, [r1, #12]
 80025c4:	e04a      	b.n	800265c <HAL_RCC_OscConfig+0x314>
 80025c6:	bf00      	nop
 80025c8:	46020c00 	.word	0x46020c00
 80025cc:	20000004 	.word	0x20000004
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	da0a      	bge.n	80025ee <HAL_RCC_OscConfig+0x2a6>
 80025d8:	4b98      	ldr	r3, [pc, #608]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	015b      	lsls	r3, r3, #5
 80025e6:	4995      	ldr	r1, [pc, #596]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60cb      	str	r3, [r1, #12]
 80025ec:	e036      	b.n	800265c <HAL_RCC_OscConfig+0x314>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025f6:	d30a      	bcc.n	800260e <HAL_RCC_OscConfig+0x2c6>
 80025f8:	4b90      	ldr	r3, [pc, #576]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	029b      	lsls	r3, r3, #10
 8002606:	498d      	ldr	r1, [pc, #564]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	60cb      	str	r3, [r1, #12]
 800260c:	e026      	b.n	800265c <HAL_RCC_OscConfig+0x314>
 800260e:	4b8b      	ldr	r3, [pc, #556]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	03db      	lsls	r3, r3, #15
 800261c:	4987      	ldr	r1, [pc, #540]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	60cb      	str	r3, [r1, #12]
 8002622:	e01b      	b.n	800265c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8002624:	4b85      	ldr	r3, [pc, #532]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a84      	ldr	r2, [pc, #528]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002630:	f7fe f926 	bl	8000880 <HAL_GetTick>
 8002634:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8002636:	e009      	b.n	800264c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002638:	f7fe f922 	bl	8000880 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	f000 bd53 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800264c:	4b7b      	ldr	r3, [pc, #492]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1ef      	bne.n	8002638 <HAL_RCC_OscConfig+0x2f0>
 8002658:	e000      	b.n	800265c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800265a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 808b 	beq.w	8002780 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800266a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266c:	2b08      	cmp	r3, #8
 800266e:	d005      	beq.n	800267c <HAL_RCC_OscConfig+0x334>
 8002670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d109      	bne.n	800268a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002678:	2b03      	cmp	r3, #3
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d17d      	bne.n	8002780 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f000 bd34 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x35a>
 8002694:	4b69      	ldr	r3, [pc, #420]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a68      	ldr	r2, [pc, #416]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	e041      	b.n	8002726 <HAL_RCC_OscConfig+0x3de>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026aa:	d112      	bne.n	80026d2 <HAL_RCC_OscConfig+0x38a>
 80026ac:	4b63      	ldr	r3, [pc, #396]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a62      	ldr	r2, [pc, #392]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b60      	ldr	r3, [pc, #384]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a5f      	ldr	r2, [pc, #380]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b5d      	ldr	r3, [pc, #372]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a5c      	ldr	r2, [pc, #368]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	e029      	b.n	8002726 <HAL_RCC_OscConfig+0x3de>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80026da:	d112      	bne.n	8002702 <HAL_RCC_OscConfig+0x3ba>
 80026dc:	4b57      	ldr	r3, [pc, #348]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a56      	ldr	r2, [pc, #344]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b54      	ldr	r3, [pc, #336]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a53      	ldr	r2, [pc, #332]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b51      	ldr	r3, [pc, #324]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a50      	ldr	r2, [pc, #320]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e011      	b.n	8002726 <HAL_RCC_OscConfig+0x3de>
 8002702:	4b4e      	ldr	r3, [pc, #312]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a4d      	ldr	r2, [pc, #308]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a4a      	ldr	r2, [pc, #296]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002714:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b48      	ldr	r3, [pc, #288]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a47      	ldr	r2, [pc, #284]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002720:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002724:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800272e:	f7fe f8a7 	bl	8000880 <HAL_GetTick>
 8002732:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002734:	e009      	b.n	800274a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002736:	f7fe f8a3 	bl	8000880 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b64      	cmp	r3, #100	@ 0x64
 8002742:	d902      	bls.n	800274a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	f000 bcd4 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274a:	4b3c      	ldr	r3, [pc, #240]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ef      	beq.n	8002736 <HAL_RCC_OscConfig+0x3ee>
 8002756:	e013      	b.n	8002780 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8002758:	f7fe f892 	bl	8000880 <HAL_GetTick>
 800275c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275e:	e009      	b.n	8002774 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe f88e 	bl	8000880 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	@ 0x64
 800276c:	d902      	bls.n	8002774 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	f000 bcbf 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002774:	4b31      	ldr	r3, [pc, #196]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ef      	bne.n	8002760 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d05f      	beq.n	800284c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800278c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800278e:	2b04      	cmp	r3, #4
 8002790:	d005      	beq.n	800279e <HAL_RCC_OscConfig+0x456>
 8002792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002794:	2b0c      	cmp	r3, #12
 8002796:	d114      	bne.n	80027c2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279a:	2b02      	cmp	r3, #2
 800279c:	d111      	bne.n	80027c2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	f000 bca3 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80027ac:	4b23      	ldr	r3, [pc, #140]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	041b      	lsls	r3, r3, #16
 80027ba:	4920      	ldr	r1, [pc, #128]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80027c0:	e044      	b.n	800284c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d024      	beq.n	8002814 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80027ca:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027d6:	f7fe f853 	bl	8000880 <HAL_GetTick>
 80027da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027de:	f7fe f84f 	bl	8000880 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d902      	bls.n	80027f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	f000 bc80 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f2:	4b12      	ldr	r3, [pc, #72]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ef      	beq.n	80027de <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	041b      	lsls	r3, r3, #16
 800280c:	490b      	ldr	r1, [pc, #44]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	610b      	str	r3, [r1, #16]
 8002812:	e01b      	b.n	800284c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8002814:	4b09      	ldr	r3, [pc, #36]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a08      	ldr	r2, [pc, #32]	@ (800283c <HAL_RCC_OscConfig+0x4f4>)
 800281a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800281e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002820:	f7fe f82e 	bl	8000880 <HAL_GetTick>
 8002824:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7fe f82a 	bl	8000880 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d904      	bls.n	8002840 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	f000 bc5b 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
 800283c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002840:	4baf      	ldr	r3, [pc, #700]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ed      	bne.n	8002828 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 80c8 	beq.w	80029ea <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002860:	4ba7      	ldr	r3, [pc, #668]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d111      	bne.n	8002892 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4ba4      	ldr	r3, [pc, #656]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002874:	4aa2      	ldr	r2, [pc, #648]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800287e:	4ba0      	ldr	r3, [pc, #640]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800288c:	2301      	movs	r3, #1
 800288e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002892:	4b9c      	ldr	r3, [pc, #624]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 8002894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d119      	bne.n	80028d2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800289e:	4b99      	ldr	r3, [pc, #612]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 80028a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a2:	4a98      	ldr	r2, [pc, #608]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028aa:	f7fd ffe9 	bl	8000880 <HAL_GetTick>
 80028ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028b0:	e009      	b.n	80028c6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b2:	f7fd ffe5 	bl	8000880 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d902      	bls.n	80028c6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	f000 bc16 	b.w	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80028c6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 80028c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0ef      	beq.n	80028b2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d05f      	beq.n	800299a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80028da:	4b89      	ldr	r3, [pc, #548]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 80028dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d037      	beq.n	8002960 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80028fa:	6a3b      	ldr	r3, [r7, #32]
 80028fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e3f4      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01b      	beq.n	800294a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8002912:	4b7b      	ldr	r3, [pc, #492]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002918:	4a79      	ldr	r2, [pc, #484]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 800291a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800291e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8002922:	f7fd ffad 	bl	8000880 <HAL_GetTick>
 8002926:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292a:	f7fd ffa9 	bl	8000880 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b05      	cmp	r3, #5
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e3da      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800293c:	4b70      	ldr	r3, [pc, #448]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 800293e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002942:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1ef      	bne.n	800292a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800294a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 800294c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002950:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4969      	ldr	r1, [pc, #420]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002960:	4b67      	ldr	r3, [pc, #412]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002966:	4a66      	ldr	r2, [pc, #408]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002968:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800296c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002970:	f7fd ff86 	bl	8000880 <HAL_GetTick>
 8002974:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002978:	f7fd ff82 	bl	8000880 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b05      	cmp	r3, #5
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e3b3      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800298a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 800298c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002990:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ef      	beq.n	8002978 <HAL_RCC_OscConfig+0x630>
 8002998:	e01b      	b.n	80029d2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800299a:	4b59      	ldr	r3, [pc, #356]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 800299c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029a0:	4a57      	ldr	r2, [pc, #348]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 80029a2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80029a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80029aa:	f7fd ff69 	bl	8000880 <HAL_GetTick>
 80029ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fd ff65 	bl	8000880 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e396      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80029c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 80029c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ef      	bne.n	80029b2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b49      	ldr	r3, [pc, #292]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 80029dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029e0:	4a47      	ldr	r2, [pc, #284]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8111 	beq.w	8002c1a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fe:	4b40      	ldr	r3, [pc, #256]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d111      	bne.n	8002a30 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a12:	4a3b      	ldr	r2, [pc, #236]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002a1c:	4b38      	ldr	r3, [pc, #224]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a30:	4b34      	ldr	r3, [pc, #208]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d118      	bne.n	8002a6e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	4a30      	ldr	r2, [pc, #192]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a48:	f7fd ff1a 	bl	8000880 <HAL_GetTick>
 8002a4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a50:	f7fd ff16 	bl	8000880 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e347      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a62:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <HAL_RCC_OscConfig+0x7bc>)
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d01f      	beq.n	8002aba <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a96:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a9c:	4a18      	ldr	r2, [pc, #96]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002aa6:	e018      	b.n	8002ada <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aa8:	4b15      	ldr	r3, [pc, #84]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aae:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ab8:	e00f      	b.n	8002ada <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aba:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ad0:	4a0b      	ldr	r2, [pc, #44]	@ (8002b00 <HAL_RCC_OscConfig+0x7b8>)
 8002ad2:	f023 0304 	bic.w	r3, r3, #4
 8002ad6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d057      	beq.n	8002b92 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002ae2:	f7fd fecd 	bl	8000880 <HAL_GetTick>
 8002ae6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae8:	e00e      	b.n	8002b08 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fd fec9 	bl	8000880 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d905      	bls.n	8002b08 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e2f8      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
 8002b00:	46020c00 	.word	0x46020c00
 8002b04:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b08:	4b9c      	ldr	r3, [pc, #624]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0e9      	beq.n	8002aea <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01b      	beq.n	8002b5a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b22:	4b96      	ldr	r3, [pc, #600]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b28:	4a94      	ldr	r2, [pc, #592]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002b2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b34:	f7fd fea4 	bl	8000880 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e2d3      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b4a:	4b8c      	ldr	r3, [pc, #560]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ed      	beq.n	8002b34 <HAL_RCC_OscConfig+0x7ec>
 8002b58:	e053      	b.n	8002c02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b5a:	4b88      	ldr	r3, [pc, #544]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b60:	4a86      	ldr	r2, [pc, #536]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b6a:	e00a      	b.n	8002b82 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6c:	f7fd fe88 	bl	8000880 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e2b7      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b82:	4b7e      	ldr	r3, [pc, #504]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ed      	bne.n	8002b6c <HAL_RCC_OscConfig+0x824>
 8002b90:	e037      	b.n	8002c02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002b92:	f7fd fe75 	bl	8000880 <HAL_GetTick>
 8002b96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b98:	e00a      	b.n	8002bb0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fd fe71 	bl	8000880 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e2a0      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bb0:	4b72      	ldr	r3, [pc, #456]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1ed      	bne.n	8002b9a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01a      	beq.n	8002c02 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002bce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bd2:	4a6a      	ldr	r2, [pc, #424]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002bd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bd8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bde:	f7fd fe4f 	bl	8000880 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e27e      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bf4:	4b61      	ldr	r3, [pc, #388]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ed      	bne.n	8002bde <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c02:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c10:	4a5a      	ldr	r2, [pc, #360]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d036      	beq.n	8002c94 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d019      	beq.n	8002c62 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002c2e:	4b53      	ldr	r3, [pc, #332]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a52      	ldr	r2, [pc, #328]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c3a:	f7fd fe21 	bl	8000880 <HAL_GetTick>
 8002c3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c42:	f7fd fe1d 	bl	8000880 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e24e      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002c54:	4b49      	ldr	r3, [pc, #292]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x8fa>
 8002c60:	e018      	b.n	8002c94 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002c62:	4b46      	ldr	r3, [pc, #280]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a45      	ldr	r2, [pc, #276]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c6c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c6e:	f7fd fe07 	bl	8000880 <HAL_GetTick>
 8002c72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c76:	f7fd fe03 	bl	8000880 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e234      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c88:	4b3c      	ldr	r3, [pc, #240]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d036      	beq.n	8002d0e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002ca8:	4b34      	ldr	r3, [pc, #208]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a33      	ldr	r2, [pc, #204]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002cb4:	f7fd fde4 	bl	8000880 <HAL_GetTick>
 8002cb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002cbc:	f7fd fde0 	bl	8000880 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e211      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002cce:	4b2b      	ldr	r3, [pc, #172]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d0f0      	beq.n	8002cbc <HAL_RCC_OscConfig+0x974>
 8002cda:	e018      	b.n	8002d0e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002cdc:	4b27      	ldr	r3, [pc, #156]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a26      	ldr	r2, [pc, #152]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002ce2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ce6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002ce8:	f7fd fdca 	bl	8000880 <HAL_GetTick>
 8002cec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002cf0:	f7fd fdc6 	bl	8000880 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e1f7      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002d02:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d07f      	beq.n	8002e1a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d062      	beq.n	8002de8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002d22:	4b16      	ldr	r3, [pc, #88]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4a15      	ldr	r2, [pc, #84]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d2c:	6093      	str	r3, [r2, #8]
 8002d2e:	4b13      	ldr	r3, [pc, #76]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	4910      	ldr	r1, [pc, #64]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002d48:	d309      	bcc.n	8002d5e <HAL_RCC_OscConfig+0xa16>
 8002d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f023 021f 	bic.w	r2, r3, #31
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4909      	ldr	r1, [pc, #36]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60cb      	str	r3, [r1, #12]
 8002d5c:	e02a      	b.n	8002db4 <HAL_RCC_OscConfig+0xa6c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da0c      	bge.n	8002d80 <HAL_RCC_OscConfig+0xa38>
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	015b      	lsls	r3, r3, #5
 8002d74:	4901      	ldr	r1, [pc, #4]	@ (8002d7c <HAL_RCC_OscConfig+0xa34>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60cb      	str	r3, [r1, #12]
 8002d7a:	e01b      	b.n	8002db4 <HAL_RCC_OscConfig+0xa6c>
 8002d7c:	46020c00 	.word	0x46020c00
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d88:	d30a      	bcc.n	8002da0 <HAL_RCC_OscConfig+0xa58>
 8002d8a:	4ba1      	ldr	r3, [pc, #644]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	029b      	lsls	r3, r3, #10
 8002d98:	499d      	ldr	r1, [pc, #628]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60cb      	str	r3, [r1, #12]
 8002d9e:	e009      	b.n	8002db4 <HAL_RCC_OscConfig+0xa6c>
 8002da0:	4b9b      	ldr	r3, [pc, #620]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	03db      	lsls	r3, r3, #15
 8002dae:	4998      	ldr	r1, [pc, #608]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002db4:	4b96      	ldr	r3, [pc, #600]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a95      	ldr	r2, [pc, #596]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002dba:	f043 0310 	orr.w	r3, r3, #16
 8002dbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002dc0:	f7fd fd5e 	bl	8000880 <HAL_GetTick>
 8002dc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002dc8:	f7fd fd5a 	bl	8000880 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e18b      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002dda:	4b8d      	ldr	r3, [pc, #564]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xa80>
 8002de6:	e018      	b.n	8002e1a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002de8:	4b89      	ldr	r3, [pc, #548]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a88      	ldr	r2, [pc, #544]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002dee:	f023 0310 	bic.w	r3, r3, #16
 8002df2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002df4:	f7fd fd44 	bl	8000880 <HAL_GetTick>
 8002df8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002dfc:	f7fd fd40 	bl	8000880 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e171      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002e0e:	4b80      	ldr	r3, [pc, #512]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8166 	beq.w	80030f0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2a:	4b79      	ldr	r3, [pc, #484]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b0c      	cmp	r3, #12
 8002e34:	f000 80f2 	beq.w	800301c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f040 80c5 	bne.w	8002fcc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b73      	ldr	r3, [pc, #460]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a72      	ldr	r2, [pc, #456]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002e4e:	f7fd fd17 	bl	8000880 <HAL_GetTick>
 8002e52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e56:	f7fd fd13 	bl	8000880 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e144      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e68:	4b69      	ldr	r3, [pc, #420]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e74:	4b66      	ldr	r3, [pc, #408]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d111      	bne.n	8002ea6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b63      	ldr	r3, [pc, #396]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e88:	4a61      	ldr	r2, [pc, #388]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e92:	4b5f      	ldr	r3, [pc, #380]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8003014 <HAL_RCC_OscConfig+0xccc>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002eba:	4b56      	ldr	r3, [pc, #344]	@ (8003014 <HAL_RCC_OscConfig+0xccc>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a55      	ldr	r2, [pc, #340]	@ (8003014 <HAL_RCC_OscConfig+0xccc>)
 8002ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ec4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002ec6:	4b52      	ldr	r3, [pc, #328]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002eda:	3a01      	subs	r2, #1
 8002edc:	0212      	lsls	r2, r2, #8
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	494a      	ldr	r1, [pc, #296]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	628b      	str	r3, [r1, #40]	@ 0x28
 8002eec:	4b48      	ldr	r3, [pc, #288]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ef0:	4b49      	ldr	r3, [pc, #292]	@ (8003018 <HAL_RCC_OscConfig+0xcd0>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f02:	3a01      	subs	r2, #1
 8002f04:	0252      	lsls	r2, r2, #9
 8002f06:	b292      	uxth	r2, r2
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f0e:	3a01      	subs	r2, #1
 8002f10:	0412      	lsls	r2, r2, #16
 8002f12:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002f16:	4311      	orrs	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002f1c:	3a01      	subs	r2, #1
 8002f1e:	0612      	lsls	r2, r2, #24
 8002f20:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002f24:	430a      	orrs	r2, r1
 8002f26:	493a      	ldr	r1, [pc, #232]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002f2c:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	4a37      	ldr	r2, [pc, #220]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f32:	f023 0310 	bic.w	r3, r3, #16
 8002f36:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	4a34      	ldr	r2, [pc, #208]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002f42:	4b33      	ldr	r3, [pc, #204]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	4a32      	ldr	r2, [pc, #200]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002f4e:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	f023 020c 	bic.w	r2, r3, #12
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f5a:	492d      	ldr	r1, [pc, #180]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002f60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d105      	bne.n	8002f74 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002f68:	4b2a      	ldr	r3, [pc, #168]	@ (8003014 <HAL_RCC_OscConfig+0xccc>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a29      	ldr	r2, [pc, #164]	@ (8003014 <HAL_RCC_OscConfig+0xccc>)
 8002f6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f72:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002f74:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002f7c:	4b24      	ldr	r3, [pc, #144]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f82:	4a23      	ldr	r2, [pc, #140]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002f8c:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002f92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f98:	f7fd fc72 	bl	8000880 <HAL_GetTick>
 8002f9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa0:	f7fd fc6e 	bl	8000880 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e09f      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002fb2:	4b17      	ldr	r3, [pc, #92]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fbe:	4b14      	ldr	r3, [pc, #80]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc2:	4a13      	ldr	r2, [pc, #76]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002fc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fc8:	6293      	str	r3, [r2, #40]	@ 0x28
 8002fca:	e091      	b.n	80030f0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002fcc:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0f      	ldr	r2, [pc, #60]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002fd8:	f7fd fc52 	bl	8000880 <HAL_GetTick>
 8002fdc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fd fc4e 	bl	8000880 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e07f      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ff2:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002ffe:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	4a03      	ldr	r2, [pc, #12]	@ (8003010 <HAL_RCC_OscConfig+0xcc8>)
 8003004:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003008:	f023 0303 	bic.w	r3, r3, #3
 800300c:	6293      	str	r3, [r2, #40]	@ 0x28
 800300e:	e06f      	b.n	80030f0 <HAL_RCC_OscConfig+0xda8>
 8003010:	46020c00 	.word	0x46020c00
 8003014:	46020800 	.word	0x46020800
 8003018:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800301c:	4b37      	ldr	r3, [pc, #220]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003022:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 8003024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003026:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800302c:	2b01      	cmp	r3, #1
 800302e:	d039      	beq.n	80030a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303a:	429a      	cmp	r2, r3
 800303c:	d132      	bne.n	80030a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d129      	bne.n	80030a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d122      	bne.n	80030a4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003068:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11a      	bne.n	80030a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	0a5b      	lsrs	r3, r3, #9
 8003072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	0c1b      	lsrs	r3, r3, #16
 8003084:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800308c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800308e:	429a      	cmp	r2, r3
 8003090:	d108      	bne.n	80030a4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	0e1b      	lsrs	r3, r3, #24
 8003096:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e024      	b.n	80030f2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030a8:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 80030aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d01a      	beq.n	80030f0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80030ba:	4b10      	ldr	r3, [pc, #64]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	4a0f      	ldr	r2, [pc, #60]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 80030c0:	f023 0310 	bic.w	r3, r3, #16
 80030c4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fd fbdb 	bl	8000880 <HAL_GetTick>
 80030ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80030cc:	bf00      	nop
 80030ce:	f7fd fbd7 	bl	8000880 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d0f9      	beq.n	80030ce <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	4a07      	ldr	r2, [pc, #28]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80030e4:	4b05      	ldr	r3, [pc, #20]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 80030e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e8:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <HAL_RCC_OscConfig+0xdb4>)
 80030ea:	f043 0310 	orr.w	r3, r3, #16
 80030ee:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3738      	adds	r7, #56	@ 0x38
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	46020c00 	.word	0x46020c00

08003100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e1d9      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003114:	4b9b      	ldr	r3, [pc, #620]	@ (8003384 <HAL_RCC_ClockConfig+0x284>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 030f 	and.w	r3, r3, #15
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d910      	bls.n	8003144 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003122:	4b98      	ldr	r3, [pc, #608]	@ (8003384 <HAL_RCC_ClockConfig+0x284>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f023 020f 	bic.w	r2, r3, #15
 800312a:	4996      	ldr	r1, [pc, #600]	@ (8003384 <HAL_RCC_ClockConfig+0x284>)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b94      	ldr	r3, [pc, #592]	@ (8003384 <HAL_RCC_ClockConfig+0x284>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e1c1      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	4b8c      	ldr	r3, [pc, #560]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003158:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800315c:	429a      	cmp	r2, r3
 800315e:	d908      	bls.n	8003172 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003160:	4b89      	ldr	r3, [pc, #548]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003164:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	4986      	ldr	r1, [pc, #536]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 800316e:	4313      	orrs	r3, r2
 8003170:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	4b81      	ldr	r3, [pc, #516]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800318c:	429a      	cmp	r2, r3
 800318e:	d909      	bls.n	80031a4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003190:	4b7d      	ldr	r3, [pc, #500]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	497a      	ldr	r1, [pc, #488]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d010      	beq.n	80031d2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68da      	ldr	r2, [r3, #12]
 80031b4:	4b74      	ldr	r3, [pc, #464]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031bc:	429a      	cmp	r2, r3
 80031be:	d908      	bls.n	80031d2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b71      	ldr	r3, [pc, #452]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	496e      	ldr	r1, [pc, #440]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d010      	beq.n	8003200 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b69      	ldr	r3, [pc, #420]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d908      	bls.n	8003200 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80031ee:	4b66      	ldr	r3, [pc, #408]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	f023 020f 	bic.w	r2, r3, #15
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4963      	ldr	r1, [pc, #396]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80d2 	beq.w	80033b2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d143      	bne.n	80032a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800321a:	4b5b      	ldr	r3, [pc, #364]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d110      	bne.n	800324a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b57      	ldr	r3, [pc, #348]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322e:	4a56      	ldr	r2, [pc, #344]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003230:	f043 0304 	orr.w	r3, r3, #4
 8003234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003238:	4b53      	ldr	r3, [pc, #332]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 800323a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800324a:	f7fd fb19 	bl	8000880 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003250:	4b4e      	ldr	r3, [pc, #312]	@ (800338c <HAL_RCC_ClockConfig+0x28c>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00f      	beq.n	800327c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800325c:	e008      	b.n	8003270 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800325e:	f7fd fb0f 	bl	8000880 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e12b      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003270:	4b46      	ldr	r3, [pc, #280]	@ (800338c <HAL_RCC_ClockConfig+0x28c>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800327c:	7dfb      	ldrb	r3, [r7, #23]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003282:	4b41      	ldr	r3, [pc, #260]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003284:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003288:	4a3f      	ldr	r2, [pc, #252]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 800328a:	f023 0304 	bic.w	r3, r3, #4
 800328e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003292:	4b3d      	ldr	r3, [pc, #244]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d121      	bne.n	80032e2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e112      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032aa:	4b37      	ldr	r3, [pc, #220]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d115      	bne.n	80032e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e106      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80032c2:	4b31      	ldr	r3, [pc, #196]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e0fa      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0f2      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80032e2:	4b29      	ldr	r3, [pc, #164]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	4926      	ldr	r1, [pc, #152]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80032f4:	f7fd fac4 	bl	8000880 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d112      	bne.n	8003328 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fd fabc 	bl	8000880 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e0d6      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800331a:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d1ee      	bne.n	8003304 <HAL_RCC_ClockConfig+0x204>
 8003326:	e044      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d112      	bne.n	8003356 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003330:	e00a      	b.n	8003348 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003332:	f7fd faa5 	bl	8000880 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0bf      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d1ee      	bne.n	8003332 <HAL_RCC_ClockConfig+0x232>
 8003354:	e02d      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d123      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fd fa8e 	bl	8000880 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e0a8      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003376:	4b04      	ldr	r3, [pc, #16]	@ (8003388 <HAL_RCC_ClockConfig+0x288>)
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1ee      	bne.n	8003360 <HAL_RCC_ClockConfig+0x260>
 8003382:	e016      	b.n	80033b2 <HAL_RCC_ClockConfig+0x2b2>
 8003384:	40022000 	.word	0x40022000
 8003388:	46020c00 	.word	0x46020c00
 800338c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fd fa76 	bl	8000880 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e090      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033a6:	4b4a      	ldr	r3, [pc, #296]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d1ee      	bne.n	8003390 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d010      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b43      	ldr	r3, [pc, #268]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d208      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80033ce:	4b40      	ldr	r3, [pc, #256]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f023 020f 	bic.w	r2, r3, #15
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	493d      	ldr	r1, [pc, #244]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b3c      	ldr	r3, [pc, #240]	@ (80034d4 <HAL_RCC_ClockConfig+0x3d4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d210      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b39      	ldr	r3, [pc, #228]	@ (80034d4 <HAL_RCC_ClockConfig+0x3d4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 020f 	bic.w	r2, r3, #15
 80033f6:	4937      	ldr	r1, [pc, #220]	@ (80034d4 <HAL_RCC_ClockConfig+0x3d4>)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033fe:	4b35      	ldr	r3, [pc, #212]	@ (80034d4 <HAL_RCC_ClockConfig+0x3d4>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e05b      	b.n	80034c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003428:	429a      	cmp	r2, r3
 800342a:	d208      	bcs.n	800343e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800342c:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4925      	ldr	r1, [pc, #148]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d012      	beq.n	8003470 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691a      	ldr	r2, [r3, #16]
 800344e:	4b20      	ldr	r3, [pc, #128]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003458:	429a      	cmp	r2, r3
 800345a:	d209      	bcs.n	8003470 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800345c:	4b1c      	ldr	r3, [pc, #112]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4919      	ldr	r1, [pc, #100]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 800346c:	4313      	orrs	r3, r2
 800346e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695a      	ldr	r2, [r3, #20]
 8003480:	4b13      	ldr	r3, [pc, #76]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003488:	429a      	cmp	r2, r3
 800348a:	d208      	bcs.n	800349e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800348c:	4b10      	ldr	r3, [pc, #64]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	490d      	ldr	r1, [pc, #52]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 800349a:	4313      	orrs	r3, r2
 800349c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800349e:	f000 f821 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b0a      	ldr	r3, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x3d0>)
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f003 030f 	and.w	r3, r3, #15
 80034ac:	490a      	ldr	r1, [pc, #40]	@ (80034d8 <HAL_RCC_ClockConfig+0x3d8>)
 80034ae:	5ccb      	ldrb	r3, [r1, r3]
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	4a09      	ldr	r2, [pc, #36]	@ (80034dc <HAL_RCC_ClockConfig+0x3dc>)
 80034b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034b8:	4b09      	ldr	r3, [pc, #36]	@ (80034e0 <HAL_RCC_ClockConfig+0x3e0>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd f955 	bl	800076c <HAL_InitTick>
 80034c2:	4603      	mov	r3, r0
 80034c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	46020c00 	.word	0x46020c00
 80034d4:	40022000 	.word	0x40022000
 80034d8:	08008864 	.word	0x08008864
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004

080034e4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b08b      	sub	sp, #44	@ 0x2c
 80034e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f2:	4b78      	ldr	r3, [pc, #480]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034fc:	4b75      	ldr	r3, [pc, #468]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x34>
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b0c      	cmp	r3, #12
 8003510:	d121      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d11e      	bne.n	8003556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8003518:	4b6e      	ldr	r3, [pc, #440]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8003524:	4b6b      	ldr	r3, [pc, #428]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800352a:	0b1b      	lsrs	r3, r3, #12
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
 8003532:	e005      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8003534:	4b67      	ldr	r3, [pc, #412]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	0f1b      	lsrs	r3, r3, #28
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003540:	4a65      	ldr	r2, [pc, #404]	@ (80036d8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d110      	bne.n	8003572 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003554:	e00d      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003556:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d102      	bne.n	8003568 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003562:	4b5e      	ldr	r3, [pc, #376]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003564:	623b      	str	r3, [r7, #32]
 8003566:	e004      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b08      	cmp	r3, #8
 800356c:	d101      	bne.n	8003572 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800356e:	4b5b      	ldr	r3, [pc, #364]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003570:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b0c      	cmp	r3, #12
 8003576:	f040 80a5 	bne.w	80036c4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800357a:	4b56      	ldr	r3, [pc, #344]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800357c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003584:	4b53      	ldr	r3, [pc, #332]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	3301      	adds	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003592:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800359e:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a2:	08db      	lsrs	r3, r3, #3
 80035a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d003      	beq.n	80035c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d022      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x128>
 80035c6:	e043      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80035d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035da:	4b3e      	ldr	r3, [pc, #248]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80035ee:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80036e4 <HAL_RCC_GetSysClockFreq+0x200>
 80035f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800360a:	e046      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	ee07 3a90 	vmov	s15, r3
 8003612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003616:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80036e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800361a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361e:	4b2d      	ldr	r3, [pc, #180]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800362e:	ed97 6a01 	vldr	s12, [r7, #4]
 8003632:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80036e4 <HAL_RCC_GetSysClockFreq+0x200>
 8003636:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800363a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800363e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003642:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364e:	e024      	b.n	800369a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003668:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800366a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800366c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003678:	ed97 6a01 	vldr	s12, [r7, #4]
 800367c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80036e4 <HAL_RCC_GetSysClockFreq+0x200>
 8003680:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003684:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003688:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800368c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003698:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800369a:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800369c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800369e:	0e1b      	lsrs	r3, r3, #24
 80036a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036a4:	3301      	adds	r3, #1
 80036a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80036b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036be:	ee17 3a90 	vmov	r3, s15
 80036c2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	372c      	adds	r7, #44	@ 0x2c
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	46020c00 	.word	0x46020c00
 80036d8:	08008874 	.word	0x08008874
 80036dc:	00f42400 	.word	0x00f42400
 80036e0:	4b742400 	.word	0x4b742400
 80036e4:	46000000 	.word	0x46000000

080036e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80036ec:	f7ff fefa 	bl	80034e4 <HAL_RCC_GetSysClockFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b07      	ldr	r3, [pc, #28]	@ (8003710 <HAL_RCC_GetHCLKFreq+0x28>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	4906      	ldr	r1, [pc, #24]	@ (8003714 <HAL_RCC_GetHCLKFreq+0x2c>)
 80036fc:	5ccb      	ldrb	r3, [r1, r3]
 80036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003702:	4a05      	ldr	r2, [pc, #20]	@ (8003718 <HAL_RCC_GetHCLKFreq+0x30>)
 8003704:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003706:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <HAL_RCC_GetHCLKFreq+0x30>)
 8003708:	681b      	ldr	r3, [r3, #0]
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	46020c00 	.word	0x46020c00
 8003714:	08008864 	.word	0x08008864
 8003718:	20000000 	.word	0x20000000

0800371c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003724:	4b3e      	ldr	r3, [pc, #248]	@ (8003820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003732:	f7fe fdcd 	bl	80022d0 <HAL_PWREx_GetVoltageRange>
 8003736:	6178      	str	r0, [r7, #20]
 8003738:	e019      	b.n	800376e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800373a:	4b39      	ldr	r3, [pc, #228]	@ (8003820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800373c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003740:	4a37      	ldr	r2, [pc, #220]	@ (8003820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003742:	f043 0304 	orr.w	r3, r3, #4
 8003746:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800374a:	4b35      	ldr	r3, [pc, #212]	@ (8003820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800374c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003758:	f7fe fdba 	bl	80022d0 <HAL_PWREx_GetVoltageRange>
 800375c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003760:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003764:	4a2e      	ldr	r2, [pc, #184]	@ (8003820 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003766:	f023 0304 	bic.w	r3, r3, #4
 800376a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003774:	d003      	beq.n	800377e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800377c:	d109      	bne.n	8003792 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003784:	d202      	bcs.n	800378c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003786:	2301      	movs	r3, #1
 8003788:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800378a:	e033      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003790:	e030      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003798:	d208      	bcs.n	80037ac <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a0:	d102      	bne.n	80037a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80037a2:	2303      	movs	r3, #3
 80037a4:	613b      	str	r3, [r7, #16]
 80037a6:	e025      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e035      	b.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b2:	d90f      	bls.n	80037d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037c0:	d902      	bls.n	80037c8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	e015      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80037c8:	2301      	movs	r3, #1
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	e012      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	e00f      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037da:	d109      	bne.n	80037f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e2:	d102      	bne.n	80037ea <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80037e4:	2301      	movs	r3, #1
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	e004      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80037ea:	2302      	movs	r3, #2
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e001      	b.n	80037f4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80037f0:	2301      	movs	r3, #1
 80037f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f023 020f 	bic.w	r2, r3, #15
 80037fc:	4909      	ldr	r1, [pc, #36]	@ (8003824 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003804:	4b07      	ldr	r3, [pc, #28]	@ (8003824 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	429a      	cmp	r2, r3
 8003810:	d001      	beq.n	8003816 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	46020c00 	.word	0x46020c00
 8003824:	40022000 	.word	0x40022000

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b0c2      	sub	sp, #264	@ 0x108
 800382e:	af00      	add	r7, sp, #0
 8003830:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003834:	2300      	movs	r3, #0
 8003836:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800383a:	2300      	movs	r3, #0
 800383c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	f002 0401 	and.w	r4, r2, #1
 800384c:	2500      	movs	r5, #0
 800384e:	ea54 0305 	orrs.w	r3, r4, r5
 8003852:	d00b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003854:	4bd5      	ldr	r3, [pc, #852]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003856:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800385a:	f023 0103 	bic.w	r1, r3, #3
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003864:	4ad1      	ldr	r2, [pc, #836]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003866:	430b      	orrs	r3, r1
 8003868:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800386c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f002 0802 	and.w	r8, r2, #2
 8003878:	f04f 0900 	mov.w	r9, #0
 800387c:	ea58 0309 	orrs.w	r3, r8, r9
 8003880:	d00b      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003882:	4bca      	ldr	r3, [pc, #808]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003888:	f023 010c 	bic.w	r1, r3, #12
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003892:	4ac6      	ldr	r2, [pc, #792]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003894:	430b      	orrs	r3, r1
 8003896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800389a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f002 0a04 	and.w	sl, r2, #4
 80038a6:	f04f 0b00 	mov.w	fp, #0
 80038aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80038ae:	d00b      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80038b0:	4bbe      	ldr	r3, [pc, #760]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038b6:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c0:	4aba      	ldr	r2, [pc, #744]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f002 0308 	and.w	r3, r2, #8
 80038d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80038de:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	d00b      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80038e8:	4bb0      	ldr	r3, [pc, #704]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	4aac      	ldr	r2, [pc, #688]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f002 0310 	and.w	r3, r2, #16
 800390c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003916:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d00b      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003920:	4ba2      	ldr	r3, [pc, #648]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003926:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003930:	4a9e      	ldr	r2, [pc, #632]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003932:	430b      	orrs	r3, r1
 8003934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800394e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003952:	460b      	mov	r3, r1
 8003954:	4313      	orrs	r3, r2
 8003956:	d00b      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003958:	4b94      	ldr	r3, [pc, #592]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800395a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800395e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003968:	4a90      	ldr	r2, [pc, #576]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800396a:	430b      	orrs	r3, r1
 800396c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f002 0320 	and.w	r3, r2, #32
 800397c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003986:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800398a:	460b      	mov	r3, r1
 800398c:	4313      	orrs	r3, r2
 800398e:	d00b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003990:	4b86      	ldr	r3, [pc, #536]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003992:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003996:	f023 0107 	bic.w	r1, r3, #7
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800399e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039a0:	4a82      	ldr	r2, [pc, #520]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039a2:	430b      	orrs	r3, r1
 80039a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80039b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039b8:	2300      	movs	r3, #0
 80039ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039c2:	460b      	mov	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80039c8:	4b78      	ldr	r3, [pc, #480]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ce:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d8:	4a74      	ldr	r2, [pc, #464]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80039ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039f6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4313      	orrs	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003a00:	4b6a      	ldr	r3, [pc, #424]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a10:	4a66      	ldr	r2, [pc, #408]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8003a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d00b      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003a38:	4b5c      	ldr	r3, [pc, #368]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a48:	4a58      	ldr	r2, [pc, #352]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a58:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003a70:	4b4e      	ldr	r3, [pc, #312]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a76:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a80:	4a4a      	ldr	r2, [pc, #296]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a9e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d00b      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003aa8:	4b40      	ldr	r3, [pc, #256]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003aaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003aae:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003acc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ad6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d00c      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003ae0:	4b32      	ldr	r3, [pc, #200]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ae2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003ae6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af2:	4a2e      	ldr	r2, [pc, #184]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003af4:	430b      	orrs	r3, r1
 8003af6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003b06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b10:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003b14:	460b      	mov	r3, r1
 8003b16:	4313      	orrs	r3, r2
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003b1a:	4b24      	ldr	r3, [pc, #144]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b20:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b2e:	430b      	orrs	r3, r1
 8003b30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d00c      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003b54:	4b15      	ldr	r3, [pc, #84]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b5a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b66:	4a11      	ldr	r2, [pc, #68]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b84:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	d010      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003b8e:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba0:	4a02      	ldr	r2, [pc, #8]	@ (8003bac <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003baa:	bf00      	nop
 8003bac:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bc6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	d04c      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bd8:	2b80      	cmp	r3, #128	@ 0x80
 8003bda:	d02d      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003bdc:	2b80      	cmp	r3, #128	@ 0x80
 8003bde:	d827      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003be0:	2b60      	cmp	r3, #96	@ 0x60
 8003be2:	d02b      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003be4:	2b60      	cmp	r3, #96	@ 0x60
 8003be6:	d823      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003be8:	2b40      	cmp	r3, #64	@ 0x40
 8003bea:	d006      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d81f      	bhi.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d009      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bf4:	2b20      	cmp	r3, #32
 8003bf6:	d011      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003bf8:	e01a      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bfa:	4bbd      	ldr	r3, [pc, #756]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	4abc      	ldr	r2, [pc, #752]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c04:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c06:	e01a      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fca8 	bl	8004564 <RCCEx_PLL2_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c1a:	e010      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	332c      	adds	r3, #44	@ 0x2c
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fd36 	bl	8004694 <RCCEx_PLL3_Config>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003c2e:	e006      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003c36:	e002      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003c38:	bf00      	nop
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10d      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003c46:	4baa      	ldr	r3, [pc, #680]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c4c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c58:	4aa5      	ldr	r2, [pc, #660]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c60:	e003      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c62:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003c66:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c78:	2300      	movs	r3, #0
 8003c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c80:	460b      	mov	r3, r1
 8003c82:	4313      	orrs	r3, r2
 8003c84:	d053      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c92:	d033      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d82c      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c9e:	d02f      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003ca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ca4:	d826      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003ca6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003caa:	d008      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb0:	d820      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cba:	d011      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8003cbc:	e01a      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003cbe:	4b8c      	ldr	r3, [pc, #560]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	4a8b      	ldr	r2, [pc, #556]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003cca:	e01a      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fc46 	bl	8004564 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003cde:	e010      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	332c      	adds	r3, #44	@ 0x2c
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fcd4 	bl	8004694 <RCCEx_PLL3_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003cf2:	e006      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003cfa:	e002      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003d0a:	4b79      	ldr	r3, [pc, #484]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003d10:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003d1c:	4a74      	ldr	r2, [pc, #464]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d26:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003d2a:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d44:	460b      	mov	r3, r1
 8003d46:	4313      	orrs	r3, r2
 8003d48:	d046      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d52:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003d56:	d028      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d58:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003d5c:	d821      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d62:	d022      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d68:	d81b      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d6e:	d01c      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d74:	d815      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d80:	d80f      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d011      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8a:	d00e      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d8c:	e009      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d92:	3308      	adds	r3, #8
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fbe5 	bl	8004564 <RCCEx_PLL2_Config>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003da0:	e004      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003da8:	e000      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 8003daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dac:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003db4:	4b4e      	ldr	r3, [pc, #312]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003dba:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003dce:	e003      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003dd4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003de6:	2300      	movs	r3, #0
 8003de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	d03f      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d81e      	bhi.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x616>
 8003e00:	a201      	add	r2, pc, #4	@ (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08003e47 	.word	0x08003e47
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e2b 	.word	0x08003e2b
 8003e14:	08003e47 	.word	0x08003e47
 8003e18:	08003e47 	.word	0x08003e47
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e1c:	4b34      	ldr	r3, [pc, #208]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	4a33      	ldr	r2, [pc, #204]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e26:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003e28:	e00e      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2e:	332c      	adds	r3, #44	@ 0x2c
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 fc2f 	bl	8004694 <RCCEx_PLL3_Config>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e3c:	e004      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 8003e46:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e48:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10d      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003e50:	4b27      	ldr	r3, [pc, #156]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e56:	f023 0107 	bic.w	r1, r3, #7
 8003e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e62:	4a23      	ldr	r2, [pc, #140]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e6a:	e003      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003e70:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e82:	2300      	movs	r3, #0
 8003e84:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e86:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	d04c      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e9c:	d02a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003e9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ea2:	d821      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003ea4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ea8:	d026      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8003eaa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003eae:	d81b      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003eb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eba:	d815      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01d      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ec4:	d110      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eca:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003ed2:	e014      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	332c      	adds	r3, #44	@ 0x2c
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fbda 	bl	8004694 <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003eee:	e006      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003ef0:	46020c00 	.word	0x46020c00
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003efc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003efe:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003f06:	4baf      	ldr	r3, [pc, #700]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f18:	4aaa      	ldr	r2, [pc, #680]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003f20:	e003      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f22:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003f26:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f38:	2300      	movs	r3, #0
 8003f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f3c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003f40:	460b      	mov	r3, r1
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f000 80b5 	beq.w	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4e:	4b9d      	ldr	r3, [pc, #628]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d113      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b99      	ldr	r3, [pc, #612]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f62:	4a98      	ldr	r2, [pc, #608]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f64:	f043 0304 	orr.w	r3, r3, #4
 8003f68:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003f6c:	4b95      	ldr	r3, [pc, #596]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003f84:	4b90      	ldr	r3, [pc, #576]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f88:	4a8f      	ldr	r2, [pc, #572]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f90:	f7fc fc76 	bl	8000880 <HAL_GetTick>
 8003f94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f98:	e00b      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9a:	f7fc fc71 	bl	8000880 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d903      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003fb0:	e005      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003fb2:	4b85      	ldr	r3, [pc, #532]	@ (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0ed      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 8003fbe:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d165      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d023      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d01b      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fec:	4b75      	ldr	r3, [pc, #468]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ff6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ffa:	4b72      	ldr	r3, [pc, #456]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004000:	4a70      	ldr	r2, [pc, #448]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004002:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004006:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800400a:	4b6e      	ldr	r3, [pc, #440]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800400c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004010:	4a6c      	ldr	r2, [pc, #432]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004016:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800401a:	4a6a      	ldr	r2, [pc, #424]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800401c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004020:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fc fc26 	bl	8000880 <HAL_GetTick>
 8004034:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004038:	e00d      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fc fc21 	bl	8000880 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004044:	1ad2      	subs	r2, r2, r3
 8004046:	f241 3388 	movw	r3, #5000	@ 0x1388
 800404a:	429a      	cmp	r2, r3
 800404c:	d903      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004056:	4b5b      	ldr	r3, [pc, #364]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ea      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 8004064:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800406c:	4b55      	ldr	r3, [pc, #340]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800406e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004072:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800407e:	4a51      	ldr	r2, [pc, #324]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004080:	430b      	orrs	r3, r1
 8004082:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004086:	e008      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004088:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800408c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004096:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800409a:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d107      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a2:	4b48      	ldr	r3, [pc, #288]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a8:	4a46      	ldr	r2, [pc, #280]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040aa:	f023 0304 	bic.w	r3, r3, #4
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80040be:	653b      	str	r3, [r7, #80]	@ 0x50
 80040c0:	2300      	movs	r3, #0
 80040c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d042      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80040ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80040da:	d022      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 80040dc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80040e0:	d81b      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80040e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040e6:	d011      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 80040e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040ec:	d815      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d019      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 80040f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040f6:	d110      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	3308      	adds	r3, #8
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fa30 	bl	8004564 <RCCEx_PLL2_Config>
 8004104:	4603      	mov	r3, r0
 8004106:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800410a:	e00d      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410c:	4b2d      	ldr	r3, [pc, #180]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	4a2c      	ldr	r2, [pc, #176]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004116:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 8004126:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004128:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10d      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004130:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004136:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004142:	4a20      	ldr	r2, [pc, #128]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004144:	430b      	orrs	r3, r1
 8004146:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800414a:	e003      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004150:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004162:	2300      	movs	r3, #0
 8004164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004166:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d031      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800417c:	d00b      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004182:	d804      	bhi.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d008      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418c:	d007      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004194:	e004      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8004196:	bf00      	nop
 8004198:	e002      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800419a:	bf00      	nop
 800419c:	e000      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800419e:	bf00      	nop
    }
    if (ret == HAL_OK)
 80041a0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d111      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80041a8:	4b06      	ldr	r3, [pc, #24]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80041aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041ba:	4a02      	ldr	r2, [pc, #8]	@ (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80041c2:	e007      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 80041c4:	46020c00 	.word	0x46020c00
 80041c8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041cc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80041d0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041e2:	2300      	movs	r3, #0
 80041e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80041ea:	460b      	mov	r3, r1
 80041ec:	4313      	orrs	r3, r2
 80041ee:	d019      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041fc:	d105      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041fe:	4ba1      	ldr	r3, [pc, #644]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004202:	4aa0      	ldr	r2, [pc, #640]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004208:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800420a:	4b9e      	ldr	r3, [pc, #632]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800420c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004210:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004218:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800421c:	4a99      	ldr	r2, [pc, #612]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800421e:	430b      	orrs	r3, r1
 8004220:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004230:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004232:	2300      	movs	r3, #0
 8004234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004236:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800423a:	460b      	mov	r3, r1
 800423c:	4313      	orrs	r3, r2
 800423e:	d00c      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004240:	4b90      	ldr	r3, [pc, #576]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004246:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004252:	4a8c      	ldr	r2, [pc, #560]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004254:	430b      	orrs	r3, r1
 8004256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004266:	633b      	str	r3, [r7, #48]	@ 0x30
 8004268:	2300      	movs	r3, #0
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
 800426c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d00c      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004276:	4b83      	ldr	r3, [pc, #524]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800427c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004284:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004288:	4a7e      	ldr	r2, [pc, #504]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800428a:	430b      	orrs	r3, r1
 800428c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800429c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800429e:	2300      	movs	r3, #0
 80042a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042a2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80042ac:	4b75      	ldr	r3, [pc, #468]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042b2:	f023 0218 	bic.w	r2, r3, #24
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80042be:	4971      	ldr	r1, [pc, #452]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80042d2:	623b      	str	r3, [r7, #32]
 80042d4:	2300      	movs	r3, #0
 80042d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d032      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80042e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f0:	4b64      	ldr	r3, [pc, #400]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	4a63      	ldr	r2, [pc, #396]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042fa:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004304:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004308:	d108      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800430a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430e:	3308      	adds	r3, #8
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f927 	bl	8004564 <RCCEx_PLL2_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 800431c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10d      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004324:	4b57      	ldr	r3, [pc, #348]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004326:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800432a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800432e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004332:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004336:	4953      	ldr	r1, [pc, #332]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 800433e:	e003      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004344:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	2100      	movs	r1, #0
 8004352:	61b9      	str	r1, [r7, #24]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d04a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800436c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004370:	d01e      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004372:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004376:	d825      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800437c:	d00e      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800437e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004382:	d81f      	bhi.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004384:	2b00      	cmp	r3, #0
 8004386:	d021      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800438c:	d11a      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800438e:	4b3d      	ldr	r3, [pc, #244]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	4a3c      	ldr	r2, [pc, #240]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004394:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004398:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800439a:	e018      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	3308      	adds	r3, #8
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f8de 	bl	8004564 <RCCEx_PLL2_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80043ae:	e00e      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b4:	332c      	adds	r3, #44	@ 0x2c
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 f96c 	bl	8004694 <RCCEx_PLL3_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 80043c2:	e004      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 80043cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ce:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10d      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 80043d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80043d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80043dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80043e8:	4926      	ldr	r1, [pc, #152]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80043f0:	e003      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80043f6:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]
 800440c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d03c      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004422:	d00e      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004428:	d815      	bhi.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d017      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xc36>
 800442e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004432:	d110      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004434:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004438:	4a12      	ldr	r2, [pc, #72]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800443a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004440:	e00e      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004446:	3308      	adds	r3, #8
 8004448:	4618      	mov	r0, r3
 800444a:	f000 f88b 	bl	8004564 <RCCEx_PLL2_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004454:	e004      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 800445e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004460:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10f      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004468:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800446a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800446e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	4902      	ldr	r1, [pc, #8]	@ (8004484 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004482:	e005      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004484:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004488:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800448c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004498:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80044a6:	460b      	mov	r3, r1
 80044a8:	4313      	orrs	r3, r2
 80044aa:	d00c      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80044ac:	4b2c      	ldr	r3, [pc, #176]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044b2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044be:	4928      	ldr	r1, [pc, #160]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	2100      	movs	r1, #0
 80044d0:	6039      	str	r1, [r7, #0]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d036      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80044ea:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80044ee:	d00d      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80044f0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80044f4:	d811      	bhi.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 80044f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044fa:	d012      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 80044fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004500:	d80b      	bhi.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00d      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8004506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450a:	d106      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800450c:	4b14      	ldr	r3, [pc, #80]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	4a13      	ldr	r2, [pc, #76]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004516:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 8004518:	e004      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 8004522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004524:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800452e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004532:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800453e:	4908      	ldr	r1, [pc, #32]	@ (8004560 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004546:	e003      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004548:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800454c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8004550:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 8004554:	4618      	mov	r0, r3
 8004556:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800455a:	46bd      	mov	sp, r7
 800455c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004560:	46020c00 	.word	0x46020c00

08004564 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800456c:	4b47      	ldr	r3, [pc, #284]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a46      	ldr	r2, [pc, #280]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004572:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004576:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004578:	f7fc f982 	bl	8000880 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800457e:	e008      	b.n	8004592 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004580:	f7fc f97e 	bl	8000880 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e077      	b.n	8004682 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004592:	4b3e      	ldr	r3, [pc, #248]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800459e:	4b3b      	ldr	r3, [pc, #236]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80045a6:	f023 0303 	bic.w	r3, r3, #3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6811      	ldr	r1, [r2, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6852      	ldr	r2, [r2, #4]
 80045b2:	3a01      	subs	r2, #1
 80045b4:	0212      	lsls	r2, r2, #8
 80045b6:	430a      	orrs	r2, r1
 80045b8:	4934      	ldr	r1, [pc, #208]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80045be:	4b33      	ldr	r3, [pc, #204]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 80045c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80045c2:	4b33      	ldr	r3, [pc, #204]	@ (8004690 <RCCEx_PLL2_Config+0x12c>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6892      	ldr	r2, [r2, #8]
 80045ca:	3a01      	subs	r2, #1
 80045cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	68d2      	ldr	r2, [r2, #12]
 80045d4:	3a01      	subs	r2, #1
 80045d6:	0252      	lsls	r2, r2, #9
 80045d8:	b292      	uxth	r2, r2
 80045da:	4311      	orrs	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6912      	ldr	r2, [r2, #16]
 80045e0:	3a01      	subs	r2, #1
 80045e2:	0412      	lsls	r2, r2, #16
 80045e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80045e8:	4311      	orrs	r1, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6952      	ldr	r2, [r2, #20]
 80045ee:	3a01      	subs	r2, #1
 80045f0:	0612      	lsls	r2, r2, #24
 80045f2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80045f6:	430a      	orrs	r2, r1
 80045f8:	4924      	ldr	r1, [pc, #144]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80045fe:	4b23      	ldr	r3, [pc, #140]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	f023 020c 	bic.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	4920      	ldr	r1, [pc, #128]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 800460c:	4313      	orrs	r3, r2
 800460e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004610:	4b1e      	ldr	r3, [pc, #120]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	491c      	ldr	r1, [pc, #112]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 800461a:	4313      	orrs	r3, r2
 800461c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800461e:	4b1b      	ldr	r3, [pc, #108]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004622:	4a1a      	ldr	r2, [pc, #104]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004624:	f023 0310 	bic.w	r3, r3, #16
 8004628:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800462a:	4b18      	ldr	r3, [pc, #96]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004632:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	69d2      	ldr	r2, [r2, #28]
 800463a:	00d2      	lsls	r2, r2, #3
 800463c:	4913      	ldr	r1, [pc, #76]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 800463e:	4313      	orrs	r3, r2
 8004640:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004642:	4b12      	ldr	r3, [pc, #72]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004646:	4a11      	ldr	r2, [pc, #68]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004648:	f043 0310 	orr.w	r3, r3, #16
 800464c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800464e:	4b0f      	ldr	r3, [pc, #60]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a0e      	ldr	r2, [pc, #56]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004654:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004658:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800465a:	f7fc f911 	bl	8000880 <HAL_GetTick>
 800465e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004660:	e008      	b.n	8004674 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004662:	f7fc f90d 	bl	8000880 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e006      	b.n	8004682 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <RCCEx_PLL2_Config+0x128>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004680:	2300      	movs	r3, #0

}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	46020c00 	.word	0x46020c00
 8004690:	80800000 	.word	0x80800000

08004694 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800469c:	4b47      	ldr	r3, [pc, #284]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a46      	ldr	r2, [pc, #280]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80046a8:	f7fc f8ea 	bl	8000880 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046ae:	e008      	b.n	80046c2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80046b0:	f7fc f8e6 	bl	8000880 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e077      	b.n	80047b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046c2:	4b3e      	ldr	r3, [pc, #248]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80046ce:	4b3b      	ldr	r3, [pc, #236]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6811      	ldr	r1, [r2, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6852      	ldr	r2, [r2, #4]
 80046e2:	3a01      	subs	r2, #1
 80046e4:	0212      	lsls	r2, r2, #8
 80046e6:	430a      	orrs	r2, r1
 80046e8:	4934      	ldr	r1, [pc, #208]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	630b      	str	r3, [r1, #48]	@ 0x30
 80046ee:	4b33      	ldr	r3, [pc, #204]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 80046f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046f2:	4b33      	ldr	r3, [pc, #204]	@ (80047c0 <RCCEx_PLL3_Config+0x12c>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6892      	ldr	r2, [r2, #8]
 80046fa:	3a01      	subs	r2, #1
 80046fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68d2      	ldr	r2, [r2, #12]
 8004704:	3a01      	subs	r2, #1
 8004706:	0252      	lsls	r2, r2, #9
 8004708:	b292      	uxth	r2, r2
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6912      	ldr	r2, [r2, #16]
 8004710:	3a01      	subs	r2, #1
 8004712:	0412      	lsls	r2, r2, #16
 8004714:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004718:	4311      	orrs	r1, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6952      	ldr	r2, [r2, #20]
 800471e:	3a01      	subs	r2, #1
 8004720:	0612      	lsls	r2, r2, #24
 8004722:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004726:	430a      	orrs	r2, r1
 8004728:	4924      	ldr	r1, [pc, #144]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 800472a:	4313      	orrs	r3, r2
 800472c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800472e:	4b23      	ldr	r3, [pc, #140]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	f023 020c 	bic.w	r2, r3, #12
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	4920      	ldr	r1, [pc, #128]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 800473c:	4313      	orrs	r3, r2
 800473e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004740:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	491c      	ldr	r1, [pc, #112]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 800474a:	4313      	orrs	r3, r2
 800474c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800474e:	4b1b      	ldr	r3, [pc, #108]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	4a1a      	ldr	r2, [pc, #104]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004754:	f023 0310 	bic.w	r3, r3, #16
 8004758:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800475a:	4b18      	ldr	r3, [pc, #96]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 800475c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800475e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004762:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	69d2      	ldr	r2, [r2, #28]
 800476a:	00d2      	lsls	r2, r2, #3
 800476c:	4913      	ldr	r1, [pc, #76]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 800476e:	4313      	orrs	r3, r2
 8004770:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004772:	4b12      	ldr	r3, [pc, #72]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	4a11      	ldr	r2, [pc, #68]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004778:	f043 0310 	orr.w	r3, r3, #16
 800477c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800477e:	4b0f      	ldr	r3, [pc, #60]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a0e      	ldr	r2, [pc, #56]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004788:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800478a:	f7fc f879 	bl	8000880 <HAL_GetTick>
 800478e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004790:	e008      	b.n	80047a4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004792:	f7fc f875 	bl	8000880 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047a4:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <RCCEx_PLL3_Config+0x128>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0f0      	beq.n	8004792 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	46020c00 	.word	0x46020c00
 80047c0:	80800000 	.word	0x80800000

080047c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c4:	b084      	sub	sp, #16
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	f107 001c 	add.w	r0, r7, #28
 80047d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80047d6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d105      	bne.n	80047ea <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f001 fad8 	bl	8005da0 <USB_CoreReset>
 80047f0:	4603      	mov	r3, r0
 80047f2:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 80047f4:	7fbb      	ldrb	r3, [r7, #30]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10b      	bne.n	8004812 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f043 0208 	orr.w	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8004812:	7bfb      	ldrb	r3, [r7, #15]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800481e:	b004      	add	sp, #16
 8004820:	4770      	bx	lr
	...

08004824 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	4613      	mov	r3, r2
 8004830:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d165      	bne.n	8004904 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a41      	ldr	r2, [pc, #260]	@ (8004940 <USB_SetTurnaroundTime+0x11c>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d906      	bls.n	800484e <USB_SetTurnaroundTime+0x2a>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <USB_SetTurnaroundTime+0x120>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d202      	bcs.n	800484e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004848:	230f      	movs	r3, #15
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e062      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4a3c      	ldr	r2, [pc, #240]	@ (8004944 <USB_SetTurnaroundTime+0x120>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d306      	bcc.n	8004864 <USB_SetTurnaroundTime+0x40>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	4a3b      	ldr	r2, [pc, #236]	@ (8004948 <USB_SetTurnaroundTime+0x124>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d202      	bcs.n	8004864 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800485e:	230e      	movs	r3, #14
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e057      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a38      	ldr	r2, [pc, #224]	@ (8004948 <USB_SetTurnaroundTime+0x124>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d306      	bcc.n	800487a <USB_SetTurnaroundTime+0x56>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4a37      	ldr	r2, [pc, #220]	@ (800494c <USB_SetTurnaroundTime+0x128>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d202      	bcs.n	800487a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004874:	230d      	movs	r3, #13
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e04c      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4a33      	ldr	r2, [pc, #204]	@ (800494c <USB_SetTurnaroundTime+0x128>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d306      	bcc.n	8004890 <USB_SetTurnaroundTime+0x6c>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4a32      	ldr	r2, [pc, #200]	@ (8004950 <USB_SetTurnaroundTime+0x12c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d802      	bhi.n	8004890 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800488a:	230c      	movs	r3, #12
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e041      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4a2f      	ldr	r2, [pc, #188]	@ (8004950 <USB_SetTurnaroundTime+0x12c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d906      	bls.n	80048a6 <USB_SetTurnaroundTime+0x82>
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4a2e      	ldr	r2, [pc, #184]	@ (8004954 <USB_SetTurnaroundTime+0x130>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d802      	bhi.n	80048a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048a0:	230b      	movs	r3, #11
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	e036      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004954 <USB_SetTurnaroundTime+0x130>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d906      	bls.n	80048bc <USB_SetTurnaroundTime+0x98>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4a29      	ldr	r2, [pc, #164]	@ (8004958 <USB_SetTurnaroundTime+0x134>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d802      	bhi.n	80048bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048b6:	230a      	movs	r3, #10
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e02b      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4a26      	ldr	r2, [pc, #152]	@ (8004958 <USB_SetTurnaroundTime+0x134>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d906      	bls.n	80048d2 <USB_SetTurnaroundTime+0xae>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a25      	ldr	r2, [pc, #148]	@ (800495c <USB_SetTurnaroundTime+0x138>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d202      	bcs.n	80048d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048cc:	2309      	movs	r3, #9
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	e020      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a21      	ldr	r2, [pc, #132]	@ (800495c <USB_SetTurnaroundTime+0x138>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d306      	bcc.n	80048e8 <USB_SetTurnaroundTime+0xc4>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	4a20      	ldr	r2, [pc, #128]	@ (8004960 <USB_SetTurnaroundTime+0x13c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d802      	bhi.n	80048e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048e2:	2308      	movs	r3, #8
 80048e4:	617b      	str	r3, [r7, #20]
 80048e6:	e015      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004960 <USB_SetTurnaroundTime+0x13c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d906      	bls.n	80048fe <USB_SetTurnaroundTime+0xda>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004964 <USB_SetTurnaroundTime+0x140>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d202      	bcs.n	80048fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048f8:	2307      	movs	r3, #7
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e00a      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048fe:	2306      	movs	r3, #6
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e007      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800490a:	2309      	movs	r3, #9
 800490c:	617b      	str	r3, [r7, #20]
 800490e:	e001      	b.n	8004914 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004910:	2309      	movs	r3, #9
 8004912:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	029b      	lsls	r3, r3, #10
 8004928:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	00d8acbf 	.word	0x00d8acbf
 8004944:	00e4e1c0 	.word	0x00e4e1c0
 8004948:	00f42400 	.word	0x00f42400
 800494c:	01067380 	.word	0x01067380
 8004950:	011a499f 	.word	0x011a499f
 8004954:	01312cff 	.word	0x01312cff
 8004958:	014ca43f 	.word	0x014ca43f
 800495c:	016e3600 	.word	0x016e3600
 8004960:	01a6ab1f 	.word	0x01a6ab1f
 8004964:	01e84800 	.word	0x01e84800

08004968 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f043 0201 	orr.w	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0201 	bic.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049c8:	78fb      	ldrb	r3, [r7, #3]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d115      	bne.n	80049fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049da:	200a      	movs	r0, #10
 80049dc:	f7fb ff5c 	bl	8000898 <HAL_Delay>
      ms += 10U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	330a      	adds	r3, #10
 80049e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f001 f94b 	bl	8005c82 <USB_GetMode>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d01e      	beq.n	8004a30 <USB_SetCurrentMode+0x84>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80049f6:	d9f0      	bls.n	80049da <USB_SetCurrentMode+0x2e>
 80049f8:	e01a      	b.n	8004a30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d115      	bne.n	8004a2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a0c:	200a      	movs	r0, #10
 8004a0e:	f7fb ff43 	bl	8000898 <HAL_Delay>
      ms += 10U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	330a      	adds	r3, #10
 8004a16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 f932 	bl	8005c82 <USB_GetMode>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <USB_SetCurrentMode+0x84>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a28:	d9f0      	bls.n	8004a0c <USB_SetCurrentMode+0x60>
 8004a2a:	e001      	b.n	8004a30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e005      	b.n	8004a3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a34:	d101      	bne.n	8004a3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a44:	b084      	sub	sp, #16
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b086      	sub	sp, #24
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a5e:	2300      	movs	r3, #0
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e009      	b.n	8004a78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3340      	adds	r3, #64	@ 0x40
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	3301      	adds	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b0e      	cmp	r3, #14
 8004a7c:	d9f2      	bls.n	8004a64 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a82:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11c      	bne.n	8004acc <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004aca:	e011      	b.n	8004af0 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004af6:	461a      	mov	r2, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004afc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d10d      	bne.n	8004b20 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d104      	bne.n	8004b16 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f968 	bl	8004de4 <USB_SetDevSpeed>
 8004b14:	e008      	b.n	8004b28 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b16:	2101      	movs	r1, #1
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f963 	bl	8004de4 <USB_SetDevSpeed>
 8004b1e:	e003      	b.n	8004b28 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b20:	2103      	movs	r1, #3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f95e 	bl	8004de4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b28:	2110      	movs	r1, #16
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f8fa 	bl	8004d24 <USB_FlushTxFifo>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f924 	bl	8004d88 <USB_FlushRxFifo>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b50:	461a      	mov	r2, r3
 8004b52:	2300      	movs	r3, #0
 8004b54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	e043      	b.n	8004bfc <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b8a:	d118      	bne.n	8004bbe <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e013      	b.n	8004bd0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e008      	b.n	8004bd0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bca:	461a      	mov	r2, r3
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	613b      	str	r3, [r7, #16]
 8004bfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c00:	461a      	mov	r2, r3
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d3b5      	bcc.n	8004b74 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]
 8004c0c:	e043      	b.n	8004c96 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c24:	d118      	bne.n	8004c58 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e013      	b.n	8004c6a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	e008      	b.n	8004c6a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c64:	461a      	mov	r2, r3
 8004c66:	2300      	movs	r3, #0
 8004c68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c76:	461a      	mov	r2, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	3301      	adds	r3, #1
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d3b5      	bcc.n	8004c0e <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cb4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004cc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d105      	bne.n	8004cd8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f043 0210 	orr.w	r2, r3, #16
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	4b10      	ldr	r3, [pc, #64]	@ (8004d20 <USB_DevInit+0x2dc>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ce4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	f043 0208 	orr.w	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d107      	bne.n	8004d10 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3718      	adds	r7, #24
 8004d16:	46bd      	mov	sp, r7
 8004d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d1c:	b004      	add	sp, #16
 8004d1e:	4770      	bx	lr
 8004d20:	803c3800 	.word	0x803c3800

08004d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	3301      	adds	r3, #1
 8004d36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d3e:	d901      	bls.n	8004d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e01b      	b.n	8004d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	daf2      	bge.n	8004d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	019b      	lsls	r3, r3, #6
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d68:	d901      	bls.n	8004d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e006      	b.n	8004d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b20      	cmp	r3, #32
 8004d78:	d0f0      	beq.n	8004d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da0:	d901      	bls.n	8004da6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e018      	b.n	8004dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	daf2      	bge.n	8004d94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2210      	movs	r2, #16
 8004db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dc4:	d901      	bls.n	8004dca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e006      	b.n	8004dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b10      	cmp	r3, #16
 8004dd4:	d0f0      	beq.n	8004db8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3714      	adds	r7, #20
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e04:	4313      	orrs	r3, r2
 8004e06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b087      	sub	sp, #28
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0306 	and.w	r3, r3, #6
 8004e2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d102      	bne.n	8004e3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]
 8004e3a:	e00a      	b.n	8004e52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d002      	beq.n	8004e48 <USB_GetDevSpeed+0x32>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b06      	cmp	r3, #6
 8004e46:	d102      	bne.n	8004e4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	75fb      	strb	r3, [r7, #23]
 8004e4c:	e001      	b.n	8004e52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e4e:	230f      	movs	r3, #15
 8004e50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d13a      	bne.n	8004ef2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	68f9      	ldr	r1, [r7, #12]
 8004e96:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d155      	bne.n	8004f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	791b      	ldrb	r3, [r3, #4]
 8004ece:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ed0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	059b      	lsls	r3, r3, #22
 8004ed6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	0151      	lsls	r1, r2, #5
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	440a      	add	r2, r1
 8004ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e036      	b.n	8004f60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef8:	69da      	ldr	r2, [r3, #28]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	2101      	movs	r1, #1
 8004f04:	fa01 f303 	lsl.w	r3, r1, r3
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	68f9      	ldr	r1, [r7, #12]
 8004f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d11a      	bne.n	8004f60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	791b      	ldrb	r3, [r3, #4]
 8004f44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f46:	430b      	orrs	r3, r1
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d161      	bne.n	8005050 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fa2:	d11f      	bne.n	8004fe4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	0151      	lsls	r1, r2, #5
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	440a      	add	r2, r1
 8004fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fbe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004fc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fe2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	43db      	mvns	r3, r3
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005004:	4013      	ands	r3, r2
 8005006:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	2101      	movs	r1, #1
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	b29b      	uxth	r3, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005028:	4013      	ands	r3, r2
 800502a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	0159      	lsls	r1, r3, #5
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	440b      	add	r3, r1
 8005042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005046:	4619      	mov	r1, r3
 8005048:	4b35      	ldr	r3, [pc, #212]	@ (8005120 <USB_DeactivateEndpoint+0x1b0>)
 800504a:	4013      	ands	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
 800504e:	e060      	b.n	8005112 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005062:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005066:	d11f      	bne.n	80050a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	0151      	lsls	r1, r2, #5
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	440a      	add	r2, r1
 800507e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005082:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005086:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	015a      	lsls	r2, r3, #5
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	0151      	lsls	r1, r2, #5
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	440a      	add	r2, r1
 800509e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	2101      	movs	r1, #1
 80050ba:	fa01 f303 	lsl.w	r3, r1, r3
 80050be:	041b      	lsls	r3, r3, #16
 80050c0:	43db      	mvns	r3, r3
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050c8:	4013      	ands	r3, r2
 80050ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	2101      	movs	r1, #1
 80050de:	fa01 f303 	lsl.w	r3, r1, r3
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	43db      	mvns	r3, r3
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80050ec:	4013      	ands	r3, r2
 80050ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	0159      	lsls	r1, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	440b      	add	r3, r1
 8005106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800510a:	4619      	mov	r1, r3
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <USB_DeactivateEndpoint+0x1b4>)
 800510e:	4013      	ands	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	ec337800 	.word	0xec337800
 8005124:	eff37800 	.word	0xeff37800

08005128 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	@ 0x28
 800512c:	af02      	add	r7, sp, #8
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4613      	mov	r3, r2
 8005134:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	2b01      	cmp	r3, #1
 8005146:	f040 817f 	bne.w	8005448 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d132      	bne.n	80051b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800516c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005170:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005194:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b0:	0cdb      	lsrs	r3, r3, #19
 80051b2:	04db      	lsls	r3, r3, #19
 80051b4:	6113      	str	r3, [r2, #16]
 80051b6:	e097      	b.n	80052e8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	69fa      	ldr	r2, [r7, #28]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d2:	0cdb      	lsrs	r3, r3, #19
 80051d4:	04db      	lsls	r3, r3, #19
 80051d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051fa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d11a      	bne.n	8005238 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d903      	bls.n	8005216 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	0151      	lsls	r1, r2, #5
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	440a      	add	r2, r1
 800522c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005230:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005234:	6113      	str	r3, [r2, #16]
 8005236:	e044      	b.n	80052c2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	4413      	add	r3, r2
 8005242:	1e5a      	subs	r2, r3, #1
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	04d9      	lsls	r1, r3, #19
 8005260:	4ba4      	ldr	r3, [pc, #656]	@ (80054f4 <USB_EPStartXfer+0x3cc>)
 8005262:	400b      	ands	r3, r1
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	0148      	lsls	r0, r1, #5
 8005268:	69f9      	ldr	r1, [r7, #28]
 800526a:	4401      	add	r1, r0
 800526c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005270:	4313      	orrs	r3, r2
 8005272:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	791b      	ldrb	r3, [r3, #4]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d122      	bne.n	80052c2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	0151      	lsls	r1, r2, #5
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	440a      	add	r2, r1
 8005292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005296:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800529a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	8afb      	ldrh	r3, [r7, #22]
 80052ac:	075b      	lsls	r3, r3, #29
 80052ae:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052b2:	69b9      	ldr	r1, [r7, #24]
 80052b4:	0148      	lsls	r0, r1, #5
 80052b6:	69f9      	ldr	r1, [r7, #28]
 80052b8:	4401      	add	r1, r0
 80052ba:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052be:	4313      	orrs	r3, r2
 80052c0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d8:	69b9      	ldr	r1, [r7, #24]
 80052da:	0148      	lsls	r0, r1, #5
 80052dc:	69f9      	ldr	r1, [r7, #28]
 80052de:	4401      	add	r1, r0
 80052e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052e4:	4313      	orrs	r3, r2
 80052e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d14b      	bne.n	8005386 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	69db      	ldr	r3, [r3, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005302:	461a      	mov	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	791b      	ldrb	r3, [r3, #4]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d128      	bne.n	8005364 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d110      	bne.n	8005344 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800533c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	e00f      	b.n	8005364 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	440a      	add	r2, r1
 800535a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800535e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005362:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	440a      	add	r2, r1
 800537a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800537e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	e166      	b.n	8005654 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	4413      	add	r3, r2
 800538e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	0151      	lsls	r1, r2, #5
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	440a      	add	r2, r1
 800539c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053a4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	791b      	ldrb	r3, [r3, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d015      	beq.n	80053da <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 814e 	beq.w	8005654 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	2101      	movs	r1, #1
 80053ca:	fa01 f303 	lsl.w	r3, r1, r3
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053d4:	4313      	orrs	r3, r2
 80053d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80053d8:	e13c      	b.n	8005654 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d110      	bne.n	800540c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005404:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e00f      	b.n	800542c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	68d9      	ldr	r1, [r3, #12]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	b298      	uxth	r0, r3
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	9300      	str	r3, [sp, #0]
 800543e:	4603      	mov	r3, r0
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 f9b9 	bl	80057b8 <USB_WritePacket>
 8005446:	e105      	b.n	8005654 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005462:	0cdb      	lsrs	r3, r3, #19
 8005464:	04db      	lsls	r3, r3, #19
 8005466:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	015a      	lsls	r2, r3, #5
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	4413      	add	r3, r2
 8005470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	69fa      	ldr	r2, [r7, #28]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005482:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005486:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800548a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d132      	bne.n	80054f8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	0148      	lsls	r0, r1, #5
 80054c4:	69f9      	ldr	r1, [r7, #28]
 80054c6:	4401      	add	r1, r0
 80054c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054cc:	4313      	orrs	r3, r2
 80054ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054ee:	6113      	str	r3, [r2, #16]
 80054f0:	e062      	b.n	80055b8 <USB_EPStartXfer+0x490>
 80054f2:	bf00      	nop
 80054f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d123      	bne.n	8005548 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800550c:	691a      	ldr	r2, [r3, #16]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005516:	69b9      	ldr	r1, [r7, #24]
 8005518:	0148      	lsls	r0, r1, #5
 800551a:	69f9      	ldr	r1, [r7, #28]
 800551c:	4401      	add	r1, r0
 800551e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005522:	4313      	orrs	r3, r2
 8005524:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005540:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005544:	6113      	str	r3, [r2, #16]
 8005546:	e037      	b.n	80055b8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	4413      	add	r3, r2
 8005552:	1e5a      	subs	r2, r3, #1
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	fbb2 f3f3 	udiv	r3, r2, r3
 800555c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	8afa      	ldrh	r2, [r7, #22]
 8005564:	fb03 f202 	mul.w	r2, r3, r2
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005578:	691a      	ldr	r2, [r3, #16]
 800557a:	8afb      	ldrh	r3, [r7, #22]
 800557c:	04d9      	lsls	r1, r3, #19
 800557e:	4b38      	ldr	r3, [pc, #224]	@ (8005660 <USB_EPStartXfer+0x538>)
 8005580:	400b      	ands	r3, r1
 8005582:	69b9      	ldr	r1, [r7, #24]
 8005584:	0148      	lsls	r0, r1, #5
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	4401      	add	r1, r0
 800558a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800558e:	4313      	orrs	r3, r2
 8005590:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a8:	69b9      	ldr	r1, [r7, #24]
 80055aa:	0148      	lsls	r0, r1, #5
 80055ac:	69f9      	ldr	r1, [r7, #28]
 80055ae:	4401      	add	r1, r0
 80055b0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055b4:	4313      	orrs	r3, r2
 80055b6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d10d      	bne.n	80055da <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d009      	beq.n	80055da <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	68d9      	ldr	r1, [r3, #12]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	015a      	lsls	r2, r3, #5
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	4413      	add	r3, r2
 80055d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d6:	460a      	mov	r2, r1
 80055d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	791b      	ldrb	r3, [r3, #4]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d128      	bne.n	8005634 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d110      	bne.n	8005614 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	69fa      	ldr	r2, [r7, #28]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800560c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00f      	b.n	8005634 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	0151      	lsls	r1, r2, #5
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	440a      	add	r2, r1
 800562a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800562e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69ba      	ldr	r2, [r7, #24]
 8005644:	0151      	lsls	r1, r2, #5
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	440a      	add	r2, r1
 800564a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800564e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	1ff80000 	.word	0x1ff80000

08005664 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d14a      	bne.n	8005718 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005696:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569a:	f040 8086 	bne.w	80057aa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	7812      	ldrb	r2, [r2, #0]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056c0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	7812      	ldrb	r2, [r2, #0]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f242 7210 	movw	r2, #10000	@ 0x2710
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d902      	bls.n	80056fc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
          break;
 80056fa:	e056      	b.n	80057aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005710:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005714:	d0e7      	beq.n	80056e6 <USB_EPStopXfer+0x82>
 8005716:	e048      	b.n	80057aa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d13b      	bne.n	80057aa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005750:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005754:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	7812      	ldrb	r2, [r2, #0]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005778:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3301      	adds	r3, #1
 800577e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005786:	4293      	cmp	r3, r2
 8005788:	d902      	bls.n	8005790 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	75fb      	strb	r3, [r7, #23]
          break;
 800578e:	e00c      	b.n	80057aa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057a8:	d0e7      	beq.n	800577a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	@ 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	4611      	mov	r1, r2
 80057c4:	461a      	mov	r2, r3
 80057c6:	460b      	mov	r3, r1
 80057c8:	71fb      	strb	r3, [r7, #7]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d123      	bne.n	8005826 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057de:	88bb      	ldrh	r3, [r7, #4]
 80057e0:	3303      	adds	r3, #3
 80057e2:	089b      	lsrs	r3, r3, #2
 80057e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	e018      	b.n	800581e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	031a      	lsls	r2, r3, #12
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057f8:	461a      	mov	r2, r3
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	3301      	adds	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	3301      	adds	r3, #1
 800580a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3301      	adds	r3, #1
 8005816:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	3301      	adds	r3, #1
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d3e2      	bcc.n	80057ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3724      	adds	r7, #36	@ 0x24
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005834:	b480      	push	{r7}
 8005836:	b08b      	sub	sp, #44	@ 0x2c
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	089b      	lsrs	r3, r3, #2
 800584e:	b29b      	uxth	r3, r3
 8005850:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800585a:	2300      	movs	r3, #0
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	e014      	b.n	800588a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586a:	601a      	str	r2, [r3, #0]
    pDest++;
 800586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586e:	3301      	adds	r3, #1
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005874:	3301      	adds	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587a:	3301      	adds	r3, #1
 800587c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	3301      	adds	r3, #1
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3301      	adds	r3, #1
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	429a      	cmp	r2, r3
 8005890:	d3e6      	bcc.n	8005860 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005892:	8bfb      	ldrh	r3, [r7, #30]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01e      	beq.n	80058d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005898:	2300      	movs	r3, #0
 800589a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058a2:	461a      	mov	r2, r3
 80058a4:	f107 0310 	add.w	r3, r7, #16
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	fa22 f303 	lsr.w	r3, r2, r3
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	701a      	strb	r2, [r3, #0]
      i++;
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	3301      	adds	r3, #1
 80058c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058ca:	8bfb      	ldrh	r3, [r7, #30]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058d0:	8bfb      	ldrh	r3, [r7, #30]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1ea      	bne.n	80058ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058d8:	4618      	mov	r0, r3
 80058da:	372c      	adds	r7, #44	@ 0x2c
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d12c      	bne.n	800595a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	db12      	blt.n	8005938 <USB_EPSetStall+0x54>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00f      	beq.n	8005938 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	0151      	lsls	r1, r2, #5
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	440a      	add	r2, r1
 800592e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005932:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005936:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	440a      	add	r2, r1
 800594e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005952:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	e02b      	b.n	80059b2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	db12      	blt.n	8005992 <USB_EPSetStall+0xae>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00f      	beq.n	8005992 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	0151      	lsls	r1, r2, #5
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	440a      	add	r2, r1
 8005988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800598c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005990:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	0151      	lsls	r1, r2, #5
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	440a      	add	r2, r1
 80059a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d128      	bne.n	8005a2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	0151      	lsls	r1, r2, #5
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	440a      	add	r2, r1
 80059f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	791b      	ldrb	r3, [r3, #4]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d003      	beq.n	8005a0c <USB_EPClearStall+0x4c>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	791b      	ldrb	r3, [r3, #4]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d138      	bne.n	8005a7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	0151      	lsls	r1, r2, #5
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	440a      	add	r2, r1
 8005a22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	e027      	b.n	8005a7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	791b      	ldrb	r3, [r3, #4]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d003      	beq.n	8005a5e <USB_EPClearStall+0x9e>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	791b      	ldrb	r3, [r3, #4]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d10f      	bne.n	8005a7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aaa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005aae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	78fb      	ldrb	r3, [r7, #3]
 8005aba:	011b      	lsls	r3, r3, #4
 8005abc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005ac0:	68f9      	ldr	r1, [r7, #12]
 8005ac2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b06:	f023 0302 	bic.w	r3, r3, #2
 8005b0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b34:	f023 0303 	bic.w	r3, r3, #3
 8005b38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b48:	f043 0302 	orr.w	r3, r3, #2
 8005b4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4013      	ands	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b74:	68fb      	ldr	r3, [r7, #12]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	0c1b      	lsrs	r3, r3, #16
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	68ba      	ldr	r2, [r7, #8]
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	b29b      	uxth	r3, r3
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	4013      	ands	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c18:	68bb      	ldr	r3, [r7, #8]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b087      	sub	sp, #28
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c48:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	fa22 f303 	lsr.w	r3, r2, r3
 8005c56:	01db      	lsls	r3, r3, #7
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4013      	ands	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c74:	68bb      	ldr	r3, [r7, #8]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005cbc:	f023 0307 	bic.w	r3, r3, #7
 8005cc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	460b      	mov	r3, r1
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	333c      	adds	r3, #60	@ 0x3c
 8005cfa:	3304      	adds	r3, #4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4a26      	ldr	r2, [pc, #152]	@ (8005d9c <USB_EP0_OutStart+0xb8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d90a      	bls.n	8005d1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d18:	d101      	bne.n	8005d1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e037      	b.n	8005d8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d24:	461a      	mov	r2, r3
 8005d26:	2300      	movs	r3, #0
 8005d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d4c:	f043 0318 	orr.w	r3, r3, #24
 8005d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d60:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d66:	7afb      	ldrb	r3, [r7, #11]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d10f      	bne.n	8005d8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d72:	461a      	mov	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d86:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	4f54300a 	.word	0x4f54300a

08005da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	3301      	adds	r3, #1
 8005db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005db8:	d901      	bls.n	8005dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e01b      	b.n	8005df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	daf2      	bge.n	8005dac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f043 0201 	orr.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005de2:	d901      	bls.n	8005de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e006      	b.n	8005df6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d0f0      	beq.n	8005dd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e10:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e14:	f002 fc7c 	bl	8008710 <USBD_static_malloc>
 8005e18:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	32b0      	adds	r2, #176	@ 0xb0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0d4      	b.n	8005fde <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e34:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e38:	2100      	movs	r1, #0
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f002 fcac 	bl	8008798 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	32b0      	adds	r2, #176	@ 0xb0
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	32b0      	adds	r2, #176	@ 0xb0
 8005e5a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	7c1b      	ldrb	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d138      	bne.n	8005ede <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005e6e:	7819      	ldrb	r1, [r3, #0]
 8005e70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e74:	2202      	movs	r2, #2
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 fb27 	bl	80084ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	6879      	ldr	r1, [r7, #4]
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	440b      	add	r3, r1
 8005e90:	3324      	adds	r3, #36	@ 0x24
 8005e92:	2201      	movs	r2, #1
 8005e94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e96:	4b55      	ldr	r3, [pc, #340]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005e98:	7819      	ldrb	r1, [r3, #0]
 8005e9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f002 fb12 	bl	80084ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ea6:	4b51      	ldr	r3, [pc, #324]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	f003 020f 	and.w	r2, r3, #15
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005ec2:	4b4b      	ldr	r3, [pc, #300]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	f003 020f 	and.w	r2, r3, #15
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	3326      	adds	r3, #38	@ 0x26
 8005ed8:	2210      	movs	r2, #16
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e035      	b.n	8005f4a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ede:	4b42      	ldr	r3, [pc, #264]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005ee0:	7819      	ldrb	r1, [r3, #0]
 8005ee2:	2340      	movs	r3, #64	@ 0x40
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f002 faef 	bl	80084ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005eec:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <USBD_CDC_Init+0x1e4>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3324      	adds	r3, #36	@ 0x24
 8005f02:	2201      	movs	r2, #1
 8005f04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f06:	4b39      	ldr	r3, [pc, #228]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005f08:	7819      	ldrb	r1, [r3, #0]
 8005f0a:	2340      	movs	r3, #64	@ 0x40
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f002 fadb 	bl	80084ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f14:	4b35      	ldr	r3, [pc, #212]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f30:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	3326      	adds	r3, #38	@ 0x26
 8005f46:	2210      	movs	r2, #16
 8005f48:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f4a:	4b29      	ldr	r3, [pc, #164]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005f4c:	7819      	ldrb	r1, [r3, #0]
 8005f4e:	2308      	movs	r3, #8
 8005f50:	2203      	movs	r2, #3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f002 fab9 	bl	80084ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f58:	4b25      	ldr	r3, [pc, #148]	@ (8005ff0 <USBD_CDC_Init+0x1ec>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	f003 020f 	and.w	r2, r3, #15
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	3324      	adds	r3, #36	@ 0x24
 8005f6e:	2201      	movs	r2, #1
 8005f70:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	33b0      	adds	r3, #176	@ 0xb0
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	4413      	add	r3, r2
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e018      	b.n	8005fde <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	7c1b      	ldrb	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005fb6:	7819      	ldrb	r1, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 fb70 	bl	80086a8 <USBD_LL_PrepareReceive>
 8005fc8:	e008      	b.n	8005fdc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fca:	4b08      	ldr	r3, [pc, #32]	@ (8005fec <USBD_CDC_Init+0x1e8>)
 8005fcc:	7819      	ldrb	r1, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005fd4:	2340      	movs	r3, #64	@ 0x40
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f002 fb66 	bl	80086a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000093 	.word	0x20000093
 8005fec:	20000094 	.word	0x20000094
 8005ff0:	20000095 	.word	0x20000095

08005ff4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006000:	4b3a      	ldr	r3, [pc, #232]	@ (80060ec <USBD_CDC_DeInit+0xf8>)
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f002 fa85 	bl	8008516 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800600c:	4b37      	ldr	r3, [pc, #220]	@ (80060ec <USBD_CDC_DeInit+0xf8>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	f003 020f 	and.w	r2, r3, #15
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	3324      	adds	r3, #36	@ 0x24
 8006022:	2200      	movs	r2, #0
 8006024:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006026:	4b32      	ldr	r3, [pc, #200]	@ (80060f0 <USBD_CDC_DeInit+0xfc>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f002 fa72 	bl	8008516 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006032:	4b2f      	ldr	r3, [pc, #188]	@ (80060f0 <USBD_CDC_DeInit+0xfc>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	f003 020f 	and.w	r2, r3, #15
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800604a:	2200      	movs	r2, #0
 800604c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800604e:	4b29      	ldr	r3, [pc, #164]	@ (80060f4 <USBD_CDC_DeInit+0x100>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f002 fa5e 	bl	8008516 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800605a:	4b26      	ldr	r3, [pc, #152]	@ (80060f4 <USBD_CDC_DeInit+0x100>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3324      	adds	r3, #36	@ 0x24
 8006070:	2200      	movs	r2, #0
 8006072:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006074:	4b1f      	ldr	r3, [pc, #124]	@ (80060f4 <USBD_CDC_DeInit+0x100>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	f003 020f 	and.w	r2, r3, #15
 800607c:	6879      	ldr	r1, [r7, #4]
 800607e:	4613      	mov	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	440b      	add	r3, r1
 8006088:	3326      	adds	r3, #38	@ 0x26
 800608a:	2200      	movs	r2, #0
 800608c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	32b0      	adds	r2, #176	@ 0xb0
 8006098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d01f      	beq.n	80060e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	33b0      	adds	r3, #176	@ 0xb0
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	32b0      	adds	r2, #176	@ 0xb0
 80060be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f002 fb32 	bl	800872c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	32b0      	adds	r2, #176	@ 0xb0
 80060d2:	2100      	movs	r1, #0
 80060d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000093 	.word	0x20000093
 80060f0:	20000094 	.word	0x20000094
 80060f4:	20000095 	.word	0x20000095

080060f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	32b0      	adds	r2, #176	@ 0xb0
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006116:	2300      	movs	r3, #0
 8006118:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006124:	2303      	movs	r3, #3
 8006126:	e0bf      	b.n	80062a8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006130:	2b00      	cmp	r3, #0
 8006132:	d050      	beq.n	80061d6 <USBD_CDC_Setup+0xde>
 8006134:	2b20      	cmp	r3, #32
 8006136:	f040 80af 	bne.w	8006298 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	88db      	ldrh	r3, [r3, #6]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d03a      	beq.n	80061b8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	b25b      	sxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	da1b      	bge.n	8006184 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	33b0      	adds	r3, #176	@ 0xb0
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006162:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	88d2      	ldrh	r2, [r2, #6]
 8006168:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	88db      	ldrh	r3, [r3, #6]
 800616e:	2b07      	cmp	r3, #7
 8006170:	bf28      	it	cs
 8006172:	2307      	movcs	r3, #7
 8006174:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	89fa      	ldrh	r2, [r7, #14]
 800617a:	4619      	mov	r1, r3
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fdbd 	bl	8007cfc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006182:	e090      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	785a      	ldrb	r2, [r3, #1]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	88db      	ldrh	r3, [r3, #6]
 8006192:	2b3f      	cmp	r3, #63	@ 0x3f
 8006194:	d803      	bhi.n	800619e <USBD_CDC_Setup+0xa6>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	88db      	ldrh	r3, [r3, #6]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	e000      	b.n	80061a0 <USBD_CDC_Setup+0xa8>
 800619e:	2240      	movs	r2, #64	@ 0x40
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80061a6:	6939      	ldr	r1, [r7, #16]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80061ae:	461a      	mov	r2, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fdcf 	bl	8007d54 <USBD_CtlPrepareRx>
      break;
 80061b6:	e076      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	33b0      	adds	r3, #176	@ 0xb0
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	7850      	ldrb	r0, [r2, #1]
 80061ce:	2200      	movs	r2, #0
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	4798      	blx	r3
      break;
 80061d4:	e067      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b0b      	cmp	r3, #11
 80061dc:	d851      	bhi.n	8006282 <USBD_CDC_Setup+0x18a>
 80061de:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <USBD_CDC_Setup+0xec>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006215 	.word	0x08006215
 80061e8:	08006291 	.word	0x08006291
 80061ec:	08006283 	.word	0x08006283
 80061f0:	08006283 	.word	0x08006283
 80061f4:	08006283 	.word	0x08006283
 80061f8:	08006283 	.word	0x08006283
 80061fc:	08006283 	.word	0x08006283
 8006200:	08006283 	.word	0x08006283
 8006204:	08006283 	.word	0x08006283
 8006208:	08006283 	.word	0x08006283
 800620c:	0800623f 	.word	0x0800623f
 8006210:	08006269 	.word	0x08006269
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b03      	cmp	r3, #3
 800621e:	d107      	bne.n	8006230 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006220:	f107 030a 	add.w	r3, r7, #10
 8006224:	2202      	movs	r2, #2
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fd67 	bl	8007cfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800622e:	e032      	b.n	8006296 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fce5 	bl	8007c02 <USBD_CtlError>
            ret = USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	75fb      	strb	r3, [r7, #23]
          break;
 800623c:	e02b      	b.n	8006296 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b03      	cmp	r3, #3
 8006248:	d107      	bne.n	800625a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800624a:	f107 030d 	add.w	r3, r7, #13
 800624e:	2201      	movs	r2, #1
 8006250:	4619      	mov	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f001 fd52 	bl	8007cfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006258:	e01d      	b.n	8006296 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f001 fcd0 	bl	8007c02 <USBD_CtlError>
            ret = USBD_FAIL;
 8006262:	2303      	movs	r3, #3
 8006264:	75fb      	strb	r3, [r7, #23]
          break;
 8006266:	e016      	b.n	8006296 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b03      	cmp	r3, #3
 8006272:	d00f      	beq.n	8006294 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fcc3 	bl	8007c02 <USBD_CtlError>
            ret = USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006280:	e008      	b.n	8006294 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 fcbc 	bl	8007c02 <USBD_CtlError>
          ret = USBD_FAIL;
 800628a:	2303      	movs	r3, #3
 800628c:	75fb      	strb	r3, [r7, #23]
          break;
 800628e:	e002      	b.n	8006296 <USBD_CDC_Setup+0x19e>
          break;
 8006290:	bf00      	nop
 8006292:	e008      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>
          break;
 8006294:	bf00      	nop
      }
      break;
 8006296:	e006      	b.n	80062a6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f001 fcb1 	bl	8007c02 <USBD_CtlError>
      ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	75fb      	strb	r3, [r7, #23]
      break;
 80062a4:	bf00      	nop
  }

  return (uint8_t)ret;
 80062a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3718      	adds	r7, #24
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80062c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	32b0      	adds	r2, #176	@ 0xb0
 80062ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e065      	b.n	80063a6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	32b0      	adds	r2, #176	@ 0xb0
 80062e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	440b      	add	r3, r1
 80062fc:	3318      	adds	r3, #24
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d02f      	beq.n	8006364 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	f003 020f 	and.w	r2, r3, #15
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	3318      	adds	r3, #24
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	f003 010f 	and.w	r1, r3, #15
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	460b      	mov	r3, r1
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	440b      	add	r3, r1
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4403      	add	r3, r0
 800632c:	331c      	adds	r3, #28
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	fbb2 f1f3 	udiv	r1, r2, r3
 8006334:	fb01 f303 	mul.w	r3, r1, r3
 8006338:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800633a:	2b00      	cmp	r3, #0
 800633c:	d112      	bne.n	8006364 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800633e:	78fb      	ldrb	r3, [r7, #3]
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	3318      	adds	r3, #24
 8006352:	2200      	movs	r2, #0
 8006354:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006356:	78f9      	ldrb	r1, [r7, #3]
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f002 f982 	bl	8008666 <USBD_LL_Transmit>
 8006362:	e01f      	b.n	80063a4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	33b0      	adds	r3, #176	@ 0xb0
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d010      	beq.n	80063a4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	33b0      	adds	r3, #176	@ 0xb0
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80063a0:	78fa      	ldrb	r2, [r7, #3]
 80063a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	32b0      	adds	r2, #176	@ 0xb0
 80063c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	32b0      	adds	r2, #176	@ 0xb0
 80063d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e01a      	b.n	8006416 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80063e0:	78fb      	ldrb	r3, [r7, #3]
 80063e2:	4619      	mov	r1, r3
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f002 f980 	bl	80086ea <USBD_LL_GetRxDataSize>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	33b0      	adds	r3, #176	@ 0xb0
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006410:	4611      	mov	r1, r2
 8006412:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	32b0      	adds	r2, #176	@ 0xb0
 8006430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006434:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e024      	b.n	800648a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	33b0      	adds	r3, #176	@ 0xb0
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d019      	beq.n	8006488 <USBD_CDC_EP0_RxReady+0x6a>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800645a:	2bff      	cmp	r3, #255	@ 0xff
 800645c:	d014      	beq.n	8006488 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	33b0      	adds	r3, #176	@ 0xb0
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006476:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800647e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	22ff      	movs	r2, #255	@ 0xff
 8006484:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800649c:	2182      	movs	r1, #130	@ 0x82
 800649e:	4818      	ldr	r0, [pc, #96]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064a0:	f000 fd4f 	bl	8006f42 <USBD_GetEpDesc>
 80064a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064a6:	2101      	movs	r1, #1
 80064a8:	4815      	ldr	r0, [pc, #84]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064aa:	f000 fd4a 	bl	8006f42 <USBD_GetEpDesc>
 80064ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064b0:	2181      	movs	r1, #129	@ 0x81
 80064b2:	4813      	ldr	r0, [pc, #76]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064b4:	f000 fd45 	bl	8006f42 <USBD_GetEpDesc>
 80064b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2210      	movs	r2, #16
 80064c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d006      	beq.n	80064da <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064d4:	711a      	strb	r2, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064e8:	711a      	strb	r2, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2243      	movs	r2, #67	@ 0x43
 80064f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064f4:	4b02      	ldr	r3, [pc, #8]	@ (8006500 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000050 	.word	0x20000050

08006504 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800650c:	2182      	movs	r1, #130	@ 0x82
 800650e:	4818      	ldr	r0, [pc, #96]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006510:	f000 fd17 	bl	8006f42 <USBD_GetEpDesc>
 8006514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006516:	2101      	movs	r1, #1
 8006518:	4815      	ldr	r0, [pc, #84]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800651a:	f000 fd12 	bl	8006f42 <USBD_GetEpDesc>
 800651e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006520:	2181      	movs	r1, #129	@ 0x81
 8006522:	4813      	ldr	r0, [pc, #76]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006524:	f000 fd0d 	bl	8006f42 <USBD_GetEpDesc>
 8006528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	2210      	movs	r2, #16
 8006534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d006      	beq.n	800654a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2200      	movs	r2, #0
 8006540:	711a      	strb	r2, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f042 0202 	orr.w	r2, r2, #2
 8006548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d006      	beq.n	800655e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	711a      	strb	r2, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f042 0202 	orr.w	r2, r2, #2
 800655c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2243      	movs	r2, #67	@ 0x43
 8006562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006564:	4b02      	ldr	r3, [pc, #8]	@ (8006570 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000050 	.word	0x20000050

08006574 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800657c:	2182      	movs	r1, #130	@ 0x82
 800657e:	4818      	ldr	r0, [pc, #96]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006580:	f000 fcdf 	bl	8006f42 <USBD_GetEpDesc>
 8006584:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006586:	2101      	movs	r1, #1
 8006588:	4815      	ldr	r0, [pc, #84]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800658a:	f000 fcda 	bl	8006f42 <USBD_GetEpDesc>
 800658e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006590:	2181      	movs	r1, #129	@ 0x81
 8006592:	4813      	ldr	r0, [pc, #76]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006594:	f000 fcd5 	bl	8006f42 <USBD_GetEpDesc>
 8006598:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2210      	movs	r2, #16
 80065a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065b4:	711a      	strb	r2, [r3, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d006      	beq.n	80065ce <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065c8:	711a      	strb	r2, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2243      	movs	r2, #67	@ 0x43
 80065d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065d4:	4b02      	ldr	r3, [pc, #8]	@ (80065e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3718      	adds	r7, #24
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000050 	.word	0x20000050

080065e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	220a      	movs	r2, #10
 80065f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80065f2:	4b03      	ldr	r3, [pc, #12]	@ (8006600 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	2000000c 	.word	0x2000000c

08006604 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	e009      	b.n	800662c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	33b0      	adds	r3, #176	@ 0xb0
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4413      	add	r3, r2
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	32b0      	adds	r2, #176	@ 0xb0
 800664e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006652:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800665a:	2303      	movs	r3, #3
 800665c:	e008      	b.n	8006670 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	371c      	adds	r7, #28
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	32b0      	adds	r2, #176	@ 0xb0
 8006690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006694:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d101      	bne.n	80066a0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800669c:	2303      	movs	r3, #3
 800669e:	e004      	b.n	80066aa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	32b0      	adds	r2, #176	@ 0xb0
 80066ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80066da:	2303      	movs	r3, #3
 80066dc:	e025      	b.n	800672a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d11f      	bne.n	8006728 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80066f0:	4b10      	ldr	r3, [pc, #64]	@ (8006734 <USBD_CDC_TransmitPacket+0x7c>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 020f 	and.w	r2, r3, #15
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4403      	add	r3, r0
 800670a:	3318      	adds	r3, #24
 800670c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800670e:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <USBD_CDC_TransmitPacket+0x7c>)
 8006710:	7819      	ldrb	r1, [r3, #0]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f001 ffa1 	bl	8008666 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20000093 	.word	0x20000093

08006738 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	32b0      	adds	r2, #176	@ 0xb0
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	32b0      	adds	r2, #176	@ 0xb0
 800675a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006762:	2303      	movs	r3, #3
 8006764:	e018      	b.n	8006798 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	7c1b      	ldrb	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10a      	bne.n	8006784 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800676e:	4b0c      	ldr	r3, [pc, #48]	@ (80067a0 <USBD_CDC_ReceivePacket+0x68>)
 8006770:	7819      	ldrb	r1, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 ff93 	bl	80086a8 <USBD_LL_PrepareReceive>
 8006782:	e008      	b.n	8006796 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006784:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <USBD_CDC_ReceivePacket+0x68>)
 8006786:	7819      	ldrb	r1, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800678e:	2340      	movs	r3, #64	@ 0x40
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 ff89 	bl	80086a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000094 	.word	0x20000094

080067a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e01f      	b.n	80067fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	79fa      	ldrb	r2, [r7, #7]
 80067ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f001 fdfd 	bl	80083f0 <USBD_LL_Init>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006818:	2303      	movs	r3, #3
 800681a:	e025      	b.n	8006868 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32ae      	adds	r2, #174	@ 0xae
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00f      	beq.n	8006858 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	32ae      	adds	r2, #174	@ 0xae
 8006842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006848:	f107 020e 	add.w	r2, r7, #14
 800684c:	4610      	mov	r0, r2
 800684e:	4798      	blx	r3
 8006850:	4602      	mov	r2, r0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f001 fe0b 	bl	8008494 <USBD_LL_Start>
 800687e:	4603      	mov	r3, r0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d009      	beq.n	80068cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	78fa      	ldrb	r2, [r7, #3]
 80068c2:	4611      	mov	r1, r2
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	4798      	blx	r3
 80068c8:	4603      	mov	r3, r0
 80068ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b084      	sub	sp, #16
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	4611      	mov	r1, r2
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068fc:	2303      	movs	r3, #3
 80068fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f001 f936 	bl	8007b8e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006930:	461a      	mov	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800693e:	f003 031f 	and.w	r3, r3, #31
 8006942:	2b02      	cmp	r3, #2
 8006944:	d01a      	beq.n	800697c <USBD_LL_SetupStage+0x72>
 8006946:	2b02      	cmp	r3, #2
 8006948:	d822      	bhi.n	8006990 <USBD_LL_SetupStage+0x86>
 800694a:	2b00      	cmp	r3, #0
 800694c:	d002      	beq.n	8006954 <USBD_LL_SetupStage+0x4a>
 800694e:	2b01      	cmp	r3, #1
 8006950:	d00a      	beq.n	8006968 <USBD_LL_SetupStage+0x5e>
 8006952:	e01d      	b.n	8006990 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fb63 	bl	8007028 <USBD_StdDevReq>
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
      break;
 8006966:	e020      	b.n	80069aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fbcb 	bl	800710c <USBD_StdItfReq>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]
      break;
 800697a:	e016      	b.n	80069aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fc2d 	bl	80071e4 <USBD_StdEPReq>
 800698a:	4603      	mov	r3, r0
 800698c:	73fb      	strb	r3, [r7, #15]
      break;
 800698e:	e00c      	b.n	80069aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006996:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800699a:	b2db      	uxtb	r3, r3
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 fdd8 	bl	8008554 <USBD_LL_StallEP>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73fb      	strb	r3, [r7, #15]
      break;
 80069a8:	bf00      	nop
  }

  return ret;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	460b      	mov	r3, r1
 80069be:	607a      	str	r2, [r7, #4]
 80069c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d16e      	bne.n	8006aaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80069d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80069da:	2b03      	cmp	r3, #3
 80069dc:	f040 8098 	bne.w	8006b10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	689a      	ldr	r2, [r3, #8]
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d913      	bls.n	8006a14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	689a      	ldr	r2, [r3, #8]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	1ad2      	subs	r2, r2, r3
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bf28      	it	cs
 8006a06:	4613      	movcs	r3, r2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f001 f9be 	bl	8007d8e <USBD_CtlContinueRx>
 8006a12:	e07d      	b.n	8006b10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006a1a:	f003 031f 	and.w	r3, r3, #31
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d014      	beq.n	8006a4c <USBD_LL_DataOutStage+0x98>
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d81d      	bhi.n	8006a62 <USBD_LL_DataOutStage+0xae>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <USBD_LL_DataOutStage+0x7c>
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d003      	beq.n	8006a36 <USBD_LL_DataOutStage+0x82>
 8006a2e:	e018      	b.n	8006a62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	75bb      	strb	r3, [r7, #22]
            break;
 8006a34:	e018      	b.n	8006a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	4619      	mov	r1, r3
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fa64 	bl	8006f0e <USBD_CoreFindIF>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75bb      	strb	r3, [r7, #22]
            break;
 8006a4a:	e00d      	b.n	8006a68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa66 	bl	8006f28 <USBD_CoreFindEP>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	75bb      	strb	r3, [r7, #22]
            break;
 8006a60:	e002      	b.n	8006a68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75bb      	strb	r3, [r7, #22]
            break;
 8006a66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a68:	7dbb      	ldrb	r3, [r7, #22]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d119      	bne.n	8006aa2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d113      	bne.n	8006aa2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a7a:	7dba      	ldrb	r2, [r7, #22]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	32ae      	adds	r2, #174	@ 0xae
 8006a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a8a:	7dba      	ldrb	r2, [r7, #22]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a92:	7dba      	ldrb	r2, [r7, #22]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	32ae      	adds	r2, #174	@ 0xae
 8006a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f001 f984 	bl	8007db0 <USBD_CtlSendStatus>
 8006aa8:	e032      	b.n	8006b10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006aaa:	7afb      	ldrb	r3, [r7, #11]
 8006aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fa37 	bl	8006f28 <USBD_CoreFindEP>
 8006aba:	4603      	mov	r3, r0
 8006abc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006abe:	7dbb      	ldrb	r3, [r7, #22]
 8006ac0:	2bff      	cmp	r3, #255	@ 0xff
 8006ac2:	d025      	beq.n	8006b10 <USBD_LL_DataOutStage+0x15c>
 8006ac4:	7dbb      	ldrb	r3, [r7, #22]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d122      	bne.n	8006b10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	d117      	bne.n	8006b06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ad6:	7dba      	ldrb	r2, [r7, #22]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	32ae      	adds	r2, #174	@ 0xae
 8006adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00f      	beq.n	8006b06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006ae6:	7dba      	ldrb	r2, [r7, #22]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006aee:	7dba      	ldrb	r2, [r7, #22]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	32ae      	adds	r2, #174	@ 0xae
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	7afa      	ldrb	r2, [r7, #11]
 8006afc:	4611      	mov	r1, r2
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	4798      	blx	r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d001      	beq.n	8006b10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	e000      	b.n	8006b12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3718      	adds	r7, #24
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b086      	sub	sp, #24
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	460b      	mov	r3, r1
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006b28:	7afb      	ldrb	r3, [r7, #11]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d16f      	bne.n	8006c0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	3314      	adds	r3, #20
 8006b32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d15a      	bne.n	8006bf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	689a      	ldr	r2, [r3, #8]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d914      	bls.n	8006b74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6879      	ldr	r1, [r7, #4]
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f001 f8e6 	bl	8007d32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b66:	2300      	movs	r3, #0
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f001 fd9b 	bl	80086a8 <USBD_LL_PrepareReceive>
 8006b72:	e03f      	b.n	8006bf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	68da      	ldr	r2, [r3, #12]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d11c      	bne.n	8006bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d316      	bcc.n	8006bba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d20f      	bcs.n	8006bba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f001 f8c7 	bl	8007d32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bac:	2300      	movs	r3, #0
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 fd78 	bl	80086a8 <USBD_LL_PrepareReceive>
 8006bb8:	e01c      	b.n	8006bf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d10f      	bne.n	8006be6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006be6:	2180      	movs	r1, #128	@ 0x80
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f001 fcb3 	bl	8008554 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f001 f8f1 	bl	8007dd6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d03a      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fe42 	bl	8006888 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006c0c:	e032      	b.n	8006c74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006c0e:	7afb      	ldrb	r3, [r7, #11]
 8006c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	4619      	mov	r1, r3
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f000 f985 	bl	8006f28 <USBD_CoreFindEP>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c22:	7dfb      	ldrb	r3, [r7, #23]
 8006c24:	2bff      	cmp	r3, #255	@ 0xff
 8006c26:	d025      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d122      	bne.n	8006c74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	d11c      	bne.n	8006c74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006c3a:	7dfa      	ldrb	r2, [r7, #23]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	32ae      	adds	r2, #174	@ 0xae
 8006c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d014      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c4a:	7dfa      	ldrb	r2, [r7, #23]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c52:	7dfa      	ldrb	r2, [r7, #23]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	32ae      	adds	r2, #174	@ 0xae
 8006c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	7afa      	ldrb	r2, [r7, #11]
 8006c60:	4611      	mov	r1, r2
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c6a:	7dbb      	ldrb	r3, [r7, #22]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d001      	beq.n	8006c74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c70:	7dbb      	ldrb	r3, [r7, #22]
 8006c72:	e000      	b.n	8006c76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d014      	beq.n	8006ce4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00e      	beq.n	8006ce4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6852      	ldr	r2, [r2, #4]
 8006cd2:	b2d2      	uxtb	r2, r2
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	4798      	blx	r3
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ce4:	2340      	movs	r3, #64	@ 0x40
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2100      	movs	r1, #0
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 fbed 	bl	80084ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2240      	movs	r2, #64	@ 0x40
 8006cfc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d00:	2340      	movs	r3, #64	@ 0x40
 8006d02:	2200      	movs	r2, #0
 8006d04:	2180      	movs	r1, #128	@ 0x80
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f001 fbdf 	bl	80084ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2240      	movs	r2, #64	@ 0x40
 8006d16:	621a      	str	r2, [r3, #32]

  return ret;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	78fa      	ldrb	r2, [r7, #3]
 8006d32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	370c      	adds	r7, #12
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b083      	sub	sp, #12
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b04      	cmp	r3, #4
 8006d54:	d006      	beq.n	8006d64 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2204      	movs	r2, #4
 8006d68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b083      	sub	sp, #12
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d106      	bne.n	8006d9c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d110      	bne.n	8006de0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00b      	beq.n	8006de0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dce:	69db      	ldr	r3, [r3, #28]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d005      	beq.n	8006de0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dda:	69db      	ldr	r3, [r3, #28]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32ae      	adds	r2, #174	@ 0xae
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e01c      	b.n	8006e46 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b03      	cmp	r3, #3
 8006e16:	d115      	bne.n	8006e44 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32ae      	adds	r2, #174	@ 0xae
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00b      	beq.n	8006e44 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	@ 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	78fa      	ldrb	r2, [r7, #3]
 8006e3e:	4611      	mov	r1, r2
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	32ae      	adds	r2, #174	@ 0xae
 8006e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e01c      	b.n	8006eaa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d115      	bne.n	8006ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	32ae      	adds	r2, #174	@ 0xae
 8006e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32ae      	adds	r2, #174	@ 0xae
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	4611      	mov	r1, r2
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00e      	beq.n	8006f04 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6852      	ldr	r2, [r2, #4]
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b083      	sub	sp, #12
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f1a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006f34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	885b      	ldrh	r3, [r3, #2]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	7812      	ldrb	r2, [r2, #0]
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d91f      	bls.n	8006fa8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f6e:	e013      	b.n	8006f98 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f70:	f107 030a 	add.w	r3, r7, #10
 8006f74:	4619      	mov	r1, r3
 8006f76:	6978      	ldr	r0, [r7, #20]
 8006f78:	f000 f81b 	bl	8006fb2 <USBD_GetNextDesc>
 8006f7c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d108      	bne.n	8006f98 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	789b      	ldrb	r3, [r3, #2]
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d008      	beq.n	8006fa6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	885b      	ldrh	r3, [r3, #2]
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	897b      	ldrh	r3, [r7, #10]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d8e5      	bhi.n	8006f70 <USBD_GetEpDesc+0x2e>
 8006fa4:	e000      	b.n	8006fa8 <USBD_GetEpDesc+0x66>
          break;
 8006fa6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006fa8:	693b      	ldr	r3, [r7, #16]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	7812      	ldrb	r2, [r2, #0]
 8006fc8:	4413      	add	r3, r2
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4413      	add	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b087      	sub	sp, #28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	3301      	adds	r3, #1
 8007000:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007008:	8a3b      	ldrh	r3, [r7, #16]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	b21a      	sxth	r2, r3
 800700e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007012:	4313      	orrs	r3, r2
 8007014:	b21b      	sxth	r3, r3
 8007016:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007018:	89fb      	ldrh	r3, [r7, #14]
}
 800701a:	4618      	mov	r0, r3
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
	...

08007028 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800703e:	2b40      	cmp	r3, #64	@ 0x40
 8007040:	d005      	beq.n	800704e <USBD_StdDevReq+0x26>
 8007042:	2b40      	cmp	r3, #64	@ 0x40
 8007044:	d857      	bhi.n	80070f6 <USBD_StdDevReq+0xce>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00f      	beq.n	800706a <USBD_StdDevReq+0x42>
 800704a:	2b20      	cmp	r3, #32
 800704c:	d153      	bne.n	80070f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	32ae      	adds	r2, #174	@ 0xae
 8007058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
      break;
 8007068:	e04a      	b.n	8007100 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b09      	cmp	r3, #9
 8007070:	d83b      	bhi.n	80070ea <USBD_StdDevReq+0xc2>
 8007072:	a201      	add	r2, pc, #4	@ (adr r2, 8007078 <USBD_StdDevReq+0x50>)
 8007074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007078:	080070cd 	.word	0x080070cd
 800707c:	080070e1 	.word	0x080070e1
 8007080:	080070eb 	.word	0x080070eb
 8007084:	080070d7 	.word	0x080070d7
 8007088:	080070eb 	.word	0x080070eb
 800708c:	080070ab 	.word	0x080070ab
 8007090:	080070a1 	.word	0x080070a1
 8007094:	080070eb 	.word	0x080070eb
 8007098:	080070c3 	.word	0x080070c3
 800709c:	080070b5 	.word	0x080070b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa3c 	bl	8007520 <USBD_GetDescriptor>
          break;
 80070a8:	e024      	b.n	80070f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fbcb 	bl	8007848 <USBD_SetAddress>
          break;
 80070b2:	e01f      	b.n	80070f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fc0a 	bl	80078d0 <USBD_SetConfig>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]
          break;
 80070c0:	e018      	b.n	80070f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fcad 	bl	8007a24 <USBD_GetConfig>
          break;
 80070ca:	e013      	b.n	80070f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fcde 	bl	8007a90 <USBD_GetStatus>
          break;
 80070d4:	e00e      	b.n	80070f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fd0d 	bl	8007af8 <USBD_SetFeature>
          break;
 80070de:	e009      	b.n	80070f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fd31 	bl	8007b4a <USBD_ClrFeature>
          break;
 80070e8:	e004      	b.n	80070f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fd88 	bl	8007c02 <USBD_CtlError>
          break;
 80070f2:	bf00      	nop
      }
      break;
 80070f4:	e004      	b.n	8007100 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fd82 	bl	8007c02 <USBD_CtlError>
      break;
 80070fe:	bf00      	nop
  }

  return ret;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop

0800710c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007122:	2b40      	cmp	r3, #64	@ 0x40
 8007124:	d005      	beq.n	8007132 <USBD_StdItfReq+0x26>
 8007126:	2b40      	cmp	r3, #64	@ 0x40
 8007128:	d852      	bhi.n	80071d0 <USBD_StdItfReq+0xc4>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <USBD_StdItfReq+0x26>
 800712e:	2b20      	cmp	r3, #32
 8007130:	d14e      	bne.n	80071d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007138:	b2db      	uxtb	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	2b02      	cmp	r3, #2
 800713e:	d840      	bhi.n	80071c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	889b      	ldrh	r3, [r3, #4]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b01      	cmp	r3, #1
 8007148:	d836      	bhi.n	80071b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	889b      	ldrh	r3, [r3, #4]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff fedb 	bl	8006f0e <USBD_CoreFindIF>
 8007158:	4603      	mov	r3, r0
 800715a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2bff      	cmp	r3, #255	@ 0xff
 8007160:	d01d      	beq.n	800719e <USBD_StdItfReq+0x92>
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d11a      	bne.n	800719e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007168:	7bba      	ldrb	r2, [r7, #14]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32ae      	adds	r2, #174	@ 0xae
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00f      	beq.n	8007198 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007178:	7bba      	ldrb	r2, [r7, #14]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007180:	7bba      	ldrb	r2, [r7, #14]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	32ae      	adds	r2, #174	@ 0xae
 8007186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
 8007192:	4603      	mov	r3, r0
 8007194:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007196:	e004      	b.n	80071a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800719c:	e001      	b.n	80071a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800719e:	2303      	movs	r3, #3
 80071a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	88db      	ldrh	r3, [r3, #6]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d110      	bne.n	80071cc <USBD_StdItfReq+0xc0>
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10d      	bne.n	80071cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fdfd 	bl	8007db0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80071b6:	e009      	b.n	80071cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80071b8:	6839      	ldr	r1, [r7, #0]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fd21 	bl	8007c02 <USBD_CtlError>
          break;
 80071c0:	e004      	b.n	80071cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fd1c 	bl	8007c02 <USBD_CtlError>
          break;
 80071ca:	e000      	b.n	80071ce <USBD_StdItfReq+0xc2>
          break;
 80071cc:	bf00      	nop
      }
      break;
 80071ce:	e004      	b.n	80071da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fd15 	bl	8007c02 <USBD_CtlError>
      break;
 80071d8:	bf00      	nop
  }

  return ret;
 80071da:	7bfb      	ldrb	r3, [r7, #15]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	889b      	ldrh	r3, [r3, #4]
 80071f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007200:	2b40      	cmp	r3, #64	@ 0x40
 8007202:	d007      	beq.n	8007214 <USBD_StdEPReq+0x30>
 8007204:	2b40      	cmp	r3, #64	@ 0x40
 8007206:	f200 817f 	bhi.w	8007508 <USBD_StdEPReq+0x324>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d02a      	beq.n	8007264 <USBD_StdEPReq+0x80>
 800720e:	2b20      	cmp	r3, #32
 8007210:	f040 817a 	bne.w	8007508 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff fe85 	bl	8006f28 <USBD_CoreFindEP>
 800721e:	4603      	mov	r3, r0
 8007220:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007222:	7b7b      	ldrb	r3, [r7, #13]
 8007224:	2bff      	cmp	r3, #255	@ 0xff
 8007226:	f000 8174 	beq.w	8007512 <USBD_StdEPReq+0x32e>
 800722a:	7b7b      	ldrb	r3, [r7, #13]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f040 8170 	bne.w	8007512 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007232:	7b7a      	ldrb	r2, [r7, #13]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800723a:	7b7a      	ldrb	r2, [r7, #13]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	32ae      	adds	r2, #174	@ 0xae
 8007240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 8163 	beq.w	8007512 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800724c:	7b7a      	ldrb	r2, [r7, #13]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32ae      	adds	r2, #174	@ 0xae
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	4798      	blx	r3
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007262:	e156      	b.n	8007512 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d008      	beq.n	800727e <USBD_StdEPReq+0x9a>
 800726c:	2b03      	cmp	r3, #3
 800726e:	f300 8145 	bgt.w	80074fc <USBD_StdEPReq+0x318>
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 809b 	beq.w	80073ae <USBD_StdEPReq+0x1ca>
 8007278:	2b01      	cmp	r3, #1
 800727a:	d03c      	beq.n	80072f6 <USBD_StdEPReq+0x112>
 800727c:	e13e      	b.n	80074fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d002      	beq.n	8007290 <USBD_StdEPReq+0xac>
 800728a:	2b03      	cmp	r3, #3
 800728c:	d016      	beq.n	80072bc <USBD_StdEPReq+0xd8>
 800728e:	e02c      	b.n	80072ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00d      	beq.n	80072b2 <USBD_StdEPReq+0xce>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b80      	cmp	r3, #128	@ 0x80
 800729a:	d00a      	beq.n	80072b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f957 	bl	8008554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072a6:	2180      	movs	r1, #128	@ 0x80
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f953 	bl	8008554 <USBD_LL_StallEP>
 80072ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072b0:	e020      	b.n	80072f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fca4 	bl	8007c02 <USBD_CtlError>
              break;
 80072ba:	e01b      	b.n	80072f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	885b      	ldrh	r3, [r3, #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10e      	bne.n	80072e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00b      	beq.n	80072e2 <USBD_StdEPReq+0xfe>
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d008      	beq.n	80072e2 <USBD_StdEPReq+0xfe>
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	88db      	ldrh	r3, [r3, #6]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d104      	bne.n	80072e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f939 	bl	8008554 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fd64 	bl	8007db0 <USBD_CtlSendStatus>

              break;
 80072e8:	e004      	b.n	80072f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80072ea:	6839      	ldr	r1, [r7, #0]
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fc88 	bl	8007c02 <USBD_CtlError>
              break;
 80072f2:	bf00      	nop
          }
          break;
 80072f4:	e107      	b.n	8007506 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d002      	beq.n	8007308 <USBD_StdEPReq+0x124>
 8007302:	2b03      	cmp	r3, #3
 8007304:	d016      	beq.n	8007334 <USBD_StdEPReq+0x150>
 8007306:	e04b      	b.n	80073a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00d      	beq.n	800732a <USBD_StdEPReq+0x146>
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	2b80      	cmp	r3, #128	@ 0x80
 8007312:	d00a      	beq.n	800732a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007314:	7bbb      	ldrb	r3, [r7, #14]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 f91b 	bl	8008554 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800731e:	2180      	movs	r1, #128	@ 0x80
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 f917 	bl	8008554 <USBD_LL_StallEP>
 8007326:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007328:	e040      	b.n	80073ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fc68 	bl	8007c02 <USBD_CtlError>
              break;
 8007332:	e03b      	b.n	80073ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	885b      	ldrh	r3, [r3, #2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d136      	bne.n	80073aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007346:	7bbb      	ldrb	r3, [r7, #14]
 8007348:	4619      	mov	r1, r3
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f001 f921 	bl	8008592 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fd2d 	bl	8007db0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fde4 	bl	8006f28 <USBD_CoreFindEP>
 8007360:	4603      	mov	r3, r0
 8007362:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007364:	7b7b      	ldrb	r3, [r7, #13]
 8007366:	2bff      	cmp	r3, #255	@ 0xff
 8007368:	d01f      	beq.n	80073aa <USBD_StdEPReq+0x1c6>
 800736a:	7b7b      	ldrb	r3, [r7, #13]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11c      	bne.n	80073aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007370:	7b7a      	ldrb	r2, [r7, #13]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007378:	7b7a      	ldrb	r2, [r7, #13]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	32ae      	adds	r2, #174	@ 0xae
 800737e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d010      	beq.n	80073aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007388:	7b7a      	ldrb	r2, [r7, #13]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	32ae      	adds	r2, #174	@ 0xae
 800738e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
 800739a:	4603      	mov	r3, r0
 800739c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800739e:	e004      	b.n	80073aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fc2d 	bl	8007c02 <USBD_CtlError>
              break;
 80073a8:	e000      	b.n	80073ac <USBD_StdEPReq+0x1c8>
              break;
 80073aa:	bf00      	nop
          }
          break;
 80073ac:	e0ab      	b.n	8007506 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d002      	beq.n	80073c0 <USBD_StdEPReq+0x1dc>
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d032      	beq.n	8007424 <USBD_StdEPReq+0x240>
 80073be:	e097      	b.n	80074f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c0:	7bbb      	ldrb	r3, [r7, #14]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <USBD_StdEPReq+0x1f2>
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b80      	cmp	r3, #128	@ 0x80
 80073ca:	d004      	beq.n	80073d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fc17 	bl	8007c02 <USBD_CtlError>
                break;
 80073d4:	e091      	b.n	80074fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	da0b      	bge.n	80073f6 <USBD_StdEPReq+0x212>
 80073de:	7bbb      	ldrb	r3, [r7, #14]
 80073e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073e4:	4613      	mov	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	3310      	adds	r3, #16
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	4413      	add	r3, r2
 80073f2:	3304      	adds	r3, #4
 80073f4:	e00b      	b.n	800740e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073f6:	7bbb      	ldrb	r3, [r7, #14]
 80073f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	3304      	adds	r3, #4
 800740e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	2202      	movs	r2, #2
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fc6d 	bl	8007cfc <USBD_CtlSendData>
              break;
 8007422:	e06a      	b.n	80074fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007424:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007428:	2b00      	cmp	r3, #0
 800742a:	da11      	bge.n	8007450 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	f003 020f 	and.w	r2, r3, #15
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	440b      	add	r3, r1
 800743e:	3324      	adds	r3, #36	@ 0x24
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d117      	bne.n	8007476 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007446:	6839      	ldr	r1, [r7, #0]
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 fbda 	bl	8007c02 <USBD_CtlError>
                  break;
 800744e:	e054      	b.n	80074fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	f003 020f 	and.w	r2, r3, #15
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fbc7 	bl	8007c02 <USBD_CtlError>
                  break;
 8007474:	e041      	b.n	80074fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007476:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da0b      	bge.n	8007496 <USBD_StdEPReq+0x2b2>
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	3310      	adds	r3, #16
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	3304      	adds	r3, #4
 8007494:	e00b      	b.n	80074ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007496:	7bbb      	ldrb	r3, [r7, #14]
 8007498:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	3304      	adds	r3, #4
 80074ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <USBD_StdEPReq+0x2d8>
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	2b80      	cmp	r3, #128	@ 0x80
 80074ba:	d103      	bne.n	80074c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	2200      	movs	r2, #0
 80074c0:	601a      	str	r2, [r3, #0]
 80074c2:	e00e      	b.n	80074e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 f881 	bl	80085d0 <USBD_LL_IsStallEP>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2201      	movs	r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e002      	b.n	80074e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2200      	movs	r2, #0
 80074e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2202      	movs	r2, #2
 80074e6:	4619      	mov	r1, r3
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fc07 	bl	8007cfc <USBD_CtlSendData>
              break;
 80074ee:	e004      	b.n	80074fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fb85 	bl	8007c02 <USBD_CtlError>
              break;
 80074f8:	bf00      	nop
          }
          break;
 80074fa:	e004      	b.n	8007506 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fb7f 	bl	8007c02 <USBD_CtlError>
          break;
 8007504:	bf00      	nop
      }
      break;
 8007506:	e005      	b.n	8007514 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fb79 	bl	8007c02 <USBD_CtlError>
      break;
 8007510:	e000      	b.n	8007514 <USBD_StdEPReq+0x330>
      break;
 8007512:	bf00      	nop
  }

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800752a:	2300      	movs	r3, #0
 800752c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	885b      	ldrh	r3, [r3, #2]
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	b29b      	uxth	r3, r3
 800753e:	3b01      	subs	r3, #1
 8007540:	2b0e      	cmp	r3, #14
 8007542:	f200 8152 	bhi.w	80077ea <USBD_GetDescriptor+0x2ca>
 8007546:	a201      	add	r2, pc, #4	@ (adr r2, 800754c <USBD_GetDescriptor+0x2c>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	080075bd 	.word	0x080075bd
 8007550:	080075d5 	.word	0x080075d5
 8007554:	08007615 	.word	0x08007615
 8007558:	080077eb 	.word	0x080077eb
 800755c:	080077eb 	.word	0x080077eb
 8007560:	0800778b 	.word	0x0800778b
 8007564:	080077b7 	.word	0x080077b7
 8007568:	080077eb 	.word	0x080077eb
 800756c:	080077eb 	.word	0x080077eb
 8007570:	080077eb 	.word	0x080077eb
 8007574:	080077eb 	.word	0x080077eb
 8007578:	080077eb 	.word	0x080077eb
 800757c:	080077eb 	.word	0x080077eb
 8007580:	080077eb 	.word	0x080077eb
 8007584:	08007589 	.word	0x08007589
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800758e:	69db      	ldr	r3, [r3, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00b      	beq.n	80075ac <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	7c12      	ldrb	r2, [r2, #16]
 80075a0:	f107 0108 	add.w	r1, r7, #8
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
 80075a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075aa:	e126      	b.n	80077fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fb27 	bl	8007c02 <USBD_CtlError>
        err++;
 80075b4:	7afb      	ldrb	r3, [r7, #11]
 80075b6:	3301      	adds	r3, #1
 80075b8:	72fb      	strb	r3, [r7, #11]
      break;
 80075ba:	e11e      	b.n	80077fa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7c12      	ldrb	r2, [r2, #16]
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
      break;
 80075d2:	e112      	b.n	80077fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	7c1b      	ldrb	r3, [r3, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10d      	bne.n	80075f8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075e4:	f107 0208 	add.w	r2, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3301      	adds	r3, #1
 80075f2:	2202      	movs	r2, #2
 80075f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80075f6:	e100      	b.n	80077fa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007600:	f107 0208 	add.w	r2, r7, #8
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
 8007608:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	2202      	movs	r2, #2
 8007610:	701a      	strb	r2, [r3, #0]
      break;
 8007612:	e0f2      	b.n	80077fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	885b      	ldrh	r3, [r3, #2]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b05      	cmp	r3, #5
 800761c:	f200 80ac 	bhi.w	8007778 <USBD_GetDescriptor+0x258>
 8007620:	a201      	add	r2, pc, #4	@ (adr r2, 8007628 <USBD_GetDescriptor+0x108>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	08007641 	.word	0x08007641
 800762c:	08007675 	.word	0x08007675
 8007630:	080076a9 	.word	0x080076a9
 8007634:	080076dd 	.word	0x080076dd
 8007638:	08007711 	.word	0x08007711
 800763c:	08007745 	.word	0x08007745
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	7c12      	ldrb	r2, [r2, #16]
 8007658:	f107 0108 	add.w	r1, r7, #8
 800765c:	4610      	mov	r0, r2
 800765e:	4798      	blx	r3
 8007660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007662:	e091      	b.n	8007788 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 facb 	bl	8007c02 <USBD_CtlError>
            err++;
 800766c:	7afb      	ldrb	r3, [r7, #11]
 800766e:	3301      	adds	r3, #1
 8007670:	72fb      	strb	r3, [r7, #11]
          break;
 8007672:	e089      	b.n	8007788 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00b      	beq.n	8007698 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	7c12      	ldrb	r2, [r2, #16]
 800768c:	f107 0108 	add.w	r1, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007696:	e077      	b.n	8007788 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fab1 	bl	8007c02 <USBD_CtlError>
            err++;
 80076a0:	7afb      	ldrb	r3, [r7, #11]
 80076a2:	3301      	adds	r3, #1
 80076a4:	72fb      	strb	r3, [r7, #11]
          break;
 80076a6:	e06f      	b.n	8007788 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	7c12      	ldrb	r2, [r2, #16]
 80076c0:	f107 0108 	add.w	r1, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ca:	e05d      	b.n	8007788 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa97 	bl	8007c02 <USBD_CtlError>
            err++;
 80076d4:	7afb      	ldrb	r3, [r7, #11]
 80076d6:	3301      	adds	r3, #1
 80076d8:	72fb      	strb	r3, [r7, #11]
          break;
 80076da:	e055      	b.n	8007788 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	7c12      	ldrb	r2, [r2, #16]
 80076f4:	f107 0108 	add.w	r1, r7, #8
 80076f8:	4610      	mov	r0, r2
 80076fa:	4798      	blx	r3
 80076fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076fe:	e043      	b.n	8007788 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa7d 	bl	8007c02 <USBD_CtlError>
            err++;
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	3301      	adds	r3, #1
 800770c:	72fb      	strb	r3, [r7, #11]
          break;
 800770e:	e03b      	b.n	8007788 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7c12      	ldrb	r2, [r2, #16]
 8007728:	f107 0108 	add.w	r1, r7, #8
 800772c:	4610      	mov	r0, r2
 800772e:	4798      	blx	r3
 8007730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007732:	e029      	b.n	8007788 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007734:	6839      	ldr	r1, [r7, #0]
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fa63 	bl	8007c02 <USBD_CtlError>
            err++;
 800773c:	7afb      	ldrb	r3, [r7, #11]
 800773e:	3301      	adds	r3, #1
 8007740:	72fb      	strb	r3, [r7, #11]
          break;
 8007742:	e021      	b.n	8007788 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	7c12      	ldrb	r2, [r2, #16]
 800775c:	f107 0108 	add.w	r1, r7, #8
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007766:	e00f      	b.n	8007788 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa49 	bl	8007c02 <USBD_CtlError>
            err++;
 8007770:	7afb      	ldrb	r3, [r7, #11]
 8007772:	3301      	adds	r3, #1
 8007774:	72fb      	strb	r3, [r7, #11]
          break;
 8007776:	e007      	b.n	8007788 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fa41 	bl	8007c02 <USBD_CtlError>
          err++;
 8007780:	7afb      	ldrb	r3, [r7, #11]
 8007782:	3301      	adds	r3, #1
 8007784:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007786:	bf00      	nop
      }
      break;
 8007788:	e037      	b.n	80077fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7c1b      	ldrb	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d109      	bne.n	80077a6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800779a:	f107 0208 	add.w	r2, r7, #8
 800779e:	4610      	mov	r0, r2
 80077a0:	4798      	blx	r3
 80077a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077a4:	e029      	b.n	80077fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa2a 	bl	8007c02 <USBD_CtlError>
        err++;
 80077ae:	7afb      	ldrb	r3, [r7, #11]
 80077b0:	3301      	adds	r3, #1
 80077b2:	72fb      	strb	r3, [r7, #11]
      break;
 80077b4:	e021      	b.n	80077fa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	7c1b      	ldrb	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10d      	bne.n	80077da <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077c6:	f107 0208 	add.w	r2, r7, #8
 80077ca:	4610      	mov	r0, r2
 80077cc:	4798      	blx	r3
 80077ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3301      	adds	r3, #1
 80077d4:	2207      	movs	r2, #7
 80077d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80077d8:	e00f      	b.n	80077fa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fa10 	bl	8007c02 <USBD_CtlError>
        err++;
 80077e2:	7afb      	ldrb	r3, [r7, #11]
 80077e4:	3301      	adds	r3, #1
 80077e6:	72fb      	strb	r3, [r7, #11]
      break;
 80077e8:	e007      	b.n	80077fa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 fa08 	bl	8007c02 <USBD_CtlError>
      err++;
 80077f2:	7afb      	ldrb	r3, [r7, #11]
 80077f4:	3301      	adds	r3, #1
 80077f6:	72fb      	strb	r3, [r7, #11]
      break;
 80077f8:	bf00      	nop
  }

  if (err != 0U)
 80077fa:	7afb      	ldrb	r3, [r7, #11]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11e      	bne.n	800783e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	88db      	ldrh	r3, [r3, #6]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d016      	beq.n	8007836 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007808:	893b      	ldrh	r3, [r7, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00e      	beq.n	800782c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	88da      	ldrh	r2, [r3, #6]
 8007812:	893b      	ldrh	r3, [r7, #8]
 8007814:	4293      	cmp	r3, r2
 8007816:	bf28      	it	cs
 8007818:	4613      	movcs	r3, r2
 800781a:	b29b      	uxth	r3, r3
 800781c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800781e:	893b      	ldrh	r3, [r7, #8]
 8007820:	461a      	mov	r2, r3
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fa69 	bl	8007cfc <USBD_CtlSendData>
 800782a:	e009      	b.n	8007840 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f9e7 	bl	8007c02 <USBD_CtlError>
 8007834:	e004      	b.n	8007840 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 faba 	bl	8007db0 <USBD_CtlSendStatus>
 800783c:	e000      	b.n	8007840 <USBD_GetDescriptor+0x320>
    return;
 800783e:	bf00      	nop
  }
}
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop

08007848 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	889b      	ldrh	r3, [r3, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d131      	bne.n	80078be <USBD_SetAddress+0x76>
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	88db      	ldrh	r3, [r3, #6]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d12d      	bne.n	80078be <USBD_SetAddress+0x76>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	2b7f      	cmp	r3, #127	@ 0x7f
 8007868:	d829      	bhi.n	80078be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	885b      	ldrh	r3, [r3, #2]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007874:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d104      	bne.n	800788c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f9bc 	bl	8007c02 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	e01d      	b.n	80078c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7bfa      	ldrb	r2, [r7, #15]
 8007890:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	4619      	mov	r1, r3
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fec5 	bl	8008628 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa86 	bl	8007db0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b2:	e009      	b.n	80078c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078bc:	e004      	b.n	80078c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f99e 	bl	8007c02 <USBD_CtlError>
  }
}
 80078c6:	bf00      	nop
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	885b      	ldrh	r3, [r3, #2]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	4b4e      	ldr	r3, [pc, #312]	@ (8007a20 <USBD_SetConfig+0x150>)
 80078e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80078e8:	4b4d      	ldr	r3, [pc, #308]	@ (8007a20 <USBD_SetConfig+0x150>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d905      	bls.n	80078fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f985 	bl	8007c02 <USBD_CtlError>
    return USBD_FAIL;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e08c      	b.n	8007a16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d002      	beq.n	800790e <USBD_SetConfig+0x3e>
 8007908:	2b03      	cmp	r3, #3
 800790a:	d029      	beq.n	8007960 <USBD_SetConfig+0x90>
 800790c:	e075      	b.n	80079fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800790e:	4b44      	ldr	r3, [pc, #272]	@ (8007a20 <USBD_SetConfig+0x150>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d020      	beq.n	8007958 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007916:	4b42      	ldr	r3, [pc, #264]	@ (8007a20 <USBD_SetConfig+0x150>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007920:	4b3f      	ldr	r3, [pc, #252]	@ (8007a20 <USBD_SetConfig+0x150>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fe ffb9 	bl	800689e <USBD_SetClassConfig>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007936:	6839      	ldr	r1, [r7, #0]
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f962 	bl	8007c02 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2202      	movs	r2, #2
 8007942:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007946:	e065      	b.n	8007a14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fa31 	bl	8007db0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2203      	movs	r2, #3
 8007952:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007956:	e05d      	b.n	8007a14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fa29 	bl	8007db0 <USBD_CtlSendStatus>
      break;
 800795e:	e059      	b.n	8007a14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007960:	4b2f      	ldr	r3, [pc, #188]	@ (8007a20 <USBD_SetConfig+0x150>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d112      	bne.n	800798e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007970:	4b2b      	ldr	r3, [pc, #172]	@ (8007a20 <USBD_SetConfig+0x150>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800797a:	4b29      	ldr	r3, [pc, #164]	@ (8007a20 <USBD_SetConfig+0x150>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fe ffa8 	bl	80068d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fa12 	bl	8007db0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800798c:	e042      	b.n	8007a14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800798e:	4b24      	ldr	r3, [pc, #144]	@ (8007a20 <USBD_SetConfig+0x150>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	429a      	cmp	r2, r3
 800799a:	d02a      	beq.n	80079f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fe ff96 	bl	80068d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80079aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007a20 <USBD_SetConfig+0x150>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a20 <USBD_SetConfig+0x150>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fe ff6f 	bl	800689e <USBD_SetClassConfig>
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00f      	beq.n	80079ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f918 	bl	8007c02 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fe ff7b 	bl	80068d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80079e8:	e014      	b.n	8007a14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f9e0 	bl	8007db0 <USBD_CtlSendStatus>
      break;
 80079f0:	e010      	b.n	8007a14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9dc 	bl	8007db0 <USBD_CtlSendStatus>
      break;
 80079f8:	e00c      	b.n	8007a14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f900 	bl	8007c02 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a02:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <USBD_SetConfig+0x150>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	4619      	mov	r1, r3
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7fe ff64 	bl	80068d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	73fb      	strb	r3, [r7, #15]
      break;
 8007a12:	bf00      	nop
  }

  return ret;
 8007a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000704 	.word	0x20000704

08007a24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	88db      	ldrh	r3, [r3, #6]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d004      	beq.n	8007a40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f8e2 	bl	8007c02 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a3e:	e023      	b.n	8007a88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	dc02      	bgt.n	8007a52 <USBD_GetConfig+0x2e>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	dc03      	bgt.n	8007a58 <USBD_GetConfig+0x34>
 8007a50:	e015      	b.n	8007a7e <USBD_GetConfig+0x5a>
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d00b      	beq.n	8007a6e <USBD_GetConfig+0x4a>
 8007a56:	e012      	b.n	8007a7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	3308      	adds	r3, #8
 8007a62:	2201      	movs	r2, #1
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f948 	bl	8007cfc <USBD_CtlSendData>
        break;
 8007a6c:	e00c      	b.n	8007a88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	2201      	movs	r2, #1
 8007a74:	4619      	mov	r1, r3
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 f940 	bl	8007cfc <USBD_CtlSendData>
        break;
 8007a7c:	e004      	b.n	8007a88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a7e:	6839      	ldr	r1, [r7, #0]
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 f8be 	bl	8007c02 <USBD_CtlError>
        break;
 8007a86:	bf00      	nop
}
 8007a88:	bf00      	nop
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d81e      	bhi.n	8007ae6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	88db      	ldrh	r3, [r3, #6]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d004      	beq.n	8007aba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f8a5 	bl	8007c02 <USBD_CtlError>
        break;
 8007ab8:	e01a      	b.n	8007af0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f043 0202 	orr.w	r2, r3, #2
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	330c      	adds	r3, #12
 8007ada:	2202      	movs	r2, #2
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f90c 	bl	8007cfc <USBD_CtlSendData>
      break;
 8007ae4:	e004      	b.n	8007af0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f88a 	bl	8007c02 <USBD_CtlError>
      break;
 8007aee:	bf00      	nop
  }
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d107      	bne.n	8007b1a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f94c 	bl	8007db0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007b18:	e013      	b.n	8007b42 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	885b      	ldrh	r3, [r3, #2]
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d10b      	bne.n	8007b3a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	889b      	ldrh	r3, [r3, #4]
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f93c 	bl	8007db0 <USBD_CtlSendStatus>
}
 8007b38:	e003      	b.n	8007b42 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f860 	bl	8007c02 <USBD_CtlError>
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b082      	sub	sp, #8
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d80b      	bhi.n	8007b7a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	885b      	ldrh	r3, [r3, #2]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d10c      	bne.n	8007b84 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f91c 	bl	8007db0 <USBD_CtlSendStatus>
      }
      break;
 8007b78:	e004      	b.n	8007b84 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 f840 	bl	8007c02 <USBD_CtlError>
      break;
 8007b82:	e000      	b.n	8007b86 <USBD_ClrFeature+0x3c>
      break;
 8007b84:	bf00      	nop
  }
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	781a      	ldrb	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	781a      	ldrb	r2, [r3, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f7ff fa16 	bl	8006fea <SWAPBYTE>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f7ff fa09 	bl	8006fea <SWAPBYTE>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461a      	mov	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3301      	adds	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	3301      	adds	r3, #1
 8007bea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007bec:	68f8      	ldr	r0, [r7, #12]
 8007bee:	f7ff f9fc 	bl	8006fea <SWAPBYTE>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	80da      	strh	r2, [r3, #6]
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007c0c:	2180      	movs	r1, #128	@ 0x80
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fca0 	bl	8008554 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007c14:	2100      	movs	r1, #0
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fc9c 	bl	8008554 <USBD_LL_StallEP>
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d042      	beq.n	8007cc0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007c3e:	6938      	ldr	r0, [r7, #16]
 8007c40:	f000 f842 	bl	8007cc8 <USBD_GetLen>
 8007c44:	4603      	mov	r3, r0
 8007c46:	3301      	adds	r3, #1
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c4e:	d808      	bhi.n	8007c62 <USBD_GetString+0x3e>
 8007c50:	6938      	ldr	r0, [r7, #16]
 8007c52:	f000 f839 	bl	8007cc8 <USBD_GetLen>
 8007c56:	4603      	mov	r3, r0
 8007c58:	3301      	adds	r3, #1
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	e001      	b.n	8007c66 <USBD_GetString+0x42>
 8007c62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c6a:	7dfb      	ldrb	r3, [r7, #23]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	4413      	add	r3, r2
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7812      	ldrb	r2, [r2, #0]
 8007c74:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	4413      	add	r3, r2
 8007c82:	2203      	movs	r2, #3
 8007c84:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c8c:	e013      	b.n	8007cb6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	4413      	add	r3, r2
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]
    idx++;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	4413      	add	r3, r2
 8007cac:	2200      	movs	r2, #0
 8007cae:	701a      	strb	r2, [r3, #0]
    idx++;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e7      	bne.n	8007c8e <USBD_GetString+0x6a>
 8007cbe:	e000      	b.n	8007cc2 <USBD_GetString+0x9e>
    return;
 8007cc0:	bf00      	nop
  }
}
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007cd8:	e005      	b.n	8007ce6 <USBD_GetLen+0x1e>
  {
    len++;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f5      	bne.n	8007cda <USBD_GetLen+0x12>
  }

  return len;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	2100      	movs	r1, #0
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fc9f 	bl	8008666 <USBD_LL_Transmit>

  return USBD_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	2100      	movs	r1, #0
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 fc8e 	bl	8008666 <USBD_LL_Transmit>

  return USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2203      	movs	r2, #3
 8007d64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fc92 	bl	80086a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	2100      	movs	r1, #0
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fc81 	bl	80086a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2204      	movs	r2, #4
 8007dbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fc4d 	bl	8008666 <USBD_LL_Transmit>

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2205      	movs	r2, #5
 8007de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007de6:	2300      	movs	r3, #0
 8007de8:	2200      	movs	r2, #0
 8007dea:	2100      	movs	r1, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc5b 	bl	80086a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007e00:	2201      	movs	r2, #1
 8007e02:	4912      	ldr	r1, [pc, #72]	@ (8007e4c <MX_USB_DEVICE_Init+0x50>)
 8007e04:	4812      	ldr	r0, [pc, #72]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e06:	f7fe fccd 	bl	80067a4 <USBD_Init>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e10:	f7f8 fb32 	bl	8000478 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007e14:	490f      	ldr	r1, [pc, #60]	@ (8007e54 <MX_USB_DEVICE_Init+0x58>)
 8007e16:	480e      	ldr	r0, [pc, #56]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e18:	f7fe fcf4 	bl	8006804 <USBD_RegisterClass>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e22:	f7f8 fb29 	bl	8000478 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007e26:	490c      	ldr	r1, [pc, #48]	@ (8007e58 <MX_USB_DEVICE_Init+0x5c>)
 8007e28:	4809      	ldr	r0, [pc, #36]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e2a:	f7fe fbeb 	bl	8006604 <USBD_CDC_RegisterInterface>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e34:	f7f8 fb20 	bl	8000478 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007e38:	4805      	ldr	r0, [pc, #20]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e3a:	f7fe fd19 	bl	8006870 <USBD_Start>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e44:	f7f8 fb18 	bl	8000478 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  //HAL_PWREx_EnableUSBVoltageDetector();

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e48:	bf00      	nop
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	200000ac 	.word	0x200000ac
 8007e50:	20000708 	.word	0x20000708
 8007e54:	20000018 	.word	0x20000018
 8007e58:	20000098 	.word	0x20000098

08007e5c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007e60:	2200      	movs	r2, #0
 8007e62:	4905      	ldr	r1, [pc, #20]	@ (8007e78 <CDC_Init_HS+0x1c>)
 8007e64:	4805      	ldr	r0, [pc, #20]	@ (8007e7c <CDC_Init_HS+0x20>)
 8007e66:	f7fe fbe7 	bl	8006638 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007e6a:	4905      	ldr	r1, [pc, #20]	@ (8007e80 <CDC_Init_HS+0x24>)
 8007e6c:	4803      	ldr	r0, [pc, #12]	@ (8007e7c <CDC_Init_HS+0x20>)
 8007e6e:	f7fe fc05 	bl	800667c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e72:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200011e4 	.word	0x200011e4
 8007e7c:	20000708 	.word	0x20000708
 8007e80:	200009e4 	.word	0x200009e4

08007e84 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8007e88:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b23      	cmp	r3, #35	@ 0x23
 8007ea8:	d84a      	bhi.n	8007f40 <CDC_Control_HS+0xac>
 8007eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <CDC_Control_HS+0x1c>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f41 	.word	0x08007f41
 8007eb4:	08007f41 	.word	0x08007f41
 8007eb8:	08007f41 	.word	0x08007f41
 8007ebc:	08007f41 	.word	0x08007f41
 8007ec0:	08007f41 	.word	0x08007f41
 8007ec4:	08007f41 	.word	0x08007f41
 8007ec8:	08007f41 	.word	0x08007f41
 8007ecc:	08007f41 	.word	0x08007f41
 8007ed0:	08007f41 	.word	0x08007f41
 8007ed4:	08007f41 	.word	0x08007f41
 8007ed8:	08007f41 	.word	0x08007f41
 8007edc:	08007f41 	.word	0x08007f41
 8007ee0:	08007f41 	.word	0x08007f41
 8007ee4:	08007f41 	.word	0x08007f41
 8007ee8:	08007f41 	.word	0x08007f41
 8007eec:	08007f41 	.word	0x08007f41
 8007ef0:	08007f41 	.word	0x08007f41
 8007ef4:	08007f41 	.word	0x08007f41
 8007ef8:	08007f41 	.word	0x08007f41
 8007efc:	08007f41 	.word	0x08007f41
 8007f00:	08007f41 	.word	0x08007f41
 8007f04:	08007f41 	.word	0x08007f41
 8007f08:	08007f41 	.word	0x08007f41
 8007f0c:	08007f41 	.word	0x08007f41
 8007f10:	08007f41 	.word	0x08007f41
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f41 	.word	0x08007f41
 8007f20:	08007f41 	.word	0x08007f41
 8007f24:	08007f41 	.word	0x08007f41
 8007f28:	08007f41 	.word	0x08007f41
 8007f2c:	08007f41 	.word	0x08007f41
 8007f30:	08007f41 	.word	0x08007f41
 8007f34:	08007f41 	.word	0x08007f41
 8007f38:	08007f41 	.word	0x08007f41
 8007f3c:	08007f41 	.word	0x08007f41
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f40:	bf00      	nop
  }

  return (USBD_OK);
 8007f42:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007f5a:	6879      	ldr	r1, [r7, #4]
 8007f5c:	4805      	ldr	r0, [pc, #20]	@ (8007f74 <CDC_Receive_HS+0x24>)
 8007f5e:	f7fe fb8d 	bl	800667c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007f62:	4804      	ldr	r0, [pc, #16]	@ (8007f74 <CDC_Receive_HS+0x24>)
 8007f64:	f7fe fbe8 	bl	8006738 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f68:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000708 	.word	0x20000708

08007f78 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */



  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8007f88:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc8 <CDC_Transmit_HS+0x50>)
 8007f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f8e:	60bb      	str	r3, [r7, #8]

  if (hcdc == NULL)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d101      	bne.n	8007f9a <CDC_Transmit_HS+0x22>
    		return USBD_FAIL;
 8007f96:	2303      	movs	r3, #3
 8007f98:	e012      	b.n	8007fc0 <CDC_Transmit_HS+0x48>

  if (hcdc->TxState != 0){
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <CDC_Transmit_HS+0x30>
    return USBD_BUSY;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e00b      	b.n	8007fc0 <CDC_Transmit_HS+0x48>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8007fa8:	887b      	ldrh	r3, [r7, #2]
 8007faa:	461a      	mov	r2, r3
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	4806      	ldr	r0, [pc, #24]	@ (8007fc8 <CDC_Transmit_HS+0x50>)
 8007fb0:	f7fe fb42 	bl	8006638 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8007fb4:	4804      	ldr	r0, [pc, #16]	@ (8007fc8 <CDC_Transmit_HS+0x50>)
 8007fb6:	f7fe fb7f 	bl	80066b8 <USBD_CDC_TransmitPacket>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20000708 	.word	0x20000708

08007fcc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8007fde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
	...

08007ff0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2212      	movs	r2, #18
 8008000:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008002:	4b03      	ldr	r3, [pc, #12]	@ (8008010 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008004:	4618      	mov	r0, r3
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	200000cc 	.word	0x200000cc

08008014 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	6039      	str	r1, [r7, #0]
 800801e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2204      	movs	r2, #4
 8008024:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008026:	4b03      	ldr	r3, [pc, #12]	@ (8008034 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	200000e0 	.word	0x200000e0

08008038 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	6039      	str	r1, [r7, #0]
 8008042:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4907      	ldr	r1, [pc, #28]	@ (800806c <USBD_HS_ProductStrDescriptor+0x34>)
 800804e:	4808      	ldr	r0, [pc, #32]	@ (8008070 <USBD_HS_ProductStrDescriptor+0x38>)
 8008050:	f7ff fde8 	bl	8007c24 <USBD_GetString>
 8008054:	e004      	b.n	8008060 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4904      	ldr	r1, [pc, #16]	@ (800806c <USBD_HS_ProductStrDescriptor+0x34>)
 800805a:	4805      	ldr	r0, [pc, #20]	@ (8008070 <USBD_HS_ProductStrDescriptor+0x38>)
 800805c:	f7ff fde2 	bl	8007c24 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008060:	4b02      	ldr	r3, [pc, #8]	@ (800806c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	200019e4 	.word	0x200019e4
 8008070:	0800881c 	.word	0x0800881c

08008074 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	6039      	str	r1, [r7, #0]
 800807e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	4904      	ldr	r1, [pc, #16]	@ (8008094 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008084:	4804      	ldr	r0, [pc, #16]	@ (8008098 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8008086:	f7ff fdcd 	bl	8007c24 <USBD_GetString>
  return USBD_StrDesc;
 800808a:	4b02      	ldr	r3, [pc, #8]	@ (8008094 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	200019e4 	.word	0x200019e4
 8008098:	08008834 	.word	0x08008834

0800809c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	6039      	str	r1, [r7, #0]
 80080a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	221a      	movs	r2, #26
 80080ac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080ae:	f000 f843 	bl	8008138 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80080b2:	4b02      	ldr	r3, [pc, #8]	@ (80080bc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	200000e4 	.word	0x200000e4

080080c0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	4603      	mov	r3, r0
 80080c8:	6039      	str	r1, [r7, #0]
 80080ca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d105      	bne.n	80080de <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	4907      	ldr	r1, [pc, #28]	@ (80080f4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80080d6:	4808      	ldr	r0, [pc, #32]	@ (80080f8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80080d8:	f7ff fda4 	bl	8007c24 <USBD_GetString>
 80080dc:	e004      	b.n	80080e8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	4904      	ldr	r1, [pc, #16]	@ (80080f4 <USBD_HS_ConfigStrDescriptor+0x34>)
 80080e2:	4805      	ldr	r0, [pc, #20]	@ (80080f8 <USBD_HS_ConfigStrDescriptor+0x38>)
 80080e4:	f7ff fd9e 	bl	8007c24 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080e8:	4b02      	ldr	r3, [pc, #8]	@ (80080f4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	200019e4 	.word	0x200019e4
 80080f8:	08008848 	.word	0x08008848

080080fc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	6039      	str	r1, [r7, #0]
 8008106:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008108:	79fb      	ldrb	r3, [r7, #7]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d105      	bne.n	800811a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	4907      	ldr	r1, [pc, #28]	@ (8008130 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008112:	4808      	ldr	r0, [pc, #32]	@ (8008134 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008114:	f7ff fd86 	bl	8007c24 <USBD_GetString>
 8008118:	e004      	b.n	8008124 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	4904      	ldr	r1, [pc, #16]	@ (8008130 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800811e:	4805      	ldr	r0, [pc, #20]	@ (8008134 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008120:	f7ff fd80 	bl	8007c24 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008124:	4b02      	ldr	r3, [pc, #8]	@ (8008130 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008126:	4618      	mov	r0, r3
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	200019e4 	.word	0x200019e4
 8008134:	08008854 	.word	0x08008854

08008138 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800813e:	4b0f      	ldr	r3, [pc, #60]	@ (800817c <Get_SerialNum+0x44>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008144:	4b0e      	ldr	r3, [pc, #56]	@ (8008180 <Get_SerialNum+0x48>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800814a:	4b0e      	ldr	r3, [pc, #56]	@ (8008184 <Get_SerialNum+0x4c>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4413      	add	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d009      	beq.n	8008172 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800815e:	2208      	movs	r2, #8
 8008160:	4909      	ldr	r1, [pc, #36]	@ (8008188 <Get_SerialNum+0x50>)
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f814 	bl	8008190 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008168:	2204      	movs	r2, #4
 800816a:	4908      	ldr	r1, [pc, #32]	@ (800818c <Get_SerialNum+0x54>)
 800816c:	68b8      	ldr	r0, [r7, #8]
 800816e:	f000 f80f 	bl	8008190 <IntToUnicode>
  }
}
 8008172:	bf00      	nop
 8008174:	3710      	adds	r7, #16
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	0bfa0700 	.word	0x0bfa0700
 8008180:	0bfa0704 	.word	0x0bfa0704
 8008184:	0bfa0708 	.word	0x0bfa0708
 8008188:	200000e6 	.word	0x200000e6
 800818c:	200000f6 	.word	0x200000f6

08008190 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	4613      	mov	r3, r2
 800819c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	75fb      	strb	r3, [r7, #23]
 80081a6:	e027      	b.n	80081f8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	0f1b      	lsrs	r3, r3, #28
 80081ac:	2b09      	cmp	r3, #9
 80081ae:	d80b      	bhi.n	80081c8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	0f1b      	lsrs	r3, r3, #28
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	7dfb      	ldrb	r3, [r7, #23]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	4619      	mov	r1, r3
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	440b      	add	r3, r1
 80081c0:	3230      	adds	r2, #48	@ 0x30
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	e00a      	b.n	80081de <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	0f1b      	lsrs	r3, r3, #28
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	4619      	mov	r1, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	440b      	add	r3, r1
 80081d8:	3237      	adds	r2, #55	@ 0x37
 80081da:	b2d2      	uxtb	r2, r2
 80081dc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	3301      	adds	r3, #1
 80081ea:	68ba      	ldr	r2, [r7, #8]
 80081ec:	4413      	add	r3, r2
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
 80081f4:	3301      	adds	r3, #1
 80081f6:	75fb      	strb	r3, [r7, #23]
 80081f8:	7dfa      	ldrb	r2, [r7, #23]
 80081fa:	79fb      	ldrb	r3, [r7, #7]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d3d3      	bcc.n	80081a8 <IntToUnicode+0x18>
  }
}
 8008200:	bf00      	nop
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f7fe fb70 	bl	800690a <USBD_LL_SetupStage>
}
 800822a:	bf00      	nop
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008244:	78fa      	ldrb	r2, [r7, #3]
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	4619      	mov	r1, r3
 800825c:	f7fe fbaa 	bl	80069b4 <USBD_LL_DataOutStage>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	6879      	ldr	r1, [r7, #4]
 800827e:	4613      	mov	r3, r2
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	4413      	add	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	440b      	add	r3, r1
 8008288:	3320      	adds	r3, #32
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	78fb      	ldrb	r3, [r7, #3]
 800828e:	4619      	mov	r1, r3
 8008290:	f7fe fc43 	bl	8006b1a <USBD_LL_DataInStage>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fd7d 	bl	8006daa <USBD_LL_SOF>
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082c0:	2301      	movs	r3, #1
 80082c2:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	79db      	ldrb	r3, [r3, #7]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73fb      	strb	r3, [r7, #15]
 80082d0:	e008      	b.n	80082e4 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	79db      	ldrb	r3, [r3, #7]
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d102      	bne.n	80082e0 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082da:	2301      	movs	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]
 80082de:	e001      	b.n	80082e4 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082e0:	f7f8 f8ca 	bl	8000478 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082ea:	7bfa      	ldrb	r2, [r7, #15]
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fd17 	bl	8006d22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe fcbf 	bl	8006c7e <USBD_LL_Reset>
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fd13 	bl	8006d42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	7adb      	ldrb	r3, [r3, #11]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800833c:	4b04      	ldr	r3, [pc, #16]	@ (8008350 <HAL_PCD_SuspendCallback+0x48>)
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	4a03      	ldr	r2, [pc, #12]	@ (8008350 <HAL_PCD_SuspendCallback+0x48>)
 8008342:	f043 0306 	orr.w	r3, r3, #6
 8008346:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	e000ed00 	.word	0xe000ed00

08008354 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fd09 	bl	8006d7a <USBD_LL_Resume>
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008382:	78fa      	ldrb	r2, [r7, #3]
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe fd61 	bl	8006e4e <USBD_LL_IsoOUTIncomplete>
}
 800838c:	bf00      	nop
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083a6:	78fa      	ldrb	r2, [r7, #3]
 80083a8:	4611      	mov	r1, r2
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fd1d 	bl	8006dea <USBD_LL_IsoINIncomplete>
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fd73 	bl	8006eb2 <USBD_LL_DevConnected>
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fd70 	bl	8006ec8 <USBD_LL_DevDisconnected>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d140      	bne.n	8008482 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008400:	4a22      	ldr	r2, [pc, #136]	@ (800848c <USBD_LL_Init+0x9c>)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a20      	ldr	r2, [pc, #128]	@ (800848c <USBD_LL_Init+0x9c>)
 800840c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008410:	4b1e      	ldr	r3, [pc, #120]	@ (800848c <USBD_LL_Init+0x9c>)
 8008412:	4a1f      	ldr	r2, [pc, #124]	@ (8008490 <USBD_LL_Init+0xa0>)
 8008414:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8008416:	4b1d      	ldr	r3, [pc, #116]	@ (800848c <USBD_LL_Init+0x9c>)
 8008418:	2209      	movs	r2, #9
 800841a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800841c:	4b1b      	ldr	r3, [pc, #108]	@ (800848c <USBD_LL_Init+0x9c>)
 800841e:	2200      	movs	r2, #0
 8008420:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008422:	4b1a      	ldr	r3, [pc, #104]	@ (800848c <USBD_LL_Init+0x9c>)
 8008424:	2200      	movs	r2, #0
 8008426:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 8008428:	4b18      	ldr	r3, [pc, #96]	@ (800848c <USBD_LL_Init+0x9c>)
 800842a:	2203      	movs	r2, #3
 800842c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800842e:	4b17      	ldr	r3, [pc, #92]	@ (800848c <USBD_LL_Init+0x9c>)
 8008430:	2200      	movs	r2, #0
 8008432:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008434:	4b15      	ldr	r3, [pc, #84]	@ (800848c <USBD_LL_Init+0x9c>)
 8008436:	2200      	movs	r2, #0
 8008438:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800843a:	4b14      	ldr	r3, [pc, #80]	@ (800848c <USBD_LL_Init+0x9c>)
 800843c:	2200      	movs	r2, #0
 800843e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008440:	4b12      	ldr	r3, [pc, #72]	@ (800848c <USBD_LL_Init+0x9c>)
 8008442:	2200      	movs	r2, #0
 8008444:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008446:	4b11      	ldr	r3, [pc, #68]	@ (800848c <USBD_LL_Init+0x9c>)
 8008448:	2200      	movs	r2, #0
 800844a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800844c:	4b0f      	ldr	r3, [pc, #60]	@ (800848c <USBD_LL_Init+0x9c>)
 800844e:	2200      	movs	r2, #0
 8008450:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008452:	480e      	ldr	r0, [pc, #56]	@ (800848c <USBD_LL_Init+0x9c>)
 8008454:	f7f8 fc30 	bl	8000cb8 <HAL_PCD_Init>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800845e:	f7f8 f80b 	bl	8000478 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008466:	4809      	ldr	r0, [pc, #36]	@ (800848c <USBD_LL_Init+0x9c>)
 8008468:	f7f9 fe73 	bl	8002152 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800846c:	2280      	movs	r2, #128	@ 0x80
 800846e:	2100      	movs	r1, #0
 8008470:	4806      	ldr	r0, [pc, #24]	@ (800848c <USBD_LL_Init+0x9c>)
 8008472:	f7f9 fe27 	bl	80020c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008476:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800847a:	2101      	movs	r1, #1
 800847c:	4803      	ldr	r0, [pc, #12]	@ (800848c <USBD_LL_Init+0x9c>)
 800847e:	f7f9 fe21 	bl	80020c4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3708      	adds	r7, #8
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	2000011c 	.word	0x2000011c
 8008490:	42040000 	.word	0x42040000

08008494 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7f8 fd10 	bl	8000ed0 <HAL_PCD_Start>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 f942 	bl	8008740 <USBD_Get_USB_Status>
 80084bc:	4603      	mov	r3, r0
 80084be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	4608      	mov	r0, r1
 80084d4:	4611      	mov	r1, r2
 80084d6:	461a      	mov	r2, r3
 80084d8:	4603      	mov	r3, r0
 80084da:	70fb      	strb	r3, [r7, #3]
 80084dc:	460b      	mov	r3, r1
 80084de:	70bb      	strb	r3, [r7, #2]
 80084e0:	4613      	mov	r3, r2
 80084e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80084f2:	78bb      	ldrb	r3, [r7, #2]
 80084f4:	883a      	ldrh	r2, [r7, #0]
 80084f6:	78f9      	ldrb	r1, [r7, #3]
 80084f8:	f7f9 f9fe 	bl	80018f8 <HAL_PCD_EP_Open>
 80084fc:	4603      	mov	r3, r0
 80084fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	4618      	mov	r0, r3
 8008504:	f000 f91c 	bl	8008740 <USBD_Get_USB_Status>
 8008508:	4603      	mov	r3, r0
 800850a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850c:	7bbb      	ldrb	r3, [r7, #14]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	460b      	mov	r3, r1
 8008520:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f7f9 fa49 	bl	80019cc <HAL_PCD_EP_Close>
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f8fd 	bl	8008740 <USBD_Get_USB_Status>
 8008546:	4603      	mov	r3, r0
 8008548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800854a:	7bbb      	ldrb	r3, [r7, #14]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7f9 fb01 	bl	8001b7a <HAL_PCD_EP_SetStall>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f8de 	bl	8008740 <USBD_Get_USB_Status>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008588:	7bbb      	ldrb	r3, [r7, #14]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
 800859a:	460b      	mov	r3, r1
 800859c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085a2:	2300      	movs	r3, #0
 80085a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085ac:	78fa      	ldrb	r2, [r7, #3]
 80085ae:	4611      	mov	r1, r2
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7f9 fb45 	bl	8001c40 <HAL_PCD_EP_ClrStall>
 80085b6:	4603      	mov	r3, r0
 80085b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 f8bf 	bl	8008740 <USBD_Get_USB_Status>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	460b      	mov	r3, r1
 80085da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	da0b      	bge.n	8008604 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085f2:	68f9      	ldr	r1, [r7, #12]
 80085f4:	4613      	mov	r3, r2
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	4413      	add	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	3316      	adds	r3, #22
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	e00b      	b.n	800861c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008604:	78fb      	ldrb	r3, [r7, #3]
 8008606:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	4613      	mov	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800861a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	460b      	mov	r3, r1
 8008632:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f7f9 f932 	bl	80018b0 <HAL_PCD_SetAddress>
 800864c:	4603      	mov	r3, r0
 800864e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008650:	7bfb      	ldrb	r3, [r7, #15]
 8008652:	4618      	mov	r0, r3
 8008654:	f000 f874 	bl	8008740 <USBD_Get_USB_Status>
 8008658:	4603      	mov	r3, r0
 800865a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865c:	7bbb      	ldrb	r3, [r7, #14]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
 8008672:	460b      	mov	r3, r1
 8008674:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008684:	7af9      	ldrb	r1, [r7, #11]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	f7f9 fa3c 	bl	8001b06 <HAL_PCD_EP_Transmit>
 800868e:	4603      	mov	r3, r0
 8008690:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f853 	bl	8008740 <USBD_Get_USB_Status>
 800869a:	4603      	mov	r3, r0
 800869c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800869e:	7dbb      	ldrb	r3, [r7, #22]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	603b      	str	r3, [r7, #0]
 80086b4:	460b      	mov	r3, r1
 80086b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086c6:	7af9      	ldrb	r1, [r7, #11]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	f7f9 f9c8 	bl	8001a60 <HAL_PCD_EP_Receive>
 80086d0:	4603      	mov	r3, r0
 80086d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7dfb      	ldrb	r3, [r7, #23]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f832 	bl	8008740 <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3718      	adds	r7, #24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b082      	sub	sp, #8
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	4611      	mov	r1, r2
 8008700:	4618      	mov	r0, r3
 8008702:	f7f9 f9e8 	bl	8001ad6 <HAL_PCD_EP_GetRxCount>
 8008706:	4603      	mov	r3, r0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008718:	4b03      	ldr	r3, [pc, #12]	@ (8008728 <USBD_static_malloc+0x18>)
}
 800871a:	4618      	mov	r0, r3
 800871c:	370c      	adds	r7, #12
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20001be4 	.word	0x20001be4

0800872c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	4603      	mov	r3, r0
 8008748:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800874e:	79fb      	ldrb	r3, [r7, #7]
 8008750:	2b03      	cmp	r3, #3
 8008752:	d817      	bhi.n	8008784 <USBD_Get_USB_Status+0x44>
 8008754:	a201      	add	r2, pc, #4	@ (adr r2, 800875c <USBD_Get_USB_Status+0x1c>)
 8008756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875a:	bf00      	nop
 800875c:	0800876d 	.word	0x0800876d
 8008760:	08008773 	.word	0x08008773
 8008764:	08008779 	.word	0x08008779
 8008768:	0800877f 	.word	0x0800877f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]
    break;
 8008770:	e00b      	b.n	800878a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008772:	2303      	movs	r3, #3
 8008774:	73fb      	strb	r3, [r7, #15]
    break;
 8008776:	e008      	b.n	800878a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008778:	2301      	movs	r3, #1
 800877a:	73fb      	strb	r3, [r7, #15]
    break;
 800877c:	e005      	b.n	800878a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800877e:	2303      	movs	r3, #3
 8008780:	73fb      	strb	r3, [r7, #15]
    break;
 8008782:	e002      	b.n	800878a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008784:	2303      	movs	r3, #3
 8008786:	73fb      	strb	r3, [r7, #15]
    break;
 8008788:	bf00      	nop
  }
  return usb_status;
 800878a:	7bfb      	ldrb	r3, [r7, #15]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <memset>:
 8008798:	4402      	add	r2, r0
 800879a:	4603      	mov	r3, r0
 800879c:	4293      	cmp	r3, r2
 800879e:	d100      	bne.n	80087a2 <memset+0xa>
 80087a0:	4770      	bx	lr
 80087a2:	f803 1b01 	strb.w	r1, [r3], #1
 80087a6:	e7f9      	b.n	800879c <memset+0x4>

080087a8 <__libc_init_array>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	4d0d      	ldr	r5, [pc, #52]	@ (80087e0 <__libc_init_array+0x38>)
 80087ac:	2600      	movs	r6, #0
 80087ae:	4c0d      	ldr	r4, [pc, #52]	@ (80087e4 <__libc_init_array+0x3c>)
 80087b0:	1b64      	subs	r4, r4, r5
 80087b2:	10a4      	asrs	r4, r4, #2
 80087b4:	42a6      	cmp	r6, r4
 80087b6:	d109      	bne.n	80087cc <__libc_init_array+0x24>
 80087b8:	4d0b      	ldr	r5, [pc, #44]	@ (80087e8 <__libc_init_array+0x40>)
 80087ba:	2600      	movs	r6, #0
 80087bc:	4c0b      	ldr	r4, [pc, #44]	@ (80087ec <__libc_init_array+0x44>)
 80087be:	f000 f817 	bl	80087f0 <_init>
 80087c2:	1b64      	subs	r4, r4, r5
 80087c4:	10a4      	asrs	r4, r4, #2
 80087c6:	42a6      	cmp	r6, r4
 80087c8:	d105      	bne.n	80087d6 <__libc_init_array+0x2e>
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
 80087cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d0:	3601      	adds	r6, #1
 80087d2:	4798      	blx	r3
 80087d4:	e7ee      	b.n	80087b4 <__libc_init_array+0xc>
 80087d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087da:	3601      	adds	r6, #1
 80087dc:	4798      	blx	r3
 80087de:	e7f2      	b.n	80087c6 <__libc_init_array+0x1e>
 80087e0:	080088b4 	.word	0x080088b4
 80087e4:	080088b4 	.word	0x080088b4
 80087e8:	080088b4 	.word	0x080088b4
 80087ec:	080088b8 	.word	0x080088b8

080087f0 <_init>:
 80087f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087f2:	bf00      	nop
 80087f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f6:	bc08      	pop	{r3}
 80087f8:	469e      	mov	lr, r3
 80087fa:	4770      	bx	lr

080087fc <_fini>:
 80087fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fe:	bf00      	nop
 8008800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008802:	bc08      	pop	{r3}
 8008804:	469e      	mov	lr, r3
 8008806:	4770      	bx	lr
