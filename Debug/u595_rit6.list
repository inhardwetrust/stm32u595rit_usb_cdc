
u595_rit6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008558  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080087a8  080087a8  000097a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008854  08008854  00009854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008858  08008858  00009858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000000fe  20000000  0800885c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001c04  20000100  0800895a  0000a100  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001d04  0800895a  0000ad04  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000a0fe  2**0
                  CONTENTS, READONLY
  9 .debug_info   000130fb  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000315f  00000000  00000000  0001d22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001050  00000000  00000000  00020390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000c26  00000000  00000000  000213e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000353c1  00000000  00000000  00022006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000149a8  00000000  00000000  000573c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013fb26  00000000  00000000  0006bd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ab895  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000041f4  00000000  00000000  001ab8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001afacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000100 	.word	0x20000100
 800026c:	00000000 	.word	0x00000000
 8000270:	08008790 	.word	0x08008790

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000104 	.word	0x20000104
 800028c:	08008790 	.word	0x08008790

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b5b0      	push	{r4, r5, r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000296:	f000 f9fd 	bl	8000694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029a:	f000 f81b 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029e:	f000 f885 	bl	80003ac <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002a2:	f000 f86f 	bl	8000384 <MX_ICACHE_Init>
  //MX_USB_OTG_HS_PCD_Init();
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80002a6:	f007 fd6d 	bl	8007d84 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t msg[] = "Hello, USB CDC!\r\n";
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <main+0x40>)
 80002ac:	1d3c      	adds	r4, r7, #4
 80002ae:	461d      	mov	r5, r3
 80002b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b4:	682b      	ldr	r3, [r5, #0]
 80002b6:	8023      	strh	r3, [r4, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_HS(msg, sizeof(msg) - 1);
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2111      	movs	r1, #17
 80002bc:	4618      	mov	r0, r3
 80002be:	f007 fe2b 	bl	8007f18 <CDC_Transmit_HS>
	  		HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c6:	f000 faab 	bl	8000820 <HAL_Delay>
  {
 80002ca:	bf00      	nop
 80002cc:	e7f4      	b.n	80002b8 <main+0x28>
 80002ce:	bf00      	nop
 80002d0:	080087a8 	.word	0x080087a8

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b09e      	sub	sp, #120	@ 0x78
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2260      	movs	r2, #96	@ 0x60
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f008 fa28 	bl	8008738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	463b      	mov	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]
 80002f6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002f8:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80002fc:	f001 ff2e 	bl	800215c <HAL_PWREx_ControlVoltageScaling>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000306:	f000 f87b 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2302      	movs	r3, #2
 8000316:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000318:	2303      	movs	r3, #3
 800031a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000320:	2301      	movs	r3, #1
 8000322:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000324:	2314      	movs	r3, #20
 8000326:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 10;
 8000328:	230a      	movs	r3, #10
 800032a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800032c:	2302      	movs	r3, #2
 800032e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000330:	2302      	movs	r3, #2
 8000332:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000334:	230c      	movs	r3, #12
 8000336:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f001 ffc5 	bl	80022d0 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800034c:	f000 f858 	bl	8000400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	231f      	movs	r3, #31
 8000352:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2303      	movs	r3, #3
 8000356:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000368:	463b      	mov	r3, r7
 800036a:	2104      	movs	r1, #4
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fe8b 	bl	8003088 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000378:	f000 f842 	bl	8000400 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3778      	adds	r7, #120	@ 0x78
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000388:	2000      	movs	r0, #0
 800038a:	f000 fc29 	bl	8000be0 <HAL_ICACHE_ConfigAssociativityMode>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000394:	f000 f834 	bl	8000400 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000398:	f000 fc42 	bl	8000c20 <HAL_ICACHE_Enable>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003a2:	f000 f82d 	bl	8000400 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003b2:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_GPIO_Init+0x50>)
 80003b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003b8:	4a10      	ldr	r2, [pc, #64]	@ (80003fc <MX_GPIO_Init+0x50>)
 80003ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_GPIO_Init+0x50>)
 80003c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d0:	4b0a      	ldr	r3, [pc, #40]	@ (80003fc <MX_GPIO_Init+0x50>)
 80003d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003d6:	4a09      	ldr	r2, [pc, #36]	@ (80003fc <MX_GPIO_Init+0x50>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_GPIO_Init+0x50>)
 80003e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	46020c00 	.word	0x46020c00

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <Error_Handler+0x8>

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0a      	ldr	r3, [pc, #40]	@ (800043c <HAL_MspInit+0x30>)
 8000414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000418:	4a08      	ldr	r2, [pc, #32]	@ (800043c <HAL_MspInit+0x30>)
 800041a:	f043 0304 	orr.w	r3, r3, #4
 800041e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <HAL_MspInit+0x30>)
 8000424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000428:	f003 0304 	and.w	r3, r3, #4
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000430:	f001 ff20 	bl	8002274 <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	46020c00 	.word	0x46020c00

08000440 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b0bc      	sub	sp, #240	@ 0xf0
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000448:	f107 0318 	add.w	r3, r7, #24
 800044c:	22d8      	movs	r2, #216	@ 0xd8
 800044e:	2100      	movs	r1, #0
 8000450:	4618      	mov	r0, r3
 8000452:	f008 f971 	bl	8008738 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a3e      	ldr	r2, [pc, #248]	@ (8000554 <HAL_PCD_MspInit+0x114>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d175      	bne.n	800054c <HAL_PCD_MspInit+0x10c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000460:	4b3d      	ldr	r3, [pc, #244]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 8000462:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000466:	4a3c      	ldr	r2, [pc, #240]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 8000468:	f043 0302 	orr.w	r3, r3, #2
 800046c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000470:	4b39      	ldr	r3, [pc, #228]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 8000472:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 800047e:	f04f 0200 	mov.w	r2, #0
 8000482:	f04f 0308 	mov.w	r3, #8
 8000486:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 800048a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800048e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	4618      	mov	r0, r3
 8000498:	f003 f98a 	bl	80037b0 <HAL_RCCEx_PeriphCLKConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80004a2:	f7ff ffad 	bl	8000400 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_6);
 80004a6:	202c      	movs	r0, #44	@ 0x2c
 80004a8:	f000 f9f2 	bl	8000890 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80004ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004b2:	4a29      	ldr	r2, [pc, #164]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004bc:	4b26      	ldr	r3, [pc, #152]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004c6:	613b      	str	r3, [r7, #16]
 80004c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80004ca:	4b23      	ldr	r3, [pc, #140]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004d0:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004da:	4b1f      	ldr	r3, [pc, #124]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80004e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d11b      	bne.n	800052e <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b18      	ldr	r3, [pc, #96]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80004fc:	4a16      	ldr	r2, [pc, #88]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000506:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 8000508:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000514:	f001 feae 	bl	8002274 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000518:	f001 febc 	bl	8002294 <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 800051e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000522:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <HAL_PCD_MspInit+0x118>)
 8000524:	f023 0304 	bic.w	r3, r3, #4
 8000528:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800052c:	e003      	b.n	8000536 <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800052e:	f001 fea1 	bl	8002274 <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000532:	f001 feaf 	bl	8002294 <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 8000536:	2001      	movs	r0, #1
 8000538:	f000 f996 	bl	8000868 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	2049      	movs	r0, #73	@ 0x49
 8000542:	f000 fa71 	bl	8000a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000546:	2049      	movs	r0, #73	@ 0x49
 8000548:	f000 fa88 	bl	8000a5c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800054c:	bf00      	nop
 800054e:	37f0      	adds	r7, #240	@ 0xf0
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	42040000 	.word	0x42040000
 8000558:	46020c00 	.word	0x46020c00

0800055c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <NMI_Handler+0x4>

08000564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <HardFault_Handler+0x4>

0800056c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000570:	bf00      	nop
 8000572:	e7fd      	b.n	8000570 <MemManage_Handler+0x4>

08000574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <BusFault_Handler+0x4>

0800057c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <UsageFault_Handler+0x4>

08000584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b2:	f000 f915 	bl	80007e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <OTG_HS_IRQHandler+0x10>)
 80005c2:	f000 fc6b 	bl	8000e9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000011c 	.word	0x2000011c

080005d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <SystemInit+0x68>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005da:	4a17      	ldr	r2, [pc, #92]	@ (8000638 <SystemInit+0x68>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <SystemInit+0x6c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <SystemInit+0x6c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <SystemInit+0x6c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <SystemInit+0x6c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <SystemInit+0x6c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <SystemInit+0x6c>)
 8000602:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000606:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800060a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <SystemInit+0x6c>)
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <SystemInit+0x6c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a09      	ldr	r2, [pc, #36]	@ (800063c <SystemInit+0x6c>)
 8000618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800061c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <SystemInit+0x6c>)
 8000620:	2200      	movs	r2, #0
 8000622:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000624:	4b04      	ldr	r3, [pc, #16]	@ (8000638 <SystemInit+0x68>)
 8000626:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800062a:	609a      	str	r2, [r3, #8]
  #endif
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00
 800063c:	46020c00 	.word	0x46020c00

08000640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000678 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000644:	f7ff ffc4 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000648:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800064a:	e003      	b.n	8000654 <LoopCopyDataInit>

0800064c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800064c:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800064e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000650:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000652:	3104      	adds	r1, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000654:	480a      	ldr	r0, [pc, #40]	@ (8000680 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000658:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800065a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800065c:	d3f6      	bcc.n	800064c <CopyDataInit>
	ldr	r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000660:	e002      	b.n	8000668 <LoopFillZerobss>

08000662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000662:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000664:	f842 3b04 	str.w	r3, [r2], #4

08000668 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <LoopForever+0x16>)
	cmp	r2, r3
 800066a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800066c:	d3f9      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f008 f86b 	bl	8008748 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000672:	f7ff fe0d 	bl	8000290 <main>

08000676 <LoopForever>:

LoopForever:
    b LoopForever
 8000676:	e7fe      	b.n	8000676 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000678:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 800067c:	0800885c 	.word	0x0800885c
	ldr	r0, =_sdata
 8000680:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000684:	200000fe 	.word	0x200000fe
	ldr	r2, =_sbss
 8000688:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 800068c:	20001d04 	.word	0x20001d04

08000690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC1_2_IRQHandler>
	...

08000694 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_Init+0x50>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <HAL_Init+0x50>)
 800069e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f9b4 	bl	8000a12 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80006aa:	f002 fedf 	bl	800346c <HAL_RCC_GetSysClockFreq>
 80006ae:	4602      	mov	r2, r0
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <HAL_Init+0x54>)
 80006b2:	6a1b      	ldr	r3, [r3, #32]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	490c      	ldr	r1, [pc, #48]	@ (80006ec <HAL_Init+0x58>)
 80006ba:	5ccb      	ldrb	r3, [r1, r3]
 80006bc:	fa22 f303 	lsr.w	r3, r2, r3
 80006c0:	4a0b      	ldr	r2, [pc, #44]	@ (80006f0 <HAL_Init+0x5c>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006c4:	2004      	movs	r0, #4
 80006c6:	f000 f9f9 	bl	8000abc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ca:	200e      	movs	r0, #14
 80006cc:	f000 f812 	bl	80006f4 <HAL_InitTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e002      	b.n	80006e0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006da:	f7ff fe97 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40022000 	.word	0x40022000
 80006e8:	46020c00 	.word	0x46020c00
 80006ec:	08008804 	.word	0x08008804
 80006f0:	20000000 	.word	0x20000000

080006f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000700:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <HAL_InitTick+0xdc>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d101      	bne.n	800070c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000708:	2301      	movs	r3, #1
 800070a:	e05c      	b.n	80007c6 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800070c:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <HAL_InitTick+0xe0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	2b04      	cmp	r3, #4
 8000716:	d10c      	bne.n	8000732 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000718:	4b2f      	ldr	r3, [pc, #188]	@ (80007d8 <HAL_InitTick+0xe4>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b2c      	ldr	r3, [pc, #176]	@ (80007d0 <HAL_InitTick+0xdc>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	e037      	b.n	80007a2 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8000732:	f000 fa1b 	bl	8000b6c <HAL_SYSTICK_GetCLKSourceConfig>
 8000736:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	2b02      	cmp	r3, #2
 800073c:	d023      	beq.n	8000786 <HAL_InitTick+0x92>
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	2b02      	cmp	r3, #2
 8000742:	d82d      	bhi.n	80007a0 <HAL_InitTick+0xac>
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d003      	beq.n	8000752 <HAL_InitTick+0x5e>
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d00d      	beq.n	800076c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000750:	e026      	b.n	80007a0 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8000752:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <HAL_InitTick+0xe4>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <HAL_InitTick+0xdc>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4619      	mov	r1, r3
 800075c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000760:	fbb3 f3f1 	udiv	r3, r3, r1
 8000764:	fbb2 f3f3 	udiv	r3, r2, r3
 8000768:	60fb      	str	r3, [r7, #12]
        break;
 800076a:	e01a      	b.n	80007a2 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_InitTick+0xdc>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000776:	fbb3 f3f2 	udiv	r3, r3, r2
 800077a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	60fb      	str	r3, [r7, #12]
        break;
 8000784:	e00d      	b.n	80007a2 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_InitTick+0xdc>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000790:	fbb3 f3f2 	udiv	r3, r3, r2
 8000794:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000798:	fbb2 f3f3 	udiv	r3, r2, r3
 800079c:	60fb      	str	r3, [r7, #12]
        break;
 800079e:	e000      	b.n	80007a2 <HAL_InitTick+0xae>
        break;
 80007a0:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80007a2:	68f8      	ldr	r0, [r7, #12]
 80007a4:	f000 f968 	bl	8000a78 <HAL_SYSTICK_Config>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e009      	b.n	80007c6 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b2:	2200      	movs	r2, #0
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	f04f 30ff 	mov.w	r0, #4294967295
 80007ba:	f000 f935 	bl	8000a28 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80007be:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <HAL_InitTick+0xe8>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000008 	.word	0x20000008
 80007d4:	e000e010 	.word	0xe000e010
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000004 	.word	0x20000004

080007e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_IncTick+0x20>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <HAL_IncTick+0x24>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	4a04      	ldr	r2, [pc, #16]	@ (8000804 <HAL_IncTick+0x24>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008
 8000804:	20000600 	.word	0x20000600

08000808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  return uwTick;
 800080c:	4b03      	ldr	r3, [pc, #12]	@ (800081c <HAL_GetTick+0x14>)
 800080e:	681b      	ldr	r3, [r3, #0]
}
 8000810:	4618      	mov	r0, r3
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	20000600 	.word	0x20000600

08000820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000828:	f7ff ffee 	bl	8000808 <HAL_GetTick>
 800082c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000838:	d005      	beq.n	8000846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083a:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <HAL_Delay+0x44>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4413      	add	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000846:	bf00      	nop
 8000848:	f7ff ffde 	bl	8000808 <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	429a      	cmp	r2, r3
 8000856:	d8f7      	bhi.n	8000848 <HAL_Delay+0x28>
  {
  }
}
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000008 	.word	0x20000008

08000868 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000874:	f023 0201 	bic.w	r2, r3, #1
 8000878:	4904      	ldr	r1, [pc, #16]	@ (800088c <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4313      	orrs	r3, r2
 800087e:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	46000400 	.word	0x46000400

08000890 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 800089a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800089c:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80008a0:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	46000400 	.word	0x46000400

080008b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	@ (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4907      	ldr	r1, [pc, #28]	@ (8000954 <__NVIC_EnableIRQ+0x38>)
 8000936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000e100 	.word	0xe000e100

08000958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	6039      	str	r1, [r7, #0]
 8000962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000968:	2b00      	cmp	r3, #0
 800096a:	db0a      	blt.n	8000982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	b2da      	uxtb	r2, r3
 8000970:	490c      	ldr	r1, [pc, #48]	@ (80009a4 <__NVIC_SetPriority+0x4c>)
 8000972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000976:	0112      	lsls	r2, r2, #4
 8000978:	b2d2      	uxtb	r2, r2
 800097a:	440b      	add	r3, r1
 800097c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000980:	e00a      	b.n	8000998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	b2da      	uxtb	r2, r3
 8000986:	4908      	ldr	r1, [pc, #32]	@ (80009a8 <__NVIC_SetPriority+0x50>)
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	3b04      	subs	r3, #4
 8000990:	0112      	lsls	r2, r2, #4
 8000992:	b2d2      	uxtb	r2, r2
 8000994:	440b      	add	r3, r1
 8000996:	761a      	strb	r2, [r3, #24]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000e100 	.word	0xe000e100
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	f1c3 0307 	rsb	r3, r3, #7
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	bf28      	it	cs
 80009ca:	2304      	movcs	r3, #4
 80009cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2b06      	cmp	r3, #6
 80009d4:	d902      	bls.n	80009dc <NVIC_EncodePriority+0x30>
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3b03      	subs	r3, #3
 80009da:	e000      	b.n	80009de <NVIC_EncodePriority+0x32>
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	f04f 32ff 	mov.w	r2, #4294967295
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43da      	mvns	r2, r3
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	401a      	ands	r2, r3
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f4:	f04f 31ff 	mov.w	r1, #4294967295
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	43d9      	mvns	r1, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a04:	4313      	orrs	r3, r2
         );
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3724      	adds	r7, #36	@ 0x24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a1a:	6878      	ldr	r0, [r7, #4]
 8000a1c:	f7ff ff4c 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a36:	f7ff ff63 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	68b9      	ldr	r1, [r7, #8]
 8000a40:	6978      	ldr	r0, [r7, #20]
 8000a42:	f7ff ffb3 	bl	80009ac <NVIC_EncodePriority>
 8000a46:	4602      	mov	r2, r0
 8000a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff ff82 	bl	8000958 <__NVIC_SetPriority>
}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff56 	bl	800091c <__NVIC_EnableIRQ>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a88:	d301      	bcc.n	8000a8e <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00d      	b.n	8000aaa <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_SYSTICK_Config+0x40>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_SYSTICK_Config+0x40>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000a9c:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_SYSTICK_Config+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a05      	ldr	r2, [pc, #20]	@ (8000ab8 <HAL_SYSTICK_Config+0x40>)
 8000aa2:	f043 0303 	orr.w	r3, r3, #3
 8000aa6:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d844      	bhi.n	8000b54 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000aca:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad0:	08000af3 	.word	0x08000af3
 8000ad4:	08000b11 	.word	0x08000b11
 8000ad8:	08000b33 	.word	0x08000b33
 8000adc:	08000b55 	.word	0x08000b55
 8000ae0:	08000ae5 	.word	0x08000ae5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6013      	str	r3, [r2, #0]
      break;
 8000af0:	e031      	b.n	8000b56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000af2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000af8:	f023 0304 	bic.w	r3, r3, #4
 8000afc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b06:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b0e:	e022      	b.n	8000b56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b10:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a13      	ldr	r2, [pc, #76]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b16:	f023 0304 	bic.w	r3, r3, #4
 8000b1a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b22:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b26:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b28:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b30:	e011      	b.n	8000b56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b38:	f023 0304 	bic.w	r3, r3, #4
 8000b3c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b48:	4a07      	ldr	r2, [pc, #28]	@ (8000b68 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b52:	e000      	b.n	8000b56 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000b54:	bf00      	nop
  }
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000e010 	.word	0xe000e010
 8000b68:	46020c00 	.word	0x46020c00

08000b6c <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000b72:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	e021      	b.n	8000bc8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000b84:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000b8e:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000b96:	d011      	beq.n	8000bbc <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000b9e:	d810      	bhi.n	8000bc2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d004      	beq.n	8000bb0 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bac:	d003      	beq.n	8000bb6 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000bae:	e008      	b.n	8000bc2 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
        break;
 8000bb4:	e008      	b.n	8000bc8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
        break;
 8000bba:	e005      	b.n	8000bc8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	607b      	str	r3, [r7, #4]
        break;
 8000bc0:	e002      	b.n	8000bc8 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
        break;
 8000bc6:	bf00      	nop
    }
  }
  return systick_source;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e010 	.word	0xe000e010
 8000bdc:	46020c00 	.word	0x46020c00

08000be0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d002      	beq.n	8000bfe <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e007      	b.n	8000c0e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 0204 	bic.w	r2, r3, #4
 8000c06:	4905      	ldr	r1, [pc, #20]	@ (8000c1c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40030400 	.word	0x40030400

08000c20 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <HAL_ICACHE_Enable+0x1c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <HAL_ICACHE_Enable+0x1c>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	40030400 	.word	0x40030400

08000c40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e0fe      	b.n	8000e50 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d106      	bne.n	8000c6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fbea 	bl	8000440 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2203      	movs	r2, #3
 8000c70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fe4a 	bl	8004912 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7c1a      	ldrb	r2, [r3, #16]
 8000c86:	f88d 2000 	strb.w	r2, [sp]
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c8e:	f003 fd5d 	bl	800474c <USB_CoreInit>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d005      	beq.n	8000ca4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2202      	movs	r2, #2
 8000c9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e0d5      	b.n	8000e50 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fe42 	bl	8004934 <USB_SetCurrentMode>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2202      	movs	r2, #2
 8000cba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e0c6      	b.n	8000e50 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	e04a      	b.n	8000d5e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3315      	adds	r3, #21
 8000cd8:	2201      	movs	r2, #1
 8000cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cdc:	7bfa      	ldrb	r2, [r7, #15]
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	440b      	add	r3, r1
 8000cea:	3314      	adds	r3, #20
 8000cec:	7bfa      	ldrb	r2, [r7, #15]
 8000cee:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cf0:	7bfa      	ldrb	r2, [r7, #15]
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	b298      	uxth	r0, r3
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	332e      	adds	r3, #46	@ 0x2e
 8000d04:	4602      	mov	r2, r0
 8000d06:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4413      	add	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	3318      	adds	r3, #24
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	331c      	adds	r3, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d30:	7bfa      	ldrb	r2, [r7, #15]
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4413      	add	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	3320      	adds	r3, #32
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d44:	7bfa      	ldrb	r2, [r7, #15]
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	009b      	lsls	r3, r3, #2
 8000d50:	440b      	add	r3, r1
 8000d52:	3324      	adds	r3, #36	@ 0x24
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	791b      	ldrb	r3, [r3, #4]
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d3af      	bcc.n	8000cc8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	e044      	b.n	8000df8 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	6879      	ldr	r1, [r7, #4]
 8000d72:	4613      	mov	r3, r2
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4413      	add	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000d96:	7bfa      	ldrb	r2, [r7, #15]
 8000d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d9a:	7bfa      	ldrb	r2, [r7, #15]
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	4413      	add	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	440b      	add	r3, r1
 8000da8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000db0:	7bfa      	ldrb	r2, [r7, #15]
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4613      	mov	r3, r2
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4413      	add	r3, r2
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dc6:	7bfa      	ldrb	r2, [r7, #15]
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ddc:	7bfa      	ldrb	r2, [r7, #15]
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	4613      	mov	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	4413      	add	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	440b      	add	r3, r1
 8000dea:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	3301      	adds	r3, #1
 8000df6:	73fb      	strb	r3, [r7, #15]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d3b5      	bcc.n	8000d6e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7c1a      	ldrb	r2, [r3, #16]
 8000e0a:	f88d 2000 	strb.w	r2, [sp]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e12:	f003 fddb 	bl	80049cc <USB_DevInit>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e013      	b.n	8000e50 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7b1b      	ldrb	r3, [r3, #12]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f001 f95c 	bl	80020fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fe2a 	bl	8005aa2 <USB_DevDisconnect>

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d101      	bne.n	8000e6e <HAL_PCD_Start+0x16>
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	e012      	b.n	8000e94 <HAL_PCD_Start+0x3c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fd38 	bl	80048f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f004 fdeb 	bl	8005a60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b08d      	sub	sp, #52	@ 0x34
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fea9 	bl	8005c0a <USB_GetMode>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 84b9 	bne.w	8001832 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fe0d 	bl	8005ae4 <USB_ReadInterrupts>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 84af 	beq.w	8001830 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	0a1b      	lsrs	r3, r3, #8
 8000edc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f004 fdfa 	bl	8005ae4 <USB_ReadInterrupts>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d107      	bne.n	8000f0a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	695a      	ldr	r2, [r3, #20]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f002 0202 	and.w	r2, r2, #2
 8000f08:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 fde8 	bl	8005ae4 <USB_ReadInterrupts>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	2b10      	cmp	r3, #16
 8000f1c:	d161      	bne.n	8000fe2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	699a      	ldr	r2, [r3, #24]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f022 0210 	bic.w	r2, r2, #16
 8000f2c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	f003 020f 	and.w	r2, r3, #15
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4413      	add	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	0c5b      	lsrs	r3, r3, #17
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d124      	bne.n	8000fa4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d035      	beq.n	8000fd2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	461a      	mov	r2, r3
 8000f78:	6a38      	ldr	r0, [r7, #32]
 8000f7a:	f004 fc1f 	bl	80057bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f8a:	441a      	add	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	695a      	ldr	r2, [r3, #20]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f9c:	441a      	add	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	e016      	b.n	8000fd2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	0c5b      	lsrs	r3, r3, #17
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	2b06      	cmp	r3, #6
 8000fae:	d110      	bne.n	8000fd2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6a38      	ldr	r0, [r7, #32]
 8000fbc:	f004 fbfe 	bl	80057bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fcc:	441a      	add	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	699a      	ldr	r2, [r3, #24]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0210 	orr.w	r2, r2, #16
 8000fe0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fd7c 	bl	8005ae4 <USB_ReadInterrupts>
 8000fec:	4603      	mov	r3, r0
 8000fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ff2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8000ff6:	f040 80a7 	bne.w	8001148 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4618      	mov	r0, r3
 8001004:	f004 fd81 	bl	8005b0a <USB_ReadDevAllOutEpInterrupt>
 8001008:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800100a:	e099      	b.n	8001140 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800100c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 808e 	beq.w	8001134 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	4611      	mov	r1, r2
 8001022:	4618      	mov	r0, r3
 8001024:	f004 fda5 	bl	8005b72 <USB_ReadDevOutEPInterrupt>
 8001028:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00c      	beq.n	800104e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	015a      	lsls	r2, r3, #5
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	4413      	add	r3, r2
 800103c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001040:	461a      	mov	r2, r3
 8001042:	2301      	movs	r3, #1
 8001044:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001046:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 fed1 	bl	8001df0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00c      	beq.n	8001072 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105a:	015a      	lsls	r2, r3, #5
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	4413      	add	r3, r2
 8001060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001064:	461a      	mov	r2, r3
 8001066:	2308      	movs	r3, #8
 8001068:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800106a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 ffa7 	bl	8001fc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	f003 0310 	and.w	r3, r3, #16
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	015a      	lsls	r2, r3, #5
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	4413      	add	r3, r2
 8001084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001088:	461a      	mov	r2, r3
 800108a:	2310      	movs	r3, #16
 800108c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d030      	beq.n	80010fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	695b      	ldr	r3, [r3, #20]
 800109c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010a0:	2b80      	cmp	r3, #128	@ 0x80
 80010a2:	d109      	bne.n	80010b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	69fa      	ldr	r2, [r7, #28]
 80010ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80010b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	3304      	adds	r3, #4
 80010cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	78db      	ldrb	r3, [r3, #3]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d108      	bne.n	80010e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2200      	movs	r2, #0
 80010da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f007 f914 	bl	8008310 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	015a      	lsls	r2, r3, #5
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	4413      	add	r3, r2
 80010f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80010f4:	461a      	mov	r2, r3
 80010f6:	2302      	movs	r3, #2
 80010f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	2b00      	cmp	r3, #0
 8001102:	d008      	beq.n	8001116 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	015a      	lsls	r2, r3, #5
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	4413      	add	r3, r2
 800110c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001110:	461a      	mov	r2, r3
 8001112:	2320      	movs	r3, #32
 8001114:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d009      	beq.n	8001134 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	015a      	lsls	r2, r3, #5
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	4413      	add	r3, r2
 8001128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800112c:	461a      	mov	r2, r3
 800112e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001132:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	3301      	adds	r3, #1
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800113a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800113c:	085b      	lsrs	r3, r3, #1
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001142:	2b00      	cmp	r3, #0
 8001144:	f47f af62 	bne.w	800100c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f004 fcc9 	bl	8005ae4 <USB_ReadInterrupts>
 8001152:	4603      	mov	r3, r0
 8001154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001158:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800115c:	f040 80db 	bne.w	8001316 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fcea 	bl	8005b3e <USB_ReadDevAllInEpInterrupt>
 800116a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001170:	e0cd      	b.n	800130e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80c2 	beq.w	8001302 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f004 fd10 	bl	8005bae <USB_ReadDevInEPInterrupt>
 800118e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d057      	beq.n	800124a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	2201      	movs	r2, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69f9      	ldr	r1, [r7, #28]
 80011b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80011ba:	4013      	ands	r3, r2
 80011bc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	015a      	lsls	r2, r3, #5
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	4413      	add	r3, r2
 80011c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80011ca:	461a      	mov	r2, r3
 80011cc:	2301      	movs	r3, #1
 80011ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	799b      	ldrb	r3, [r3, #6]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d132      	bne.n	800123e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	3320      	adds	r3, #32
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ee:	4613      	mov	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	4413      	add	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4403      	add	r3, r0
 80011f8:	331c      	adds	r3, #28
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4419      	add	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4403      	add	r3, r0
 800120c:	3320      	adds	r3, #32
 800120e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001212:	2b00      	cmp	r3, #0
 8001214:	d113      	bne.n	800123e <HAL_PCD_IRQHandler+0x3a2>
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	3324      	adds	r3, #36	@ 0x24
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d108      	bne.n	800123e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001236:	461a      	mov	r2, r3
 8001238:	2101      	movs	r1, #1
 800123a:	f004 fd17 	bl	8005c6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f006 ffdf 	bl	8008208 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d008      	beq.n	8001266 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001256:	015a      	lsls	r2, r3, #5
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	4413      	add	r3, r2
 800125c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001260:	461a      	mov	r2, r3
 8001262:	2308      	movs	r3, #8
 8001264:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f003 0310 	and.w	r3, r3, #16
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	015a      	lsls	r2, r3, #5
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800127c:	461a      	mov	r2, r3
 800127e:	2310      	movs	r3, #16
 8001280:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	015a      	lsls	r2, r3, #5
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	4413      	add	r3, r2
 8001294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001298:	461a      	mov	r2, r3
 800129a:	2340      	movs	r3, #64	@ 0x40
 800129c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d023      	beq.n	80012f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80012a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012aa:	6a38      	ldr	r0, [r7, #32]
 80012ac:	f003 fcfe 	bl	8004cac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80012b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b2:	4613      	mov	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	3310      	adds	r3, #16
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	3304      	adds	r3, #4
 80012c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d108      	bne.n	80012de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	2200      	movs	r2, #0
 80012d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 f82b 	bl	8008334 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	015a      	lsls	r2, r3, #5
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	4413      	add	r3, r2
 80012e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80012ea:	461a      	mov	r2, r3
 80012ec:	2302      	movs	r3, #2
 80012ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80012fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fcea 	bl	8001cd6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800130e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001310:	2b00      	cmp	r3, #0
 8001312:	f47f af2e 	bne.w	8001172 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f004 fbe2 	bl	8005ae4 <USB_ReadInterrupts>
 8001320:	4603      	mov	r3, r0
 8001322:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800132a:	d122      	bne.n	8001372 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001352:	2100      	movs	r1, #0
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fef5 	bl	8002144 <HAL_PCDEx_LPM_Callback>
 800135a:	e002      	b.n	8001362 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f006 ffc9 	bl	80082f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f004 fbb4 	bl	8005ae4 <USB_ReadInterrupts>
 800137c:	4603      	mov	r3, r0
 800137e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001386:	d112      	bne.n	80013ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b01      	cmp	r3, #1
 8001396:	d102      	bne.n	800139e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f006 ff85 	bl	80082a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80013ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fb96 	bl	8005ae4 <USB_ReadInterrupts>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80013c2:	d121      	bne.n	8001408 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80013d2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d111      	bne.n	8001402 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	f003 020f 	and.w	r2, r3, #15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80013f8:	2101      	movs	r1, #1
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fea2 	bl	8002144 <HAL_PCDEx_LPM_Callback>
 8001400:	e002      	b.n	8001408 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f006 ff50 	bl	80082a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fb69 	bl	8005ae4 <USB_ReadInterrupts>
 8001412:	4603      	mov	r3, r0
 8001414:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800141c:	f040 80b7 	bne.w	800158e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800142e:	f023 0301 	bic.w	r3, r3, #1
 8001432:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2110      	movs	r1, #16
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fc36 	bl	8004cac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001444:	e046      	b.n	80014d4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001448:	015a      	lsls	r2, r3, #5
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	4413      	add	r3, r2
 800144e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001452:	461a      	mov	r2, r3
 8001454:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001458:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800145a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800146a:	0151      	lsls	r1, r2, #5
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	440a      	add	r2, r1
 8001470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001474:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001478:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800147a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	4413      	add	r3, r2
 8001482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001486:	461a      	mov	r2, r3
 8001488:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800148c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800148e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800149e:	0151      	lsls	r1, r2, #5
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	440a      	add	r2, r1
 80014a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80014a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80014ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b0:	015a      	lsls	r2, r3, #5
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014be:	0151      	lsls	r1, r2, #5
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	440a      	add	r2, r1
 80014c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80014c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d0:	3301      	adds	r3, #1
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	791b      	ldrb	r3, [r3, #4]
 80014d8:	461a      	mov	r2, r3
 80014da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014dc:	4293      	cmp	r3, r2
 80014de:	d3b2      	bcc.n	8001446 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	69fa      	ldr	r2, [r7, #28]
 80014ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80014ee:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80014f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7bdb      	ldrb	r3, [r3, #15]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d016      	beq.n	800152a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800150c:	f043 030b 	orr.w	r3, r3, #11
 8001510:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001522:	f043 030b 	orr.w	r3, r3, #11
 8001526:	6453      	str	r3, [r2, #68]	@ 0x44
 8001528:	e015      	b.n	8001556 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001538:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800153c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001540:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001550:	f043 030b 	orr.w	r3, r3, #11
 8001554:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001564:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001568:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001578:	461a      	mov	r2, r3
 800157a:	f004 fb77 	bl	8005c6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695a      	ldr	r2, [r3, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800158c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f004 faa6 	bl	8005ae4 <USB_ReadInterrupts>
 8001598:	4603      	mov	r3, r0
 800159a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800159e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015a2:	d123      	bne.n	80015ec <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 fb3c 	bl	8005c26 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fbf3 	bl	8004d9e <USB_GetDevSpeed>
 80015b8:	4603      	mov	r3, r0
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681c      	ldr	r4, [r3, #0]
 80015c4:	f002 f854 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80015c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015ce:	461a      	mov	r2, r3
 80015d0:	4620      	mov	r0, r4
 80015d2:	f003 f8eb 	bl	80047ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f006 fe3e 	bl	8008258 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80015ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fa77 	bl	8005ae4 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d10a      	bne.n	8001616 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f006 fe1b 	bl	800823c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695a      	ldr	r2, [r3, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f002 0208 	and.w	r2, r2, #8
 8001614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f004 fa62 	bl	8005ae4 <USB_ReadInterrupts>
 8001620:	4603      	mov	r3, r0
 8001622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001626:	2b80      	cmp	r3, #128	@ 0x80
 8001628:	d123      	bne.n	8001672 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001636:	2301      	movs	r3, #1
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
 800163a:	e014      	b.n	8001666 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001640:	4613      	mov	r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4413      	add	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f000 fb0a 	bl	8001c74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001662:	3301      	adds	r3, #1
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	791b      	ldrb	r3, [r3, #4]
 800166a:	461a      	mov	r2, r3
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	4293      	cmp	r3, r2
 8001670:	d3e4      	bcc.n	800163c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f004 fa34 	bl	8005ae4 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001686:	d13c      	bne.n	8001702 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001688:	2301      	movs	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
 800168c:	e02b      	b.n	80016e6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800168e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	3318      	adds	r3, #24
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d115      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80016b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	da12      	bge.n	80016e0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016be:	4613      	mov	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	440b      	add	r3, r1
 80016c8:	3317      	adds	r3, #23
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 faca 	bl	8001c74 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	3301      	adds	r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	461a      	mov	r2, r3
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d3cd      	bcc.n	800168e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f004 f9ec 	bl	8005ae4 <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001716:	d156      	bne.n	80017c6 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001718:	2301      	movs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
 800171c:	e045      	b.n	80017aa <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	015a      	lsls	r2, r3, #5
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	4413      	add	r3, r2
 8001726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001732:	4613      	mov	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	4413      	add	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d12e      	bne.n	80017a4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001746:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001748:	2b00      	cmp	r3, #0
 800174a:	da2b      	bge.n	80017a4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	0c1a      	lsrs	r2, r3, #16
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001756:	4053      	eors	r3, r2
 8001758:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800175c:	2b00      	cmp	r3, #0
 800175e:	d121      	bne.n	80017a4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001764:	4613      	mov	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	4413      	add	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10a      	bne.n	80017a4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800179c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017a0:	6053      	str	r3, [r2, #4]
            break;
 80017a2:	e008      	b.n	80017b6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	3301      	adds	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	791b      	ldrb	r3, [r3, #4]
 80017ae:	461a      	mov	r2, r3
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d3b3      	bcc.n	800171e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80017c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f004 f98a 	bl	8005ae4 <USB_ReadInterrupts>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80017d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017da:	d10a      	bne.n	80017f2 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f006 fdbb 	bl	8008358 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80017f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f974 	bl	8005ae4 <USB_ReadInterrupts>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b04      	cmp	r3, #4
 8001804:	d115      	bne.n	8001832 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f006 fdab 	bl	8008374 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	430a      	orrs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	e000      	b.n	8001832 <HAL_PCD_IRQHandler+0x996>
      return;
 8001830:	bf00      	nop
    }
  }
}
 8001832:	3734      	adds	r7, #52	@ 0x34
 8001834:	46bd      	mov	sp, r7
 8001836:	bd90      	pop	{r4, r7, pc}

08001838 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_PCD_SetAddress+0x1a>
 800184e:	2302      	movs	r3, #2
 8001850:	e012      	b.n	8001878 <HAL_PCD_SetAddress+0x40>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f004 f8d3 	bl	8005a14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4603      	mov	r3, r0
 8001890:	70fb      	strb	r3, [r7, #3]
 8001892:	460b      	mov	r3, r1
 8001894:	803b      	strh	r3, [r7, #0]
 8001896:	4613      	mov	r3, r2
 8001898:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800189e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da0f      	bge.n	80018c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	f003 020f 	and.w	r2, r3, #15
 80018ac:	4613      	mov	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4413      	add	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	3310      	adds	r3, #16
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	3304      	adds	r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2201      	movs	r2, #1
 80018c2:	705a      	strb	r2, [r3, #1]
 80018c4:	e00f      	b.n	80018e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c6:	78fb      	ldrb	r3, [r7, #3]
 80018c8:	f003 020f 	and.w	r2, r3, #15
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	4413      	add	r3, r2
 80018dc:	3304      	adds	r3, #4
 80018de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	f003 030f 	and.w	r3, r3, #15
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80018f2:	883b      	ldrh	r3, [r7, #0]
 80018f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	78ba      	ldrb	r2, [r7, #2]
 8001900:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d102      	bne.n	8001920 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_PCD_EP_Open+0xae>
 800192a:	2302      	movs	r3, #2
 800192c:	e00e      	b.n	800194c <HAL_PCD_EP_Open+0xcc>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fa53 	bl	8004de8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800194a:	7afb      	ldrb	r3, [r7, #11]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001964:	2b00      	cmp	r3, #0
 8001966:	da0f      	bge.n	8001988 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	f003 020f 	and.w	r2, r3, #15
 800196e:	4613      	mov	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4413      	add	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	3310      	adds	r3, #16
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	705a      	strb	r2, [r3, #1]
 8001986:	e00f      	b.n	80019a8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001988:	78fb      	ldrb	r3, [r7, #3]
 800198a:	f003 020f 	and.w	r2, r3, #15
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	3304      	adds	r3, #4
 80019a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a8:	78fb      	ldrb	r3, [r7, #3]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_PCD_EP_Close+0x6e>
 80019be:	2302      	movs	r3, #2
 80019c0:	e00e      	b.n	80019e0 <HAL_PCD_EP_Close+0x8c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68f9      	ldr	r1, [r7, #12]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 fa91 	bl	8004ef8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	460b      	mov	r3, r1
 80019f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f8:	7afb      	ldrb	r3, [r7, #11]
 80019fa:	f003 020f 	and.w	r2, r3, #15
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3304      	adds	r3, #4
 8001a10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	2200      	movs	r2, #0
 8001a22:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2200      	movs	r2, #0
 8001a28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a2a:	7afb      	ldrb	r3, [r7, #11]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	799b      	ldrb	r3, [r3, #6]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	799b      	ldrb	r3, [r3, #6]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	6979      	ldr	r1, [r7, #20]
 8001a50:	f003 fb2e 	bl	80050b0 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	460b      	mov	r3, r1
 8001a68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 020f 	and.w	r2, r3, #15
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001a80:	681b      	ldr	r3, [r3, #0]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a9e:	7afb      	ldrb	r3, [r7, #11]
 8001aa0:	f003 020f 	and.w	r2, r3, #15
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	00db      	lsls	r3, r3, #3
 8001aa8:	4413      	add	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	3310      	adds	r3, #16
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	3304      	adds	r3, #4
 8001ab4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2201      	movs	r2, #1
 8001acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	799b      	ldrb	r3, [r3, #6]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	799b      	ldrb	r3, [r3, #6]
 8001af0:	461a      	mov	r2, r3
 8001af2:	6979      	ldr	r1, [r7, #20]
 8001af4:	f003 fadc 	bl	80050b0 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	7912      	ldrb	r2, [r2, #4]
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d901      	bls.n	8001b20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e04f      	b.n	8001bc0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da0f      	bge.n	8001b48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 020f 	and.w	r2, r3, #15
 8001b2e:	4613      	mov	r3, r2
 8001b30:	00db      	lsls	r3, r3, #3
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	3310      	adds	r3, #16
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2201      	movs	r2, #1
 8001b44:	705a      	strb	r2, [r3, #1]
 8001b46:	e00d      	b.n	8001b64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b48:	78fa      	ldrb	r2, [r7, #3]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_PCD_EP_SetStall+0x82>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e01d      	b.n	8001bc0 <HAL_PCD_EP_SetStall+0xbe>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68f9      	ldr	r1, [r7, #12]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fe6a 	bl	800586c <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7999      	ldrb	r1, [r3, #6]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f004 f85b 	bl	8005c6c <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	7912      	ldrb	r2, [r2, #4]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e042      	b.n	8001c6c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	da0f      	bge.n	8001c0e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	f003 020f 	and.w	r2, r3, #15
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	3310      	adds	r3, #16
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	3304      	adds	r3, #4
 8001c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	705a      	strb	r2, [r3, #1]
 8001c0c:	e00f      	b.n	8001c2e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	4413      	add	r3, r2
 8001c24:	3304      	adds	r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2200      	movs	r2, #0
 8001c32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_PCD_EP_ClrStall+0x86>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e00e      	b.n	8001c6c <HAL_PCD_EP_ClrStall+0xa4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68f9      	ldr	r1, [r7, #12]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fe73 	bl	8005948 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001c80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da0c      	bge.n	8001ca2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	f003 020f 	and.w	r2, r3, #15
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	3310      	adds	r3, #16
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e00c      	b.n	8001cbc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	f003 020f 	and.w	r2, r3, #15
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68f9      	ldr	r1, [r7, #12]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f003 fc92 	bl	80055ec <USB_EPStopXfer>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b08a      	sub	sp, #40	@ 0x28
 8001cda:	af02      	add	r7, sp, #8
 8001cdc:	6078      	str	r0, [r7, #4]
 8001cde:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d901      	bls.n	8001d0e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e06b      	b.n	8001de6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d902      	bls.n	8001d2a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d32:	e02a      	b.n	8001d8a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d902      	bls.n	8001d50 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	3303      	adds	r3, #3
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68d9      	ldr	r1, [r3, #12]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6978      	ldr	r0, [r7, #20]
 8001d6e:	f003 fce7 	bl	8005740 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	441a      	add	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	441a      	add	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	015a      	lsls	r2, r3, #5
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4413      	add	r3, r2
 8001d92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d809      	bhi.n	8001db4 <PCD_WriteEmptyTxFifo+0xde>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d203      	bcs.n	8001db4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1bf      	bne.n	8001d34 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d811      	bhi.n	8001de4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	6939      	ldr	r1, [r7, #16]
 8001ddc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001de0:	4013      	ands	r3, r2
 8001de2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	333c      	adds	r3, #60	@ 0x3c
 8001e08:	3304      	adds	r3, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	015a      	lsls	r2, r3, #5
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4413      	add	r3, r2
 8001e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	799b      	ldrb	r3, [r3, #6]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d17b      	bne.n	8001f1e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d015      	beq.n	8001e5c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	4a61      	ldr	r2, [pc, #388]	@ (8001fb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	f240 80b9 	bls.w	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80b3 	beq.w	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e52:	461a      	mov	r2, r3
 8001e54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0a7      	b.n	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0320 	and.w	r3, r3, #32
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d009      	beq.n	8001e7a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e72:	461a      	mov	r2, r3
 8001e74:	2320      	movs	r3, #32
 8001e76:	6093      	str	r3, [r2, #8]
 8001e78:	e098      	b.n	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f040 8093 	bne.w	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	@ (8001fb8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d90f      	bls.n	8001eae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eaa:	6093      	str	r3, [r2, #8]
 8001eac:	e07e      	b.n	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a1a      	ldr	r2, [r3, #32]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	0159      	lsls	r1, r3, #5
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	440b      	add	r3, r1
 8001ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d114      	bne.n	8001f10 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2101      	movs	r1, #1
 8001efc:	f003 feb6 	bl	8005c6c <USB_EP0_OutStart>
 8001f00:	e006      	b.n	8001f10 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	441a      	add	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4619      	mov	r1, r3
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f006 f95b 	bl	80081d2 <HAL_PCD_DataOutStageCallback>
 8001f1c:	e046      	b.n	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	4a26      	ldr	r2, [pc, #152]	@ (8001fbc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d124      	bne.n	8001f70 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00a      	beq.n	8001f46 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f42:	6093      	str	r3, [r2, #8]
 8001f44:	e032      	b.n	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2320      	movs	r3, #32
 8001f60:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f006 f932 	bl	80081d2 <HAL_PCD_DataOutStageCallback>
 8001f6e:	e01d      	b.n	8001fac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d114      	bne.n	8001fa0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	f003 fe66 	bl	8005c6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f006 f913 	bl	80081d2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	4f54300a 	.word	0x4f54300a
 8001fbc:	4f54310a 	.word	0x4f54310a

08001fc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	333c      	adds	r3, #60	@ 0x3c
 8001fd8:	3304      	adds	r3, #4
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4a15      	ldr	r2, [pc, #84]	@ (8002048 <PCD_EP_OutSetupPacket_int+0x88>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d90e      	bls.n	8002014 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800200c:	461a      	mov	r2, r3
 800200e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002012:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f006 f8ca 	bl	80081ae <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4a0a      	ldr	r2, [pc, #40]	@ (8002048 <PCD_EP_OutSetupPacket_int+0x88>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d90c      	bls.n	800203c <PCD_EP_OutSetupPacket_int+0x7c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	799b      	ldrb	r3, [r3, #6]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d108      	bne.n	800203c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002034:	461a      	mov	r2, r3
 8002036:	2101      	movs	r1, #1
 8002038:	f003 fe18 	bl	8005c6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	4f54300a 	.word	0x4f54300a

0800204c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
 8002058:	4613      	mov	r3, r2
 800205a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d107      	bne.n	800207a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800206a:	883b      	ldrh	r3, [r7, #0]
 800206c:	0419      	lsls	r1, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	430a      	orrs	r2, r1
 8002076:	629a      	str	r2, [r3, #40]	@ 0x28
 8002078:	e028      	b.n	80020cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4413      	add	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e00d      	b.n	80020aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3340      	adds	r3, #64	@ 0x40
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4413      	add	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3ec      	bcc.n	800208e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020b4:	883b      	ldrh	r3, [r7, #0]
 80020b6:	0418      	lsls	r0, r3, #16
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6819      	ldr	r1, [r3, #0]
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	3b01      	subs	r3, #1
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4302      	orrs	r2, r0
 80020c4:	3340      	adds	r3, #64	@ 0x40
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020da:	b480      	push	{r7}
 80020dc:	b083      	sub	sp, #12
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
 80020e2:	460b      	mov	r3, r1
 80020e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212e:	f043 0303 	orr.w	r3, r3, #3
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002164:	4b39      	ldr	r3, [pc, #228]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002168:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800216c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d10b      	bne.n	800218e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217c:	d905      	bls.n	800218a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800217e:	4b33      	ldr	r3, [pc, #204]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a32      	ldr	r2, [pc, #200]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e057      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002194:	d90a      	bls.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	4a2a      	ldr	r2, [pc, #168]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a8:	60d3      	str	r3, [r2, #12]
 80021aa:	e007      	b.n	80021bc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80021ac:	4b27      	ldr	r3, [pc, #156]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80021b4:	4925      	ldr	r1, [pc, #148]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021bc:	4b24      	ldr	r3, [pc, #144]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a24      	ldr	r2, [pc, #144]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	2232      	movs	r2, #50	@ 0x32
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	4a21      	ldr	r2, [pc, #132]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	3301      	adds	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80021da:	e002      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3b01      	subs	r3, #1
 80021e0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80021e2:	4b1a      	ldr	r3, [pc, #104]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1f3      	bne.n	80021dc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d01b      	beq.n	8002232 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a15      	ldr	r2, [pc, #84]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	2232      	movs	r2, #50	@ 0x32
 8002208:	fb02 f303 	mul.w	r3, r2, r3
 800220c:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800220e:	fba2 2303 	umull	r2, r3, r2, r3
 8002212:	099b      	lsrs	r3, r3, #6
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002218:	e002      	b.n	8002220 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3b01      	subs	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d102      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0xd6>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f3      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e000      	b.n	800223e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	46020800 	.word	0x46020800
 8002250:	20000000 	.word	0x20000000
 8002254:	10624dd3 	.word	0x10624dd3

08002258 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_PWREx_GetVoltageRange+0x18>)
 800225e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	46020800 	.word	0x46020800

08002274 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002278:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_PWREx_EnableVddUSB+0x1c>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <HAL_PWREx_EnableVddUSB+0x1c>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002282:	6113      	str	r3, [r2, #16]
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	46020800 	.word	0x46020800

08002294 <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 800229a:	f7ff ffdd 	bl	8002258 <HAL_PWREx_GetVoltageRange>
 800229e:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80022a6:	d003      	beq.n	80022b0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022ae:	d107      	bne.n	80022c0 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80022b0:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a05      	ldr	r2, [pc, #20]	@ (80022cc <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80022b6:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80022ba:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	e000      	b.n	80022c2 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	46020800 	.word	0x46020800

080022d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08e      	sub	sp, #56	@ 0x38
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f000 bec8 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ea:	4b99      	ldr	r3, [pc, #612]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f4:	4b96      	ldr	r3, [pc, #600]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80022f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 816c 	beq.w	80025e4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	2b00      	cmp	r3, #0
 8002310:	d007      	beq.n	8002322 <HAL_RCC_OscConfig+0x52>
 8002312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002314:	2b0c      	cmp	r3, #12
 8002316:	f040 80de 	bne.w	80024d6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800231a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231c:	2b01      	cmp	r3, #1
 800231e:	f040 80da 	bne.w	80024d6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d102      	bne.n	8002330 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f000 bea5 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002334:	4b86      	ldr	r3, [pc, #536]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d004      	beq.n	800234a <HAL_RCC_OscConfig+0x7a>
 8002340:	4b83      	ldr	r3, [pc, #524]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002348:	e005      	b.n	8002356 <HAL_RCC_OscConfig+0x86>
 800234a:	4b81      	ldr	r3, [pc, #516]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800234c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002356:	4293      	cmp	r3, r2
 8002358:	d255      	bcs.n	8002406 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002364:	4618      	mov	r0, r3
 8002366:	f001 f99d 	bl	80036a4 <RCC_SetFlashLatencyFromMSIRange>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f000 be82 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002376:	4b76      	ldr	r3, [pc, #472]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4a75      	ldr	r2, [pc, #468]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800237c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002380:	6093      	str	r3, [r2, #8]
 8002382:	4b73      	ldr	r3, [pc, #460]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	4970      	ldr	r1, [pc, #448]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002398:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800239c:	d309      	bcc.n	80023b2 <HAL_RCC_OscConfig+0xe2>
 800239e:	4b6c      	ldr	r3, [pc, #432]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f023 021f 	bic.w	r2, r3, #31
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4969      	ldr	r1, [pc, #420]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60cb      	str	r3, [r1, #12]
 80023b0:	e07e      	b.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	da0a      	bge.n	80023d0 <HAL_RCC_OscConfig+0x100>
 80023ba:	4b65      	ldr	r3, [pc, #404]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	015b      	lsls	r3, r3, #5
 80023c8:	4961      	ldr	r1, [pc, #388]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60cb      	str	r3, [r1, #12]
 80023ce:	e06f      	b.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023d8:	d30a      	bcc.n	80023f0 <HAL_RCC_OscConfig+0x120>
 80023da:	4b5d      	ldr	r3, [pc, #372]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	4959      	ldr	r1, [pc, #356]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60cb      	str	r3, [r1, #12]
 80023ee:	e05f      	b.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
 80023f0:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	03db      	lsls	r3, r3, #15
 80023fe:	4954      	ldr	r1, [pc, #336]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002400:	4313      	orrs	r3, r2
 8002402:	60cb      	str	r3, [r1, #12]
 8002404:	e054      	b.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002406:	4b52      	ldr	r3, [pc, #328]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4a51      	ldr	r2, [pc, #324]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800240c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002410:	6093      	str	r3, [r2, #8]
 8002412:	4b4f      	ldr	r3, [pc, #316]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	494c      	ldr	r1, [pc, #304]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002420:	4313      	orrs	r3, r2
 8002422:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800242c:	d309      	bcc.n	8002442 <HAL_RCC_OscConfig+0x172>
 800242e:	4b48      	ldr	r3, [pc, #288]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 021f 	bic.w	r2, r3, #31
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4945      	ldr	r1, [pc, #276]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800243c:	4313      	orrs	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
 8002440:	e028      	b.n	8002494 <HAL_RCC_OscConfig+0x1c4>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	da0a      	bge.n	8002460 <HAL_RCC_OscConfig+0x190>
 800244a:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	015b      	lsls	r3, r3, #5
 8002458:	493d      	ldr	r1, [pc, #244]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800245a:	4313      	orrs	r3, r2
 800245c:	60cb      	str	r3, [r1, #12]
 800245e:	e019      	b.n	8002494 <HAL_RCC_OscConfig+0x1c4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002468:	d30a      	bcc.n	8002480 <HAL_RCC_OscConfig+0x1b0>
 800246a:	4b39      	ldr	r3, [pc, #228]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	029b      	lsls	r3, r3, #10
 8002478:	4935      	ldr	r1, [pc, #212]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800247a:	4313      	orrs	r3, r2
 800247c:	60cb      	str	r3, [r1, #12]
 800247e:	e009      	b.n	8002494 <HAL_RCC_OscConfig+0x1c4>
 8002480:	4b33      	ldr	r3, [pc, #204]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	03db      	lsls	r3, r3, #15
 800248e:	4930      	ldr	r1, [pc, #192]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002490:	4313      	orrs	r3, r2
 8002492:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 f900 	bl	80036a4 <RCC_SetFlashLatencyFromMSIRange>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d002      	beq.n	80024b0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f000 bde5 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80024b0:	f001 f8de 	bl	8003670 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <HAL_RCC_OscConfig+0x284>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f91b 	bl	80006f4 <HAL_InitTick>
 80024be:	4603      	mov	r3, r0
 80024c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80024c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808a 	beq.w	80025e2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80024ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024d2:	f000 bdd2 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d066      	beq.n	80025ac <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80024de:	4b1c      	ldr	r3, [pc, #112]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80024ea:	f7fe f98d 	bl	8000808 <HAL_GetTick>
 80024ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80024f0:	e009      	b.n	8002506 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f2:	f7fe f989 	bl	8000808 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d902      	bls.n	8002506 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	f000 bdba 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002506:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ef      	beq.n	80024f2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002512:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	4a0e      	ldr	r2, [pc, #56]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800251c:	6093      	str	r3, [r2, #8]
 800251e:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	4909      	ldr	r1, [pc, #36]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800252c:	4313      	orrs	r3, r2
 800252e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002538:	d30e      	bcc.n	8002558 <HAL_RCC_OscConfig+0x288>
 800253a:	4b05      	ldr	r3, [pc, #20]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f023 021f 	bic.w	r2, r3, #31
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4902      	ldr	r1, [pc, #8]	@ (8002550 <HAL_RCC_OscConfig+0x280>)
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
 800254c:	e04a      	b.n	80025e4 <HAL_RCC_OscConfig+0x314>
 800254e:	bf00      	nop
 8002550:	46020c00 	.word	0x46020c00
 8002554:	20000004 	.word	0x20000004
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	da0a      	bge.n	8002576 <HAL_RCC_OscConfig+0x2a6>
 8002560:	4b98      	ldr	r3, [pc, #608]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	015b      	lsls	r3, r3, #5
 800256e:	4995      	ldr	r1, [pc, #596]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	4313      	orrs	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
 8002574:	e036      	b.n	80025e4 <HAL_RCC_OscConfig+0x314>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257e:	d30a      	bcc.n	8002596 <HAL_RCC_OscConfig+0x2c6>
 8002580:	4b90      	ldr	r3, [pc, #576]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	029b      	lsls	r3, r3, #10
 800258e:	498d      	ldr	r1, [pc, #564]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	60cb      	str	r3, [r1, #12]
 8002594:	e026      	b.n	80025e4 <HAL_RCC_OscConfig+0x314>
 8002596:	4b8b      	ldr	r3, [pc, #556]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	03db      	lsls	r3, r3, #15
 80025a4:	4987      	ldr	r1, [pc, #540]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60cb      	str	r3, [r1, #12]
 80025aa:	e01b      	b.n	80025e4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80025ac:	4b85      	ldr	r3, [pc, #532]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a84      	ldr	r2, [pc, #528]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025b2:	f023 0301 	bic.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80025b8:	f7fe f926 	bl	8000808 <HAL_GetTick>
 80025bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025be:	e009      	b.n	80025d4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c0:	f7fe f922 	bl	8000808 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d902      	bls.n	80025d4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	f000 bd53 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025d4:	4b7b      	ldr	r3, [pc, #492]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1ef      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2f0>
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 808b 	beq.w	8002708 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d005      	beq.n	8002604 <HAL_RCC_OscConfig+0x334>
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002600:	2b03      	cmp	r3, #3
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d17d      	bne.n	8002708 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f000 bd34 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x35a>
 800261c:	4b69      	ldr	r3, [pc, #420]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a68      	ldr	r2, [pc, #416]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	e041      	b.n	80026ae <HAL_RCC_OscConfig+0x3de>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002632:	d112      	bne.n	800265a <HAL_RCC_OscConfig+0x38a>
 8002634:	4b63      	ldr	r3, [pc, #396]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a62      	ldr	r2, [pc, #392]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b60      	ldr	r3, [pc, #384]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5f      	ldr	r2, [pc, #380]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002646:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b5d      	ldr	r3, [pc, #372]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e029      	b.n	80026ae <HAL_RCC_OscConfig+0x3de>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002662:	d112      	bne.n	800268a <HAL_RCC_OscConfig+0x3ba>
 8002664:	4b57      	ldr	r3, [pc, #348]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a56      	ldr	r2, [pc, #344]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800266a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b54      	ldr	r3, [pc, #336]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a53      	ldr	r2, [pc, #332]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b51      	ldr	r3, [pc, #324]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a50      	ldr	r2, [pc, #320]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e011      	b.n	80026ae <HAL_RCC_OscConfig+0x3de>
 800268a:	4b4e      	ldr	r3, [pc, #312]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a4d      	ldr	r2, [pc, #308]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	4b4b      	ldr	r3, [pc, #300]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800269c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b48      	ldr	r3, [pc, #288]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a47      	ldr	r2, [pc, #284]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d014      	beq.n	80026e0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80026b6:	f7fe f8a7 	bl	8000808 <HAL_GetTick>
 80026ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026bc:	e009      	b.n	80026d2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026be:	f7fe f8a3 	bl	8000808 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	@ 0x64
 80026ca:	d902      	bls.n	80026d2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	f000 bcd4 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d2:	4b3c      	ldr	r3, [pc, #240]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ef      	beq.n	80026be <HAL_RCC_OscConfig+0x3ee>
 80026de:	e013      	b.n	8002708 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80026e0:	f7fe f892 	bl	8000808 <HAL_GetTick>
 80026e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e6:	e009      	b.n	80026fc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe f88e 	bl	8000808 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d902      	bls.n	80026fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	f000 bcbf 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fc:	4b31      	ldr	r3, [pc, #196]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ef      	bne.n	80026e8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d05f      	beq.n	80027d4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002716:	2b04      	cmp	r3, #4
 8002718:	d005      	beq.n	8002726 <HAL_RCC_OscConfig+0x456>
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d114      	bne.n	800274a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	2b02      	cmp	r3, #2
 8002724:	d111      	bne.n	800274a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	f000 bca3 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	4920      	ldr	r1, [pc, #128]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002748:	e044      	b.n	80027d4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d024      	beq.n	800279c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8002752:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800275c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800275e:	f7fe f853 	bl	8000808 <HAL_GetTick>
 8002762:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002764:	e009      	b.n	800277a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002766:	f7fe f84f 	bl	8000808 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d902      	bls.n	800277a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	f000 bc80 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277a:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0ef      	beq.n	8002766 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	490b      	ldr	r1, [pc, #44]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 8002796:	4313      	orrs	r3, r2
 8002798:	610b      	str	r3, [r1, #16]
 800279a:	e01b      	b.n	80027d4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800279c:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027a8:	f7fe f82e 	bl	8000808 <HAL_GetTick>
 80027ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b0:	f7fe f82a 	bl	8000808 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d904      	bls.n	80027c8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	f000 bc5b 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
 80027c4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	4baf      	ldr	r3, [pc, #700]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1ed      	bne.n	80027b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80c8 	beq.w	8002972 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e8:	4ba7      	ldr	r3, [pc, #668]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d111      	bne.n	800281a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	4ba4      	ldr	r3, [pc, #656]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027fc:	4aa2      	ldr	r2, [pc, #648]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002806:	4ba0      	ldr	r3, [pc, #640]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8002814:	2301      	movs	r3, #1
 8002816:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800281a:	4b9c      	ldr	r3, [pc, #624]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 800281c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d119      	bne.n	800285a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002826:	4b99      	ldr	r3, [pc, #612]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	4a98      	ldr	r2, [pc, #608]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002832:	f7fd ffe9 	bl	8000808 <HAL_GetTick>
 8002836:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002838:	e009      	b.n	800284e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283a:	f7fd ffe5 	bl	8000808 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d902      	bls.n	800284e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	f000 bc16 	b.w	800307a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800284e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 8002850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ef      	beq.n	800283a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d05f      	beq.n	8002922 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8002862:	4b89      	ldr	r3, [pc, #548]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002868:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	429a      	cmp	r2, r3
 8002876:	d037      	beq.n	80028e8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002888:	2b00      	cmp	r3, #0
 800288a:	d101      	bne.n	8002890 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e3f4      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01b      	beq.n	80028d2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800289a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 800289c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a0:	4a79      	ldr	r2, [pc, #484]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80028a2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80028a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80028aa:	f7fd ffad 	bl	8000808 <HAL_GetTick>
 80028ae:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7fd ffa9 	bl	8000808 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e3da      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028c4:	4b70      	ldr	r3, [pc, #448]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80028c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ef      	bne.n	80028b2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80028d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80028d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4969      	ldr	r1, [pc, #420]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80028e8:	4b67      	ldr	r3, [pc, #412]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80028ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ee:	4a66      	ldr	r2, [pc, #408]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80028f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80028f8:	f7fd ff86 	bl	8000808 <HAL_GetTick>
 80028fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7fd ff82 	bl	8000808 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b05      	cmp	r3, #5
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e3b3      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002912:	4b5d      	ldr	r3, [pc, #372]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0ef      	beq.n	8002900 <HAL_RCC_OscConfig+0x630>
 8002920:	e01b      	b.n	800295a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8002922:	4b59      	ldr	r3, [pc, #356]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002928:	4a57      	ldr	r2, [pc, #348]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 800292a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800292e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002932:	f7fd ff69 	bl	8000808 <HAL_GetTick>
 8002936:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293a:	f7fd ff65 	bl	8000808 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b05      	cmp	r3, #5
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e396      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800294c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 800294e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ef      	bne.n	800293a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800295a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4b49      	ldr	r3, [pc, #292]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002968:	4a47      	ldr	r2, [pc, #284]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 800296a:	f023 0304 	bic.w	r3, r3, #4
 800296e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 8111 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002980:	2300      	movs	r3, #0
 8002982:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b40      	ldr	r3, [pc, #256]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b3c      	ldr	r3, [pc, #240]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029a4:	4b38      	ldr	r3, [pc, #224]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029b8:	4b34      	ldr	r3, [pc, #208]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d118      	bne.n	80029f6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029c4:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 80029c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c8:	4a30      	ldr	r2, [pc, #192]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d0:	f7fd ff1a 	bl	8000808 <HAL_GetTick>
 80029d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d8:	f7fd ff16 	bl	8000808 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e347      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029ea:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <HAL_RCC_OscConfig+0x7bc>)
 80029ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01f      	beq.n	8002a42 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d010      	beq.n	8002a30 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a14:	4a1c      	ldr	r2, [pc, #112]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a24:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a2e:	e018      	b.n	8002a62 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a36:	4a14      	ldr	r2, [pc, #80]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a40:	e00f      	b.n	8002a62 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a42:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a48:	4a0f      	ldr	r2, [pc, #60]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a52:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a58:	4a0b      	ldr	r2, [pc, #44]	@ (8002a88 <HAL_RCC_OscConfig+0x7b8>)
 8002a5a:	f023 0304 	bic.w	r3, r3, #4
 8002a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d057      	beq.n	8002b1a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002a6a:	f7fd fecd 	bl	8000808 <HAL_GetTick>
 8002a6e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a70:	e00e      	b.n	8002a90 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fd fec9 	bl	8000808 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d905      	bls.n	8002a90 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e2f8      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
 8002a88:	46020c00 	.word	0x46020c00
 8002a8c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a90:	4b9c      	ldr	r3, [pc, #624]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0e9      	beq.n	8002a72 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d01b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002aaa:	4b96      	ldr	r3, [pc, #600]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ab0:	4a94      	ldr	r2, [pc, #592]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ab6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abc:	f7fd fea4 	bl	8000808 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e2d3      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ad2:	4b8c      	ldr	r3, [pc, #560]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ed      	beq.n	8002abc <HAL_RCC_OscConfig+0x7ec>
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ae2:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ae8:	4a86      	ldr	r2, [pc, #536]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002aea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fd fe88 	bl	8000808 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e2b7      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b0a:	4b7e      	ldr	r3, [pc, #504]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ed      	bne.n	8002af4 <HAL_RCC_OscConfig+0x824>
 8002b18:	e037      	b.n	8002b8a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002b1a:	f7fd fe75 	bl	8000808 <HAL_GetTick>
 8002b1e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fd fe71 	bl	8000808 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e2a0      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b38:	4b72      	ldr	r3, [pc, #456]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ed      	bne.n	8002b22 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002b46:	4b6f      	ldr	r3, [pc, #444]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01a      	beq.n	8002b8a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b54:	4b6b      	ldr	r3, [pc, #428]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b5a:	4a6a      	ldr	r2, [pc, #424]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b60:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b66:	f7fd fe4f 	bl	8000808 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e27e      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b7c:	4b61      	ldr	r3, [pc, #388]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ed      	bne.n	8002b66 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b8a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b5c      	ldr	r3, [pc, #368]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b98:	4a5a      	ldr	r2, [pc, #360]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d036      	beq.n	8002c1c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d019      	beq.n	8002bea <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002bb6:	4b53      	ldr	r3, [pc, #332]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a52      	ldr	r2, [pc, #328]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002bbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bc0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002bc2:	f7fd fe21 	bl	8000808 <HAL_GetTick>
 8002bc6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bca:	f7fd fe1d 	bl	8000808 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e24e      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bdc:	4b49      	ldr	r3, [pc, #292]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x8fa>
 8002be8:	e018      	b.n	8002c1c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002bea:	4b46      	ldr	r3, [pc, #280]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a45      	ldr	r2, [pc, #276]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bf4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002bf6:	f7fd fe07 	bl	8000808 <HAL_GetTick>
 8002bfa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bfe:	f7fd fe03 	bl	8000808 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e234      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c10:	4b3c      	ldr	r3, [pc, #240]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f0      	bne.n	8002bfe <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d036      	beq.n	8002c96 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d019      	beq.n	8002c64 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002c30:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a33      	ldr	r2, [pc, #204]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c3c:	f7fd fde4 	bl	8000808 <HAL_GetTick>
 8002c40:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c44:	f7fd fde0 	bl	8000808 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e211      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c56:	4b2b      	ldr	r3, [pc, #172]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x974>
 8002c62:	e018      	b.n	8002c96 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a26      	ldr	r2, [pc, #152]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002c6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c70:	f7fd fdca 	bl	8000808 <HAL_GetTick>
 8002c74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c78:	f7fd fdc6 	bl	8000808 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e1f7      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d07f      	beq.n	8002da2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d062      	beq.n	8002d70 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002caa:	4b16      	ldr	r3, [pc, #88]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	4a15      	ldr	r2, [pc, #84]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002cb0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cb4:	6093      	str	r3, [r2, #8]
 8002cb6:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	4910      	ldr	r1, [pc, #64]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002cd0:	d309      	bcc.n	8002ce6 <HAL_RCC_OscConfig+0xa16>
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f023 021f 	bic.w	r2, r3, #31
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4909      	ldr	r1, [pc, #36]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60cb      	str	r3, [r1, #12]
 8002ce4:	e02a      	b.n	8002d3c <HAL_RCC_OscConfig+0xa6c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0c      	bge.n	8002d08 <HAL_RCC_OscConfig+0xa38>
 8002cee:	4b05      	ldr	r3, [pc, #20]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	015b      	lsls	r3, r3, #5
 8002cfc:	4901      	ldr	r1, [pc, #4]	@ (8002d04 <HAL_RCC_OscConfig+0xa34>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	60cb      	str	r3, [r1, #12]
 8002d02:	e01b      	b.n	8002d3c <HAL_RCC_OscConfig+0xa6c>
 8002d04:	46020c00 	.word	0x46020c00
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d10:	d30a      	bcc.n	8002d28 <HAL_RCC_OscConfig+0xa58>
 8002d12:	4ba1      	ldr	r3, [pc, #644]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	029b      	lsls	r3, r3, #10
 8002d20:	499d      	ldr	r1, [pc, #628]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	60cb      	str	r3, [r1, #12]
 8002d26:	e009      	b.n	8002d3c <HAL_RCC_OscConfig+0xa6c>
 8002d28:	4b9b      	ldr	r3, [pc, #620]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	03db      	lsls	r3, r3, #15
 8002d36:	4998      	ldr	r1, [pc, #608]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002d3c:	4b96      	ldr	r3, [pc, #600]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a95      	ldr	r2, [pc, #596]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d48:	f7fd fd5e 	bl	8000808 <HAL_GetTick>
 8002d4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002d50:	f7fd fd5a 	bl	8000808 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e18b      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d62:	4b8d      	ldr	r3, [pc, #564]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0xa80>
 8002d6e:	e018      	b.n	8002da2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002d70:	4b89      	ldr	r3, [pc, #548]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a88      	ldr	r2, [pc, #544]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d76:	f023 0310 	bic.w	r3, r3, #16
 8002d7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d7c:	f7fd fd44 	bl	8000808 <HAL_GetTick>
 8002d80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002d84:	f7fd fd40 	bl	8000808 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e171      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002d96:	4b80      	ldr	r3, [pc, #512]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0320 	and.w	r3, r3, #32
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8166 	beq.w	8003078 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db2:	4b79      	ldr	r3, [pc, #484]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	f000 80f2 	beq.w	8002fa4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	f040 80c5 	bne.w	8002f54 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002dca:	4b73      	ldr	r3, [pc, #460]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a72      	ldr	r2, [pc, #456]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002dd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dd4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002dd6:	f7fd fd17 	bl	8000808 <HAL_GetTick>
 8002dda:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fd fd13 	bl	8000808 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e144      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002df0:	4b69      	ldr	r3, [pc, #420]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dfc:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d111      	bne.n	8002e2e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	4b63      	ldr	r3, [pc, #396]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e10:	4a61      	ldr	r2, [pc, #388]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002f9c <HAL_RCC_OscConfig+0xccc>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e42:	4b56      	ldr	r3, [pc, #344]	@ (8002f9c <HAL_RCC_OscConfig+0xccc>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4a55      	ldr	r2, [pc, #340]	@ (8002f9c <HAL_RCC_OscConfig+0xccc>)
 8002e48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e4c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002e4e:	4b52      	ldr	r3, [pc, #328]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e62:	3a01      	subs	r2, #1
 8002e64:	0212      	lsls	r2, r2, #8
 8002e66:	4311      	orrs	r1, r2
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	494a      	ldr	r1, [pc, #296]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e74:	4b48      	ldr	r3, [pc, #288]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002e76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e78:	4b49      	ldr	r3, [pc, #292]	@ (8002fa0 <HAL_RCC_OscConfig+0xcd0>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e80:	3a01      	subs	r2, #1
 8002e82:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	0252      	lsls	r2, r2, #9
 8002e8e:	b292      	uxth	r2, r2
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e96:	3a01      	subs	r2, #1
 8002e98:	0412      	lsls	r2, r2, #16
 8002e9a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ea4:	3a01      	subs	r2, #1
 8002ea6:	0612      	lsls	r2, r2, #24
 8002ea8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002eac:	430a      	orrs	r2, r1
 8002eae:	493a      	ldr	r1, [pc, #232]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002eb4:	4b38      	ldr	r3, [pc, #224]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	4a37      	ldr	r2, [pc, #220]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002eba:	f023 0310 	bic.w	r3, r3, #16
 8002ebe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec4:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002eca:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ece:	4a32      	ldr	r2, [pc, #200]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002ed0:	f043 0310 	orr.w	r3, r3, #16
 8002ed4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002ed6:	4b30      	ldr	r3, [pc, #192]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eda:	f023 020c 	bic.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	492d      	ldr	r1, [pc, #180]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f9c <HAL_RCC_OscConfig+0xccc>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a29      	ldr	r2, [pc, #164]	@ (8002f9c <HAL_RCC_OscConfig+0xccc>)
 8002ef6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002efa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002efc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002f04:	4b24      	ldr	r3, [pc, #144]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0a:	4a23      	ldr	r2, [pc, #140]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b20      	ldr	r3, [pc, #128]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1f      	ldr	r2, [pc, #124]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f20:	f7fd fc72 	bl	8000808 <HAL_GetTick>
 8002f24:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fd fc6e 	bl	8000808 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e09f      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f3a:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4a:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f50:	6293      	str	r3, [r2, #40]	@ 0x28
 8002f52:	e091      	b.n	8003078 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f60:	f7fd fc52 	bl	8000808 <HAL_GetTick>
 8002f64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fd fc4e 	bl	8000808 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e07f      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f7a:	4b07      	ldr	r3, [pc, #28]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002f86:	4b04      	ldr	r3, [pc, #16]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f8a:	4a03      	ldr	r2, [pc, #12]	@ (8002f98 <HAL_RCC_OscConfig+0xcc8>)
 8002f8c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002f90:	f023 0303 	bic.w	r3, r3, #3
 8002f94:	6293      	str	r3, [r2, #40]	@ 0x28
 8002f96:	e06f      	b.n	8003078 <HAL_RCC_OscConfig+0xda8>
 8002f98:	46020c00 	.word	0x46020c00
 8002f9c:	46020800 	.word	0x46020800
 8002fa0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002fa4:	4b37      	ldr	r3, [pc, #220]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002faa:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 8002fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fae:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d039      	beq.n	800302c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d132      	bne.n	800302c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d129      	bne.n	800302c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d122      	bne.n	800302c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d11a      	bne.n	800302c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	0a5b      	lsrs	r3, r3, #9
 8002ffa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003002:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003004:	429a      	cmp	r2, r3
 8003006:	d111      	bne.n	800302c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003014:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003016:	429a      	cmp	r2, r3
 8003018:	d108      	bne.n	800302c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	0e1b      	lsrs	r3, r3, #24
 800301e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003026:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e024      	b.n	800307a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003030:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	08db      	lsrs	r3, r3, #3
 8003036:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800303e:	429a      	cmp	r2, r3
 8003040:	d01a      	beq.n	8003078 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003042:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	4a0f      	ldr	r2, [pc, #60]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 8003048:	f023 0310 	bic.w	r3, r3, #16
 800304c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fd fbdb 	bl	8000808 <HAL_GetTick>
 8003052:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003054:	bf00      	nop
 8003056:	f7fd fbd7 	bl	8000808 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	4293      	cmp	r3, r2
 8003060:	d0f9      	beq.n	8003056 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	4a07      	ldr	r2, [pc, #28]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 800306e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003070:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <HAL_RCC_OscConfig+0xdb4>)
 8003072:	f043 0310 	orr.w	r3, r3, #16
 8003076:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3738      	adds	r7, #56	@ 0x38
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	46020c00 	.word	0x46020c00

08003088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e1d9      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800309c:	4b9b      	ldr	r3, [pc, #620]	@ (800330c <HAL_RCC_ClockConfig+0x284>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d910      	bls.n	80030cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b98      	ldr	r3, [pc, #608]	@ (800330c <HAL_RCC_ClockConfig+0x284>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 020f 	bic.w	r2, r3, #15
 80030b2:	4996      	ldr	r1, [pc, #600]	@ (800330c <HAL_RCC_ClockConfig+0x284>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b94      	ldr	r3, [pc, #592]	@ (800330c <HAL_RCC_ClockConfig+0x284>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e1c1      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80030de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80030e8:	4b89      	ldr	r3, [pc, #548]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	4986      	ldr	r1, [pc, #536]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0308 	and.w	r3, r3, #8
 8003102:	2b00      	cmp	r3, #0
 8003104:	d012      	beq.n	800312c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	4b81      	ldr	r3, [pc, #516]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003114:	429a      	cmp	r2, r3
 8003116:	d909      	bls.n	800312c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003118:	4b7d      	ldr	r3, [pc, #500]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	497a      	ldr	r1, [pc, #488]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003128:	4313      	orrs	r3, r2
 800312a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b74      	ldr	r3, [pc, #464]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003144:	429a      	cmp	r2, r3
 8003146:	d908      	bls.n	800315a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003148:	4b71      	ldr	r3, [pc, #452]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	496e      	ldr	r1, [pc, #440]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003156:	4313      	orrs	r3, r2
 8003158:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	4b69      	ldr	r3, [pc, #420]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	429a      	cmp	r2, r3
 8003174:	d908      	bls.n	8003188 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003176:	4b66      	ldr	r3, [pc, #408]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 020f 	bic.w	r2, r3, #15
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4963      	ldr	r1, [pc, #396]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003184:	4313      	orrs	r3, r2
 8003186:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80d2 	beq.w	800333a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003196:	2300      	movs	r3, #0
 8003198:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d143      	bne.n	800322a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d110      	bne.n	80031d2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031b0:	4b57      	ldr	r3, [pc, #348]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80031b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031b6:	4a56      	ldr	r2, [pc, #344]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80031c0:	4b53      	ldr	r3, [pc, #332]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80031c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80031d2:	f7fd fb19 	bl	8000808 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80031d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003314 <HAL_RCC_ClockConfig+0x28c>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80031e6:	f7fd fb0f 	bl	8000808 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e12b      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80031f8:	4b46      	ldr	r3, [pc, #280]	@ (8003314 <HAL_RCC_ClockConfig+0x28c>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003204:	7dfb      	ldrb	r3, [r7, #23]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800320a:	4b41      	ldr	r3, [pc, #260]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003210:	4a3f      	ldr	r2, [pc, #252]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003212:	f023 0304 	bic.w	r3, r3, #4
 8003216:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800321a:	4b3d      	ldr	r3, [pc, #244]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d121      	bne.n	800326a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e112      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003232:	4b37      	ldr	r3, [pc, #220]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d115      	bne.n	800326a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e106      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800324a:	4b31      	ldr	r3, [pc, #196]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0fa      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800325a:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0f2      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b29      	ldr	r3, [pc, #164]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4926      	ldr	r1, [pc, #152]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003278:	4313      	orrs	r3, r2
 800327a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800327c:	f7fd fac4 	bl	8000808 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d112      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fd fabc 	bl	8000808 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0d6      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b0c      	cmp	r3, #12
 80032ac:	d1ee      	bne.n	800328c <HAL_RCC_ClockConfig+0x204>
 80032ae:	e044      	b.n	800333a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d112      	bne.n	80032de <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ba:	f7fd faa5 	bl	8000808 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0bf      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f003 030c 	and.w	r3, r3, #12
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_ClockConfig+0x232>
 80032dc:	e02d      	b.n	800333a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d123      	bne.n	800332e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032e6:	e00a      	b.n	80032fe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e8:	f7fd fa8e 	bl	8000808 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e0a8      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032fe:	4b04      	ldr	r3, [pc, #16]	@ (8003310 <HAL_RCC_ClockConfig+0x288>)
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1ee      	bne.n	80032e8 <HAL_RCC_ClockConfig+0x260>
 800330a:	e016      	b.n	800333a <HAL_RCC_ClockConfig+0x2b2>
 800330c:	40022000 	.word	0x40022000
 8003310:	46020c00 	.word	0x46020c00
 8003314:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fd fa76 	bl	8000808 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e090      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b4a      	ldr	r3, [pc, #296]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b04      	cmp	r3, #4
 8003338:	d1ee      	bne.n	8003318 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	4b43      	ldr	r3, [pc, #268]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	429a      	cmp	r2, r3
 8003354:	d208      	bcs.n	8003368 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003356:	4b40      	ldr	r3, [pc, #256]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 020f 	bic.w	r2, r3, #15
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	493d      	ldr	r1, [pc, #244]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b3c      	ldr	r3, [pc, #240]	@ (800345c <HAL_RCC_ClockConfig+0x3d4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d210      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b39      	ldr	r3, [pc, #228]	@ (800345c <HAL_RCC_ClockConfig+0x3d4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 020f 	bic.w	r2, r3, #15
 800337e:	4937      	ldr	r1, [pc, #220]	@ (800345c <HAL_RCC_ClockConfig+0x3d4>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b35      	ldr	r3, [pc, #212]	@ (800345c <HAL_RCC_ClockConfig+0x3d4>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e05b      	b.n	8003450 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d010      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d208      	bcs.n	80033c6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b28      	ldr	r3, [pc, #160]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4925      	ldr	r1, [pc, #148]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	4b20      	ldr	r3, [pc, #128]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	091b      	lsrs	r3, r3, #4
 80033dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d209      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80033e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	011b      	lsls	r3, r3, #4
 80033f2:	4919      	ldr	r1, [pc, #100]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d010      	beq.n	8003426 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	4b13      	ldr	r3, [pc, #76]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 800340a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003410:	429a      	cmp	r2, r3
 8003412:	d208      	bcs.n	8003426 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8003414:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	490d      	ldr	r1, [pc, #52]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 8003422:	4313      	orrs	r3, r2
 8003424:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003426:	f000 f821 	bl	800346c <HAL_RCC_GetSysClockFreq>
 800342a:	4602      	mov	r2, r0
 800342c:	4b0a      	ldr	r3, [pc, #40]	@ (8003458 <HAL_RCC_ClockConfig+0x3d0>)
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	490a      	ldr	r1, [pc, #40]	@ (8003460 <HAL_RCC_ClockConfig+0x3d8>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	4a09      	ldr	r2, [pc, #36]	@ (8003464 <HAL_RCC_ClockConfig+0x3dc>)
 800343e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003440:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <HAL_RCC_ClockConfig+0x3e0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f955 	bl	80006f4 <HAL_InitTick>
 800344a:	4603      	mov	r3, r0
 800344c:	73fb      	strb	r3, [r7, #15]

  return status;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	46020c00 	.word	0x46020c00
 800345c:	40022000 	.word	0x40022000
 8003460:	08008804 	.word	0x08008804
 8003464:	20000000 	.word	0x20000000
 8003468:	20000004 	.word	0x20000004

0800346c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b08b      	sub	sp, #44	@ 0x2c
 8003470:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	4b78      	ldr	r3, [pc, #480]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003484:	4b75      	ldr	r3, [pc, #468]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x34>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b0c      	cmp	r3, #12
 8003498:	d121      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d11e      	bne.n	80034de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80034a0:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80034ac:	4b6b      	ldr	r3, [pc, #428]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034b2:	0b1b      	lsrs	r3, r3, #12
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ba:	e005      	b.n	80034c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80034bc:	4b67      	ldr	r3, [pc, #412]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	0f1b      	lsrs	r3, r3, #28
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034c8:	4a65      	ldr	r2, [pc, #404]	@ (8003660 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d110      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034dc:	e00d      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034de:	4b5f      	ldr	r3, [pc, #380]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d102      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034ea:	4b5e      	ldr	r3, [pc, #376]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034ec:	623b      	str	r3, [r7, #32]
 80034ee:	e004      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034f6:	4b5b      	ldr	r3, [pc, #364]	@ (8003664 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80034f8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	f040 80a5 	bne.w	800364c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003502:	4b56      	ldr	r3, [pc, #344]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800350c:	4b53      	ldr	r3, [pc, #332]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800350e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	3301      	adds	r3, #1
 8003518:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800351a:	4b50      	ldr	r3, [pc, #320]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003526:	4b4d      	ldr	r3, [pc, #308]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352a:	08db      	lsrs	r3, r3, #3
 800352c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d003      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0xe4>
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b03      	cmp	r3, #3
 800354c:	d022      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x128>
 800354e:	e043      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003668 <HAL_RCC_GetSysClockFreq+0x1fc>
 800355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003562:	4b3e      	ldr	r3, [pc, #248]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003572:	ed97 6a01 	vldr	s12, [r7, #4]
 8003576:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800366c <HAL_RCC_GetSysClockFreq+0x200>
 800357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003586:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003592:	e046      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003668 <HAL_RCC_GetSysClockFreq+0x1fc>
 80035a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a6:	4b2d      	ldr	r3, [pc, #180]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80035ba:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800366c <HAL_RCC_GetSysClockFreq+0x200>
 80035be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d6:	e024      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003600:	ed97 6a01 	vldr	s12, [r7, #4]
 8003604:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800366c <HAL_RCC_GetSysClockFreq+0x200>
 8003608:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800360c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003610:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003614:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003620:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8003622:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	0e1b      	lsrs	r3, r3, #24
 8003628:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800362c:	3301      	adds	r3, #1
 800362e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	ee07 3a90 	vmov	s15, r3
 8003636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800363a:	edd7 6a07 	vldr	s13, [r7, #28]
 800363e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003646:	ee17 3a90 	vmov	r3, s15
 800364a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800364c:	6a3b      	ldr	r3, [r7, #32]
}
 800364e:	4618      	mov	r0, r3
 8003650:	372c      	adds	r7, #44	@ 0x2c
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	46020c00 	.word	0x46020c00
 8003660:	08008814 	.word	0x08008814
 8003664:	00f42400 	.word	0x00f42400
 8003668:	4b742400 	.word	0x4b742400
 800366c:	46000000 	.word	0x46000000

08003670 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003674:	f7ff fefa 	bl	800346c <HAL_RCC_GetSysClockFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <HAL_RCC_GetHCLKFreq+0x28>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4906      	ldr	r1, [pc, #24]	@ (800369c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003684:	5ccb      	ldrb	r3, [r1, r3]
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <HAL_RCC_GetHCLKFreq+0x30>)
 800368c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003690:	681b      	ldr	r3, [r3, #0]
}
 8003692:	4618      	mov	r0, r3
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	46020c00 	.word	0x46020c00
 800369c:	08008804 	.word	0x08008804
 80036a0:	20000000 	.word	0x20000000

080036a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036ac:	4b3e      	ldr	r3, [pc, #248]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036ba:	f7fe fdcd 	bl	8002258 <HAL_PWREx_GetVoltageRange>
 80036be:	6178      	str	r0, [r7, #20]
 80036c0:	e019      	b.n	80036f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036c2:	4b39      	ldr	r3, [pc, #228]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036c8:	4a37      	ldr	r2, [pc, #220]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036d2:	4b35      	ldr	r3, [pc, #212]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036e0:	f7fe fdba 	bl	8002258 <HAL_PWREx_GetVoltageRange>
 80036e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036e6:	4b30      	ldr	r3, [pc, #192]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ec:	4a2e      	ldr	r2, [pc, #184]	@ (80037a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036fc:	d003      	beq.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003704:	d109      	bne.n	800371a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800370c:	d202      	bcs.n	8003714 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800370e:	2301      	movs	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003712:	e033      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8003714:	2300      	movs	r3, #0
 8003716:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003718:	e030      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003720:	d208      	bcs.n	8003734 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003728:	d102      	bne.n	8003730 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800372a:	2303      	movs	r3, #3
 800372c:	613b      	str	r3, [r7, #16]
 800372e:	e025      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e035      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800373a:	d90f      	bls.n	800375c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003748:	d902      	bls.n	8003750 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800374a:	2300      	movs	r3, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	e015      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003750:	2301      	movs	r3, #1
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e012      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e00f      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003762:	d109      	bne.n	8003778 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800376a:	d102      	bne.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800376c:	2301      	movs	r3, #1
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	e004      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8003772:	2302      	movs	r3, #2
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	e001      	b.n	800377c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003778:	2301      	movs	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800377c:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 020f 	bic.w	r2, r3, #15
 8003784:	4909      	ldr	r1, [pc, #36]	@ (80037ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800378c:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 030f 	and.w	r3, r3, #15
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	429a      	cmp	r2, r3
 8003798:	d001      	beq.n	800379e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3718      	adds	r7, #24
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	46020c00 	.word	0x46020c00
 80037ac:	40022000 	.word	0x40022000

080037b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80037b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b4:	b0c2      	sub	sp, #264	@ 0x108
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037c2:	2300      	movs	r3, #0
 80037c4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f002 0401 	and.w	r4, r2, #1
 80037d4:	2500      	movs	r5, #0
 80037d6:	ea54 0305 	orrs.w	r3, r4, r5
 80037da:	d00b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80037dc:	4bd5      	ldr	r3, [pc, #852]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037e2:	f023 0103 	bic.w	r1, r3, #3
 80037e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ec:	4ad1      	ldr	r2, [pc, #836]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f002 0802 	and.w	r8, r2, #2
 8003800:	f04f 0900 	mov.w	r9, #0
 8003804:	ea58 0309 	orrs.w	r3, r8, r9
 8003808:	d00b      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800380a:	4bca      	ldr	r3, [pc, #808]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800380c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003810:	f023 010c 	bic.w	r1, r3, #12
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381a:	4ac6      	ldr	r2, [pc, #792]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800381c:	430b      	orrs	r3, r1
 800381e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f002 0a04 	and.w	sl, r2, #4
 800382e:	f04f 0b00 	mov.w	fp, #0
 8003832:	ea5a 030b 	orrs.w	r3, sl, fp
 8003836:	d00b      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003838:	4bbe      	ldr	r3, [pc, #760]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800383a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800383e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	4aba      	ldr	r2, [pc, #744]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800384a:	430b      	orrs	r3, r1
 800384c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f002 0308 	and.w	r3, r2, #8
 800385c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003866:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d00b      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003870:	4bb0      	ldr	r3, [pc, #704]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003876:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	4aac      	ldr	r2, [pc, #688]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003882:	430b      	orrs	r3, r1
 8003884:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f002 0310 	and.w	r3, r2, #16
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800389e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80038a8:	4ba2      	ldr	r3, [pc, #648]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	4a9e      	ldr	r2, [pc, #632]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038ba:	430b      	orrs	r3, r1
 80038bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038d0:	2300      	movs	r3, #0
 80038d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038da:	460b      	mov	r3, r1
 80038dc:	4313      	orrs	r3, r2
 80038de:	d00b      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80038e0:	4b94      	ldr	r3, [pc, #592]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038e6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f0:	4a90      	ldr	r2, [pc, #576]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003900:	f002 0320 	and.w	r3, r2, #32
 8003904:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003908:	2300      	movs	r3, #0
 800390a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800390e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003912:	460b      	mov	r3, r1
 8003914:	4313      	orrs	r3, r2
 8003916:	d00b      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003918:	4b86      	ldr	r3, [pc, #536]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800391a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800391e:	f023 0107 	bic.w	r1, r3, #7
 8003922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003928:	4a82      	ldr	r2, [pc, #520]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800392a:	430b      	orrs	r3, r1
 800392c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800393c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003946:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800394a:	460b      	mov	r3, r1
 800394c:	4313      	orrs	r3, r2
 800394e:	d00b      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003950:	4b78      	ldr	r3, [pc, #480]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003956:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800395e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003960:	4a74      	ldr	r2, [pc, #464]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003962:	430b      	orrs	r3, r1
 8003964:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800397e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003982:	460b      	mov	r3, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	d00b      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003988:	4b6a      	ldr	r3, [pc, #424]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800398a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800398e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a66      	ldr	r2, [pc, #408]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80039ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80039b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80039ba:	460b      	mov	r3, r1
 80039bc:	4313      	orrs	r3, r2
 80039be:	d00b      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80039c0:	4b5c      	ldr	r3, [pc, #368]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d0:	4a58      	ldr	r2, [pc, #352]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039d2:	430b      	orrs	r3, r1
 80039d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80039f8:	4b4e      	ldr	r3, [pc, #312]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039fe:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a08:	4a4a      	ldr	r2, [pc, #296]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a26:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003a30:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a36:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a40:	4a3c      	ldr	r2, [pc, #240]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a42:	430b      	orrs	r3, r1
 8003a44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a5e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d00c      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003a68:	4b32      	ldr	r3, [pc, #200]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a6e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7a:	4a2e      	ldr	r2, [pc, #184]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003a8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003aa2:	4b24      	ldr	r3, [pc, #144]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003aa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003aa8:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003ac8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ad2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	d00c      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003adc:	4b15      	ldr	r3, [pc, #84]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ae2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aee:	4a11      	ldr	r2, [pc, #68]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003af0:	430b      	orrs	r3, r1
 8003af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b06:	2300      	movs	r3, #0
 8003b08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b10:	460b      	mov	r3, r1
 8003b12:	4313      	orrs	r3, r2
 8003b14:	d010      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b28:	4a02      	ldr	r2, [pc, #8]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b30:	e002      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003b32:	bf00      	nop
 8003b34:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003b52:	460b      	mov	r3, r1
 8003b54:	4313      	orrs	r3, r2
 8003b56:	d04c      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b60:	2b80      	cmp	r3, #128	@ 0x80
 8003b62:	d02d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003b64:	2b80      	cmp	r3, #128	@ 0x80
 8003b66:	d827      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b68:	2b60      	cmp	r3, #96	@ 0x60
 8003b6a:	d02b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003b6c:	2b60      	cmp	r3, #96	@ 0x60
 8003b6e:	d823      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b70:	2b40      	cmp	r3, #64	@ 0x40
 8003b72:	d006      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003b74:	2b40      	cmp	r3, #64	@ 0x40
 8003b76:	d81f      	bhi.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d011      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003b80:	e01a      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b82:	4bbd      	ldr	r3, [pc, #756]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	4abc      	ldr	r2, [pc, #752]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003b8e:	e01a      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	3308      	adds	r3, #8
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fca8 	bl	80044ec <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ba2:	e010      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	332c      	adds	r3, #44	@ 0x2c
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fd36 	bl	800461c <RCCEx_PLL3_Config>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bb6:	e006      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10d      	bne.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003bce:	4baa      	ldr	r3, [pc, #680]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bd4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003be0:	4aa5      	ldr	r2, [pc, #660]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003be2:	430b      	orrs	r3, r1
 8003be4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bea:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003bee:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003bfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c00:	2300      	movs	r3, #0
 8003c02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d053      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d033      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c20:	d82c      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c26:	d02f      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003c28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c2c:	d826      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c32:	d008      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c38:	d820      	bhi.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c42:	d011      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8003c44:	e01a      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c46:	4b8c      	ldr	r3, [pc, #560]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	4a8b      	ldr	r2, [pc, #556]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c50:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c52:	e01a      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	3308      	adds	r3, #8
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fc46 	bl	80044ec <RCCEx_PLL2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c66:	e010      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	332c      	adds	r3, #44	@ 0x2c
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fcd4 	bl	800461c <RCCEx_PLL3_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c7a:	e006      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003c82:	e002      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c8a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10d      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003c92:	4b79      	ldr	r3, [pc, #484]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003c98:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ca4:	4a74      	ldr	r2, [pc, #464]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cac:	e003      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003cb2:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cc8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	d046      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cde:	d028      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003ce0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003ce4:	d821      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cea:	d022      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cf0:	d81b      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003cf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cf6:	d01c      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003cf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cfc:	d815      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d02:	d008      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d08:	d80f      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d011      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d12:	d00e      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d14:	e009      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fbe5 	bl	80044ec <RCCEx_PLL2_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003d28:	e004      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003d30:	e000      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 8003d32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d34:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d42:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d56:	e003      	b.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d58:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003d5c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d6e:	2300      	movs	r3, #0
 8003d70:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d72:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d76:	460b      	mov	r3, r1
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	d03f      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d81e      	bhi.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x616>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003dcf 	.word	0x08003dcf
 8003d94:	08003da5 	.word	0x08003da5
 8003d98:	08003db3 	.word	0x08003db3
 8003d9c:	08003dcf 	.word	0x08003dcf
 8003da0:	08003dcf 	.word	0x08003dcf
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003da4:	4b34      	ldr	r3, [pc, #208]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	4a33      	ldr	r2, [pc, #204]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003daa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dae:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003db0:	e00e      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	332c      	adds	r3, #44	@ 0x2c
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fc2f 	bl	800461c <RCCEx_PLL3_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003dcc:	e000      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 8003dce:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003dd0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10d      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003dd8:	4b27      	ldr	r3, [pc, #156]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dde:	f023 0107 	bic.w	r1, r3, #7
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dea:	4a23      	ldr	r2, [pc, #140]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dec:	430b      	orrs	r3, r1
 8003dee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003df2:	e003      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003df8:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e04:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e0e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e12:	460b      	mov	r3, r1
 8003e14:	4313      	orrs	r3, r2
 8003e16:	d04c      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e24:	d02a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003e26:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e2a:	d821      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e30:	d026      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8003e32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e36:	d81b      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e3c:	d00e      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003e3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e42:	d815      	bhi.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01d      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e4c:	d110      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	4a09      	ldr	r2, [pc, #36]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e58:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003e5a:	e014      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	332c      	adds	r3, #44	@ 0x2c
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fbda 	bl	800461c <RCCEx_PLL3_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e6e:	e00a      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e76:	e006      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003e78:	46020c00 	.word	0x46020c00
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e002      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003e80:	bf00      	nop
 8003e82:	e000      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003e84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e86:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10d      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003e8e:	4baf      	ldr	r3, [pc, #700]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ea0:	4aaa      	ldr	r2, [pc, #680]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003eae:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ebe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ec4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f000 80b5 	beq.w	800403a <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed6:	4b9d      	ldr	r3, [pc, #628]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d113      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee4:	4b99      	ldr	r3, [pc, #612]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eea:	4a98      	ldr	r2, [pc, #608]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003eec:	f043 0304 	orr.w	r3, r3, #4
 8003ef0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003ef4:	4b95      	ldr	r3, [pc, #596]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003f0c:	4b90      	ldr	r3, [pc, #576]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	4a8f      	ldr	r2, [pc, #572]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f18:	f7fc fc76 	bl	8000808 <HAL_GetTick>
 8003f1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f20:	e00b      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f22:	f7fc fc71 	bl	8000808 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d903      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003f38:	e005      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f3a:	4b85      	ldr	r3, [pc, #532]	@ (8004150 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0ed      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 8003f46:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d165      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f4e:	4b7f      	ldr	r3, [pc, #508]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d023      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d01b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f74:	4b75      	ldr	r3, [pc, #468]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f82:	4b72      	ldr	r3, [pc, #456]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f88:	4a70      	ldr	r2, [pc, #448]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f92:	4b6e      	ldr	r3, [pc, #440]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f98:	4a6c      	ldr	r2, [pc, #432]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fa2:	4a6a      	ldr	r2, [pc, #424]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d019      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fc fc26 	bl	8000808 <HAL_GetTick>
 8003fbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fc0:	e00d      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fc fc21 	bl	8000808 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fcc:	1ad2      	subs	r2, r2, r3
 8003fce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d903      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fde:	4b5b      	ldr	r3, [pc, #364]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0ea      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 8003fec:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10d      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003ff4:	4b55      	ldr	r3, [pc, #340]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ffa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004006:	4a51      	ldr	r2, [pc, #324]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004008:	430b      	orrs	r3, r1
 800400a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800400e:	e008      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004010:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004014:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800401e:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004022:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b48      	ldr	r3, [pc, #288]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004030:	4a46      	ldr	r2, [pc, #280]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004032:	f023 0304 	bic.w	r3, r3, #4
 8004036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004042:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004046:	653b      	str	r3, [r7, #80]	@ 0x50
 8004048:	2300      	movs	r3, #0
 800404a:	657b      	str	r3, [r7, #84]	@ 0x54
 800404c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004050:	460b      	mov	r3, r1
 8004052:	4313      	orrs	r3, r2
 8004054:	d042      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800405e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004062:	d022      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8004064:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004068:	d81b      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800406a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800406e:	d011      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8004070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004074:	d815      	bhi.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d019      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800407a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800407e:	d110      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	3308      	adds	r3, #8
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fa30 	bl	80044ec <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004092:	e00d      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004094:	4b2d      	ldr	r3, [pc, #180]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	4a2c      	ldr	r2, [pc, #176]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800409a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80040a8:	e002      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 80040ae:	bf00      	nop
    }
    if (ret == HAL_OK)
 80040b0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80040b8:	4b24      	ldr	r3, [pc, #144]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040be:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80040c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040ca:	4a20      	ldr	r2, [pc, #128]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040d2:	e003      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80040d8:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ea:	2300      	movs	r3, #0
 80040ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d031      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004100:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004104:	d00b      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800410a:	d804      	bhi.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004114:	d007      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800411c:	e004      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800411e:	bf00      	nop
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8004126:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004128:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800412c:	2b00      	cmp	r3, #0
 800412e:	d111      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004132:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004136:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004142:	4a02      	ldr	r2, [pc, #8]	@ (800414c <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004144:	430b      	orrs	r3, r1
 8004146:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800414a:	e007      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 800414c:	46020c00 	.word	0x46020c00
 8004150:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004158:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004168:	643b      	str	r3, [r7, #64]	@ 0x40
 800416a:	2300      	movs	r3, #0
 800416c:	647b      	str	r3, [r7, #68]	@ 0x44
 800416e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004172:	460b      	mov	r3, r1
 8004174:	4313      	orrs	r3, r2
 8004176:	d019      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004184:	d105      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004186:	4ba1      	ldr	r3, [pc, #644]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418a:	4aa0      	ldr	r2, [pc, #640]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004190:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004192:	4b9e      	ldr	r3, [pc, #632]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004194:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004198:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041a4:	4a99      	ldr	r2, [pc, #612]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041a6:	430b      	orrs	r3, r1
 80041a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80041b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041ba:	2300      	movs	r3, #0
 80041bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80041c2:	460b      	mov	r3, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80041c8:	4b90      	ldr	r3, [pc, #576]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80041da:	4a8c      	ldr	r2, [pc, #560]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80041ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f0:	2300      	movs	r3, #0
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041f4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80041f8:	460b      	mov	r3, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	d00c      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80041fe:	4b83      	ldr	r3, [pc, #524]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004204:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004210:	4a7e      	ldr	r2, [pc, #504]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004212:	430b      	orrs	r3, r1
 8004214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004220:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004226:	2300      	movs	r3, #0
 8004228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800422a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800422e:	460b      	mov	r3, r1
 8004230:	4313      	orrs	r3, r2
 8004232:	d00c      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004234:	4b75      	ldr	r3, [pc, #468]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800423a:	f023 0218 	bic.w	r2, r3, #24
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8004246:	4971      	ldr	r1, [pc, #452]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800425a:	623b      	str	r3, [r7, #32]
 800425c:	2300      	movs	r3, #0
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004260:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004264:	460b      	mov	r3, r1
 8004266:	4313      	orrs	r3, r2
 8004268:	d032      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004276:	d105      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004278:	4b64      	ldr	r3, [pc, #400]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800427a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427c:	4a63      	ldr	r2, [pc, #396]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800427e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004282:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800428c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004290:	d108      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004296:	3308      	adds	r3, #8
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f927 	bl	80044ec <RCCEx_PLL2_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 80042a4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80042ac:	4b57      	ldr	r3, [pc, #348]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042be:	4953      	ldr	r1, [pc, #332]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80042c6:	e003      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80042cc:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	2100      	movs	r1, #0
 80042da:	61b9      	str	r1, [r7, #24]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042e6:	460b      	mov	r3, r1
 80042e8:	4313      	orrs	r3, r2
 80042ea:	d04a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80042f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042f8:	d01e      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80042fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042fe:	d825      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004300:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004304:	d00e      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004306:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800430a:	d81f      	bhi.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800430c:	2b00      	cmp	r3, #0
 800430e:	d021      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004310:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004314:	d11a      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004316:	4b3d      	ldr	r3, [pc, #244]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431a:	4a3c      	ldr	r2, [pc, #240]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800431c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004320:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004322:	e018      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	3308      	adds	r3, #8
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f8de 	bl	80044ec <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004336:	e00e      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433c:	332c      	adds	r3, #44	@ 0x2c
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f96c 	bl	800461c <RCCEx_PLL3_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 8004354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004356:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10d      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 800435e:	4b2b      	ldr	r3, [pc, #172]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004360:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004364:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004370:	4926      	ldr	r1, [pc, #152]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004378:	e003      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437a:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800437e:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004398:	460b      	mov	r3, r1
 800439a:	4313      	orrs	r3, r2
 800439c:	d03c      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800439e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043aa:	d00e      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80043ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043b0:	d815      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d017      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80043b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ba:	d110      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4b13      	ldr	r3, [pc, #76]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80043be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c0:	4a12      	ldr	r2, [pc, #72]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80043c8:	e00e      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	3308      	adds	r3, #8
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f88b 	bl	80044ec <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80043dc:	e004      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80043e4:	e000      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 80043e6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80043e8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10f      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80043f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004402:	4902      	ldr	r1, [pc, #8]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800440a:	e005      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800440c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004414:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d00c      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8004434:	4b2c      	ldr	r3, [pc, #176]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800443a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004446:	4928      	ldr	r1, [pc, #160]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	2100      	movs	r1, #0
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d036      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004472:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004476:	d00d      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004478:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800447c:	d811      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 800447e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004482:	d012      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 8004484:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004488:	d80b      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 800448e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004492:	d106      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004494:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	4a13      	ldr	r2, [pc, #76]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800449a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80044a0:	e004      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80044a8:	e000      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 80044aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ac:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10d      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044ba:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80044c6:	4908      	ldr	r1, [pc, #32]	@ (80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80044d4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80044d8:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 80044dc:	4618      	mov	r0, r3
 80044de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80044e2:	46bd      	mov	sp, r7
 80044e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e8:	46020c00 	.word	0x46020c00

080044ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80044f4:	4b47      	ldr	r3, [pc, #284]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a46      	ldr	r2, [pc, #280]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80044fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80044fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004500:	f7fc f982 	bl	8000808 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004506:	e008      	b.n	800451a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004508:	f7fc f97e 	bl	8000808 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e077      	b.n	800460a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800451a:	4b3e      	ldr	r3, [pc, #248]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1f0      	bne.n	8004508 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004526:	4b3b      	ldr	r3, [pc, #236]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6811      	ldr	r1, [r2, #0]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6852      	ldr	r2, [r2, #4]
 800453a:	3a01      	subs	r2, #1
 800453c:	0212      	lsls	r2, r2, #8
 800453e:	430a      	orrs	r2, r1
 8004540:	4934      	ldr	r1, [pc, #208]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 8004542:	4313      	orrs	r3, r2
 8004544:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004546:	4b33      	ldr	r3, [pc, #204]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 8004548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800454a:	4b33      	ldr	r3, [pc, #204]	@ (8004618 <RCCEx_PLL2_Config+0x12c>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6892      	ldr	r2, [r2, #8]
 8004552:	3a01      	subs	r2, #1
 8004554:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	68d2      	ldr	r2, [r2, #12]
 800455c:	3a01      	subs	r2, #1
 800455e:	0252      	lsls	r2, r2, #9
 8004560:	b292      	uxth	r2, r2
 8004562:	4311      	orrs	r1, r2
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6912      	ldr	r2, [r2, #16]
 8004568:	3a01      	subs	r2, #1
 800456a:	0412      	lsls	r2, r2, #16
 800456c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004570:	4311      	orrs	r1, r2
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6952      	ldr	r2, [r2, #20]
 8004576:	3a01      	subs	r2, #1
 8004578:	0612      	lsls	r2, r2, #24
 800457a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800457e:	430a      	orrs	r2, r1
 8004580:	4924      	ldr	r1, [pc, #144]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 8004582:	4313      	orrs	r3, r2
 8004584:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004586:	4b23      	ldr	r3, [pc, #140]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	f023 020c 	bic.w	r2, r3, #12
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	4920      	ldr	r1, [pc, #128]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 8004594:	4313      	orrs	r3, r2
 8004596:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004598:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 800459a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	491c      	ldr	r1, [pc, #112]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80045a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045ac:	f023 0310 	bic.w	r3, r3, #16
 80045b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045b2:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045ba:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	69d2      	ldr	r2, [r2, #28]
 80045c2:	00d2      	lsls	r2, r2, #3
 80045c4:	4913      	ldr	r1, [pc, #76]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ce:	4a11      	ldr	r2, [pc, #68]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045d0:	f043 0310 	orr.w	r3, r3, #16
 80045d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80045d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a0e      	ldr	r2, [pc, #56]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045e2:	f7fc f911 	bl	8000808 <HAL_GetTick>
 80045e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045e8:	e008      	b.n	80045fc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80045ea:	f7fc f90d 	bl	8000808 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e006      	b.n	800460a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <RCCEx_PLL2_Config+0x128>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0

}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	46020c00 	.word	0x46020c00
 8004618:	80800000 	.word	0x80800000

0800461c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004624:	4b47      	ldr	r3, [pc, #284]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a46      	ldr	r2, [pc, #280]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 800462a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004630:	f7fc f8ea 	bl	8000808 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004636:	e008      	b.n	800464a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004638:	f7fc f8e6 	bl	8000808 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e077      	b.n	800473a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800464a:	4b3e      	ldr	r3, [pc, #248]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004656:	4b3b      	ldr	r3, [pc, #236]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6852      	ldr	r2, [r2, #4]
 800466a:	3a01      	subs	r2, #1
 800466c:	0212      	lsls	r2, r2, #8
 800466e:	430a      	orrs	r2, r1
 8004670:	4934      	ldr	r1, [pc, #208]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 8004672:	4313      	orrs	r3, r2
 8004674:	630b      	str	r3, [r1, #48]	@ 0x30
 8004676:	4b33      	ldr	r3, [pc, #204]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 8004678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800467a:	4b33      	ldr	r3, [pc, #204]	@ (8004748 <RCCEx_PLL3_Config+0x12c>)
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6892      	ldr	r2, [r2, #8]
 8004682:	3a01      	subs	r2, #1
 8004684:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	68d2      	ldr	r2, [r2, #12]
 800468c:	3a01      	subs	r2, #1
 800468e:	0252      	lsls	r2, r2, #9
 8004690:	b292      	uxth	r2, r2
 8004692:	4311      	orrs	r1, r2
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6912      	ldr	r2, [r2, #16]
 8004698:	3a01      	subs	r2, #1
 800469a:	0412      	lsls	r2, r2, #16
 800469c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80046a0:	4311      	orrs	r1, r2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6952      	ldr	r2, [r2, #20]
 80046a6:	3a01      	subs	r2, #1
 80046a8:	0612      	lsls	r2, r2, #24
 80046aa:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80046ae:	430a      	orrs	r2, r1
 80046b0:	4924      	ldr	r1, [pc, #144]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80046b6:	4b23      	ldr	r3, [pc, #140]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	f023 020c 	bic.w	r2, r3, #12
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	4920      	ldr	r1, [pc, #128]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80046c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	491c      	ldr	r1, [pc, #112]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80046d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046da:	4a1a      	ldr	r2, [pc, #104]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046dc:	f023 0310 	bic.w	r3, r3, #16
 80046e0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046e2:	4b18      	ldr	r3, [pc, #96]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046ea:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	69d2      	ldr	r2, [r2, #28]
 80046f2:	00d2      	lsls	r2, r2, #3
 80046f4:	4913      	ldr	r1, [pc, #76]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80046fa:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	4a11      	ldr	r2, [pc, #68]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 8004700:	f043 0310 	orr.w	r3, r3, #16
 8004704:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004706:	4b0f      	ldr	r3, [pc, #60]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a0e      	ldr	r2, [pc, #56]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004710:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004712:	f7fc f879 	bl	8000808 <HAL_GetTick>
 8004716:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004718:	e008      	b.n	800472c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800471a:	f7fc f875 	bl	8000808 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b02      	cmp	r3, #2
 8004726:	d901      	bls.n	800472c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800472c:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <RCCEx_PLL3_Config+0x128>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	46020c00 	.word	0x46020c00
 8004748:	80800000 	.word	0x80800000

0800474c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800474c:	b084      	sub	sp, #16
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	f107 001c 	add.w	r0, r7, #28
 800475a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800475e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004762:	2b03      	cmp	r3, #3
 8004764:	d105      	bne.n	8004772 <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f001 fad8 	bl	8005d28 <USB_CoreReset>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 800477c:	7fbb      	ldrb	r3, [r7, #30]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d10b      	bne.n	800479a <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f043 0208 	orr.w	r2, r3, #8
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 800479a:	7bfb      	ldrb	r3, [r7, #15]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047a6:	b004      	add	sp, #16
 80047a8:	4770      	bx	lr
	...

080047ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d165      	bne.n	800488c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4a41      	ldr	r2, [pc, #260]	@ (80048c8 <USB_SetTurnaroundTime+0x11c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d906      	bls.n	80047d6 <USB_SetTurnaroundTime+0x2a>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4a40      	ldr	r2, [pc, #256]	@ (80048cc <USB_SetTurnaroundTime+0x120>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d202      	bcs.n	80047d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047d0:	230f      	movs	r3, #15
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e062      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a3c      	ldr	r2, [pc, #240]	@ (80048cc <USB_SetTurnaroundTime+0x120>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d306      	bcc.n	80047ec <USB_SetTurnaroundTime+0x40>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	4a3b      	ldr	r2, [pc, #236]	@ (80048d0 <USB_SetTurnaroundTime+0x124>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d202      	bcs.n	80047ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047e6:	230e      	movs	r3, #14
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e057      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4a38      	ldr	r2, [pc, #224]	@ (80048d0 <USB_SetTurnaroundTime+0x124>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d306      	bcc.n	8004802 <USB_SetTurnaroundTime+0x56>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4a37      	ldr	r2, [pc, #220]	@ (80048d4 <USB_SetTurnaroundTime+0x128>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d202      	bcs.n	8004802 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80047fc:	230d      	movs	r3, #13
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e04c      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4a33      	ldr	r2, [pc, #204]	@ (80048d4 <USB_SetTurnaroundTime+0x128>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d306      	bcc.n	8004818 <USB_SetTurnaroundTime+0x6c>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4a32      	ldr	r2, [pc, #200]	@ (80048d8 <USB_SetTurnaroundTime+0x12c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d802      	bhi.n	8004818 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004812:	230c      	movs	r3, #12
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e041      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	4a2f      	ldr	r2, [pc, #188]	@ (80048d8 <USB_SetTurnaroundTime+0x12c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d906      	bls.n	800482e <USB_SetTurnaroundTime+0x82>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4a2e      	ldr	r2, [pc, #184]	@ (80048dc <USB_SetTurnaroundTime+0x130>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d802      	bhi.n	800482e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004828:	230b      	movs	r3, #11
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e036      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4a2a      	ldr	r2, [pc, #168]	@ (80048dc <USB_SetTurnaroundTime+0x130>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d906      	bls.n	8004844 <USB_SetTurnaroundTime+0x98>
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4a29      	ldr	r2, [pc, #164]	@ (80048e0 <USB_SetTurnaroundTime+0x134>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d802      	bhi.n	8004844 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800483e:	230a      	movs	r3, #10
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	e02b      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4a26      	ldr	r2, [pc, #152]	@ (80048e0 <USB_SetTurnaroundTime+0x134>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d906      	bls.n	800485a <USB_SetTurnaroundTime+0xae>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <USB_SetTurnaroundTime+0x138>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d202      	bcs.n	800485a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004854:	2309      	movs	r3, #9
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e020      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4a21      	ldr	r2, [pc, #132]	@ (80048e4 <USB_SetTurnaroundTime+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d306      	bcc.n	8004870 <USB_SetTurnaroundTime+0xc4>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a20      	ldr	r2, [pc, #128]	@ (80048e8 <USB_SetTurnaroundTime+0x13c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d802      	bhi.n	8004870 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800486a:	2308      	movs	r3, #8
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e015      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4a1d      	ldr	r2, [pc, #116]	@ (80048e8 <USB_SetTurnaroundTime+0x13c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d906      	bls.n	8004886 <USB_SetTurnaroundTime+0xda>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	4a1c      	ldr	r2, [pc, #112]	@ (80048ec <USB_SetTurnaroundTime+0x140>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d202      	bcs.n	8004886 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004880:	2307      	movs	r3, #7
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e00a      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004886:	2306      	movs	r3, #6
 8004888:	617b      	str	r3, [r7, #20]
 800488a:	e007      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004892:	2309      	movs	r3, #9
 8004894:	617b      	str	r3, [r7, #20]
 8004896:	e001      	b.n	800489c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004898:	2309      	movs	r3, #9
 800489a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	029b      	lsls	r3, r3, #10
 80048b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	00d8acbf 	.word	0x00d8acbf
 80048cc:	00e4e1c0 	.word	0x00e4e1c0
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	01067380 	.word	0x01067380
 80048d8:	011a499f 	.word	0x011a499f
 80048dc:	01312cff 	.word	0x01312cff
 80048e0:	014ca43f 	.word	0x014ca43f
 80048e4:	016e3600 	.word	0x016e3600
 80048e8:	01a6ab1f 	.word	0x01a6ab1f
 80048ec:	01e84800 	.word	0x01e84800

080048f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f043 0201 	orr.w	r2, r3, #1
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d115      	bne.n	8004982 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004962:	200a      	movs	r0, #10
 8004964:	f7fb ff5c 	bl	8000820 <HAL_Delay>
      ms += 10U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	330a      	adds	r3, #10
 800496c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f94b 	bl	8005c0a <USB_GetMode>
 8004974:	4603      	mov	r3, r0
 8004976:	2b01      	cmp	r3, #1
 8004978:	d01e      	beq.n	80049b8 <USB_SetCurrentMode+0x84>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2bc7      	cmp	r3, #199	@ 0xc7
 800497e:	d9f0      	bls.n	8004962 <USB_SetCurrentMode+0x2e>
 8004980:	e01a      	b.n	80049b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d115      	bne.n	80049b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004994:	200a      	movs	r0, #10
 8004996:	f7fb ff43 	bl	8000820 <HAL_Delay>
      ms += 10U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	330a      	adds	r3, #10
 800499e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 f932 	bl	8005c0a <USB_GetMode>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <USB_SetCurrentMode+0x84>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80049b0:	d9f0      	bls.n	8004994 <USB_SetCurrentMode+0x60>
 80049b2:	e001      	b.n	80049b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e005      	b.n	80049c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2bc8      	cmp	r3, #200	@ 0xc8
 80049bc:	d101      	bne.n	80049c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049cc:	b084      	sub	sp, #16
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b086      	sub	sp, #24
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
 80049d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049e6:	2300      	movs	r3, #0
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	e009      	b.n	8004a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	3340      	adds	r3, #64	@ 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	2200      	movs	r2, #0
 80049f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	3301      	adds	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b0e      	cmp	r3, #14
 8004a04:	d9f2      	bls.n	80049ec <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a12:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11c      	bne.n	8004a54 <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a28:	f043 0302 	orr.w	r3, r3, #2
 8004a2c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a52:	e011      	b.n	8004a78 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004a84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d10d      	bne.n	8004aa8 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a94:	2100      	movs	r1, #0
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f968 	bl	8004d6c <USB_SetDevSpeed>
 8004a9c:	e008      	b.n	8004ab0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f963 	bl	8004d6c <USB_SetDevSpeed>
 8004aa6:	e003      	b.n	8004ab0 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004aa8:	2103      	movs	r1, #3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f95e 	bl	8004d6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ab0:	2110      	movs	r1, #16
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8fa 	bl	8004cac <USB_FlushTxFifo>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f924 	bl	8004d10 <USB_FlushRxFifo>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af0:	461a      	mov	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	e043      	b.n	8004b84 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b12:	d118      	bne.n	8004b46 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b26:	461a      	mov	r2, r3
 8004b28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	e013      	b.n	8004b58 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e008      	b.n	8004b58 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b52:	461a      	mov	r2, r3
 8004b54:	2300      	movs	r3, #0
 8004b56:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b64:	461a      	mov	r2, r3
 8004b66:	2300      	movs	r3, #0
 8004b68:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b76:	461a      	mov	r2, r3
 8004b78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3301      	adds	r3, #1
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b88:	461a      	mov	r2, r3
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d3b5      	bcc.n	8004afc <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b90:	2300      	movs	r3, #0
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	e043      	b.n	8004c1e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bac:	d118      	bne.n	8004be0 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	e013      	b.n	8004bf2 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	e008      	b.n	8004bf2 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bec:	461a      	mov	r2, r3
 8004bee:	2300      	movs	r3, #0
 8004bf0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c16:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c22:	461a      	mov	r2, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d3b5      	bcc.n	8004b96 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c3c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c4a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d105      	bne.n	8004c60 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f043 0210 	orr.w	r2, r3, #16
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	4b10      	ldr	r3, [pc, #64]	@ (8004ca8 <USB_DevInit+0x2dc>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c6c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f043 0208 	orr.w	r2, r3, #8
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c80:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ca4:	b004      	add	sp, #16
 8004ca6:	4770      	bx	lr
 8004ca8:	803c3800 	.word	0x803c3800

08004cac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cc6:	d901      	bls.n	8004ccc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e01b      	b.n	8004d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	daf2      	bge.n	8004cba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	019b      	lsls	r3, r3, #6
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cf0:	d901      	bls.n	8004cf6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e006      	b.n	8004d04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d0f0      	beq.n	8004ce4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d28:	d901      	bls.n	8004d2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e018      	b.n	8004d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	daf2      	bge.n	8004d1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d4c:	d901      	bls.n	8004d52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e006      	b.n	8004d60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d0f0      	beq.n	8004d40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	68f9      	ldr	r1, [r7, #12]
 8004d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b087      	sub	sp, #28
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 0306 	and.w	r3, r3, #6
 8004db6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d102      	bne.n	8004dc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	75fb      	strb	r3, [r7, #23]
 8004dc2:	e00a      	b.n	8004dda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d002      	beq.n	8004dd0 <USB_GetDevSpeed+0x32>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d102      	bne.n	8004dd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	75fb      	strb	r3, [r7, #23]
 8004dd4:	e001      	b.n	8004dda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dd6:	230f      	movs	r3, #15
 8004dd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d13a      	bne.n	8004e7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	2101      	movs	r1, #1
 8004e16:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d155      	bne.n	8004ee8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	059b      	lsls	r3, r3, #22
 8004e5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e60:	4313      	orrs	r3, r2
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	0151      	lsls	r1, r2, #5
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	440a      	add	r2, r1
 8004e6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e036      	b.n	8004ee8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e80:	69da      	ldr	r2, [r3, #28]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d11a      	bne.n	8004ee8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	791b      	ldrb	r3, [r3, #4]
 8004ecc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ece:	430b      	orrs	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d161      	bne.n	8004fd8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f2a:	d11f      	bne.n	8004f6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f96:	69da      	ldr	r2, [r3, #28]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	68f9      	ldr	r1, [r7, #12]
 8004fac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	015a      	lsls	r2, r3, #5
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	4413      	add	r3, r2
 8004fbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	0159      	lsls	r1, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	440b      	add	r3, r1
 8004fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4b35      	ldr	r3, [pc, #212]	@ (80050a8 <USB_DeactivateEndpoint+0x1b0>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]
 8004fd6:	e060      	b.n	800509a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fee:	d11f      	bne.n	8005030 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800500a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800500e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800502a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800502e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	041b      	lsls	r3, r3, #16
 8005048:	43db      	mvns	r3, r3
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005050:	4013      	ands	r3, r2
 8005052:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505a:	69da      	ldr	r2, [r3, #28]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	2101      	movs	r1, #1
 8005066:	fa01 f303 	lsl.w	r3, r1, r3
 800506a:	041b      	lsls	r3, r3, #16
 800506c:	43db      	mvns	r3, r3
 800506e:	68f9      	ldr	r1, [r7, #12]
 8005070:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005074:	4013      	ands	r3, r2
 8005076:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	0159      	lsls	r1, r3, #5
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	440b      	add	r3, r1
 800508e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005092:	4619      	mov	r1, r3
 8005094:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <USB_DeactivateEndpoint+0x1b4>)
 8005096:	4013      	ands	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	ec337800 	.word	0xec337800
 80050ac:	eff37800 	.word	0xeff37800

080050b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	@ 0x28
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	f040 817f 	bne.w	80053d0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d132      	bne.n	8005140 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	0151      	lsls	r1, r2, #5
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	440a      	add	r2, r1
 80050f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050f4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80050f8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80050fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	0151      	lsls	r1, r2, #5
 8005110:	69fa      	ldr	r2, [r7, #28]
 8005112:	440a      	add	r2, r1
 8005114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005118:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800511c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	69fa      	ldr	r2, [r7, #28]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005138:	0cdb      	lsrs	r3, r3, #19
 800513a:	04db      	lsls	r3, r3, #19
 800513c:	6113      	str	r3, [r2, #16]
 800513e:	e097      	b.n	8005270 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	0151      	lsls	r1, r2, #5
 8005152:	69fa      	ldr	r2, [r7, #28]
 8005154:	440a      	add	r2, r1
 8005156:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800515a:	0cdb      	lsrs	r3, r3, #19
 800515c:	04db      	lsls	r3, r3, #19
 800515e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	0151      	lsls	r1, r2, #5
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	440a      	add	r2, r1
 8005176:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800517a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800517e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005182:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d11a      	bne.n	80051c0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d903      	bls.n	800519e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
 80051be:	e044      	b.n	800524a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	1e5a      	subs	r2, r3, #1
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	8afb      	ldrh	r3, [r7, #22]
 80051e6:	04d9      	lsls	r1, r3, #19
 80051e8:	4ba4      	ldr	r3, [pc, #656]	@ (800547c <USB_EPStartXfer+0x3cc>)
 80051ea:	400b      	ands	r3, r1
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	0148      	lsls	r0, r1, #5
 80051f0:	69f9      	ldr	r1, [r7, #28]
 80051f2:	4401      	add	r1, r0
 80051f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80051f8:	4313      	orrs	r3, r2
 80051fa:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	791b      	ldrb	r3, [r3, #4]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d122      	bne.n	800524a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800521e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005222:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	8afb      	ldrh	r3, [r7, #22]
 8005234:	075b      	lsls	r3, r3, #29
 8005236:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800523a:	69b9      	ldr	r1, [r7, #24]
 800523c:	0148      	lsls	r0, r1, #5
 800523e:	69f9      	ldr	r1, [r7, #28]
 8005240:	4401      	add	r1, r0
 8005242:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005246:	4313      	orrs	r3, r2
 8005248:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	0148      	lsls	r0, r1, #5
 8005264:	69f9      	ldr	r1, [r7, #28]
 8005266:	4401      	add	r1, r0
 8005268:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800526c:	4313      	orrs	r3, r2
 800526e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d14b      	bne.n	800530e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	69db      	ldr	r3, [r3, #28]
 8005290:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d128      	bne.n	80052ec <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d110      	bne.n	80052cc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	0151      	lsls	r1, r2, #5
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	440a      	add	r2, r1
 80052c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e00f      	b.n	80052ec <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ea:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	0151      	lsls	r1, r2, #5
 80052fe:	69fa      	ldr	r2, [r7, #28]
 8005300:	440a      	add	r2, r1
 8005302:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005306:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	e166      	b.n	80055dc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005328:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800532c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	791b      	ldrb	r3, [r3, #4]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d015      	beq.n	8005362 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 814e 	beq.w	80055dc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	2101      	movs	r1, #1
 8005352:	fa01 f303 	lsl.w	r3, r1, r3
 8005356:	69f9      	ldr	r1, [r7, #28]
 8005358:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800535c:	4313      	orrs	r3, r2
 800535e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005360:	e13c      	b.n	80055dc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536e:	2b00      	cmp	r3, #0
 8005370:	d110      	bne.n	8005394 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	0151      	lsls	r1, r2, #5
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	440a      	add	r2, r1
 8005388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800538c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005390:	6013      	str	r3, [r2, #0]
 8005392:	e00f      	b.n	80053b4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68d9      	ldr	r1, [r3, #12]
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	781a      	ldrb	r2, [r3, #0]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	b298      	uxth	r0, r3
 80053c2:	79fb      	ldrb	r3, [r7, #7]
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	4603      	mov	r3, r0
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 f9b9 	bl	8005740 <USB_WritePacket>
 80053ce:	e105      	b.n	80055dc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0151      	lsls	r1, r2, #5
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	440a      	add	r2, r1
 80053e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053ea:	0cdb      	lsrs	r3, r3, #19
 80053ec:	04db      	lsls	r3, r3, #19
 80053ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800540a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800540e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005412:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d132      	bne.n	8005480 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005448:	69b9      	ldr	r1, [r7, #24]
 800544a:	0148      	lsls	r0, r1, #5
 800544c:	69f9      	ldr	r1, [r7, #28]
 800544e:	4401      	add	r1, r0
 8005450:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005454:	4313      	orrs	r3, r2
 8005456:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005472:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005476:	6113      	str	r3, [r2, #16]
 8005478:	e062      	b.n	8005540 <USB_EPStartXfer+0x490>
 800547a:	bf00      	nop
 800547c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d123      	bne.n	80054d0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549e:	69b9      	ldr	r1, [r7, #24]
 80054a0:	0148      	lsls	r0, r1, #5
 80054a2:	69f9      	ldr	r1, [r7, #28]
 80054a4:	4401      	add	r1, r0
 80054a6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054aa:	4313      	orrs	r3, r2
 80054ac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054cc:	6113      	str	r3, [r2, #16]
 80054ce:	e037      	b.n	8005540 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	4413      	add	r3, r2
 80054da:	1e5a      	subs	r2, r3, #1
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	8afa      	ldrh	r2, [r7, #22]
 80054ec:	fb03 f202 	mul.w	r2, r3, r2
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005500:	691a      	ldr	r2, [r3, #16]
 8005502:	8afb      	ldrh	r3, [r7, #22]
 8005504:	04d9      	lsls	r1, r3, #19
 8005506:	4b38      	ldr	r3, [pc, #224]	@ (80055e8 <USB_EPStartXfer+0x538>)
 8005508:	400b      	ands	r3, r1
 800550a:	69b9      	ldr	r1, [r7, #24]
 800550c:	0148      	lsls	r0, r1, #5
 800550e:	69f9      	ldr	r1, [r7, #28]
 8005510:	4401      	add	r1, r0
 8005512:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005516:	4313      	orrs	r3, r2
 8005518:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	0148      	lsls	r0, r1, #5
 8005534:	69f9      	ldr	r1, [r7, #28]
 8005536:	4401      	add	r1, r0
 8005538:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800553c:	4313      	orrs	r3, r2
 800553e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d10d      	bne.n	8005562 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	68d9      	ldr	r1, [r3, #12]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555e:	460a      	mov	r2, r1
 8005560:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	791b      	ldrb	r3, [r3, #4]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d128      	bne.n	80055bc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d110      	bne.n	800559c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005594:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e00f      	b.n	80055bc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3720      	adds	r7, #32
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	1ff80000 	.word	0x1ff80000

080055ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	785b      	ldrb	r3, [r3, #1]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d14a      	bne.n	80056a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800561e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005622:	f040 8086 	bne.w	8005732 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	7812      	ldrb	r2, [r2, #0]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005644:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005648:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	7812      	ldrb	r2, [r2, #0]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005668:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800566c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	3301      	adds	r3, #1
 8005672:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f242 7210 	movw	r2, #10000	@ 0x2710
 800567a:	4293      	cmp	r3, r2
 800567c:	d902      	bls.n	8005684 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	75fb      	strb	r3, [r7, #23]
          break;
 8005682:	e056      	b.n	8005732 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800569c:	d0e7      	beq.n	800566e <USB_EPStopXfer+0x82>
 800569e:	e048      	b.n	8005732 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b8:	d13b      	bne.n	8005732 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	7812      	ldrb	r2, [r2, #0]
 80056ce:	0151      	lsls	r1, r2, #5
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	440a      	add	r2, r1
 80056d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	7812      	ldrb	r2, [r2, #0]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005700:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800570e:	4293      	cmp	r3, r2
 8005710:	d902      	bls.n	8005718 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
          break;
 8005716:	e00c      	b.n	8005732 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005730:	d0e7      	beq.n	8005702 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005732:	7dfb      	ldrb	r3, [r7, #23]
}
 8005734:	4618      	mov	r0, r3
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005740:	b480      	push	{r7}
 8005742:	b089      	sub	sp, #36	@ 0x24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4611      	mov	r1, r2
 800574c:	461a      	mov	r2, r3
 800574e:	460b      	mov	r3, r1
 8005750:	71fb      	strb	r3, [r7, #7]
 8005752:	4613      	mov	r3, r2
 8005754:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800575e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d123      	bne.n	80057ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005766:	88bb      	ldrh	r3, [r7, #4]
 8005768:	3303      	adds	r3, #3
 800576a:	089b      	lsrs	r3, r3, #2
 800576c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800576e:	2300      	movs	r3, #0
 8005770:	61bb      	str	r3, [r7, #24]
 8005772:	e018      	b.n	80057a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005774:	79fb      	ldrb	r3, [r7, #7]
 8005776:	031a      	lsls	r2, r3, #12
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	4413      	add	r3, r2
 800577c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005780:	461a      	mov	r2, r3
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	3301      	adds	r3, #1
 800578c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	3301      	adds	r3, #1
 8005792:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	3301      	adds	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3e2      	bcc.n	8005774 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3724      	adds	r7, #36	@ 0x24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057bc:	b480      	push	{r7}
 80057be:	b08b      	sub	sp, #44	@ 0x2c
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	089b      	lsrs	r3, r3, #2
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	e014      	b.n	8005812 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80057f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f6:	3301      	adds	r3, #1
 80057f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	3301      	adds	r3, #1
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	3301      	adds	r3, #1
 8005804:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005808:	3301      	adds	r3, #1
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	3301      	adds	r3, #1
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	429a      	cmp	r2, r3
 8005818:	d3e6      	bcc.n	80057e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800581a:	8bfb      	ldrh	r3, [r7, #30]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01e      	beq.n	800585e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800582a:	461a      	mov	r2, r3
 800582c:	f107 0310 	add.w	r3, r7, #16
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
 8005840:	b2da      	uxtb	r2, r3
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	701a      	strb	r2, [r3, #0]
      i++;
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	3301      	adds	r3, #1
 800584a:	623b      	str	r3, [r7, #32]
      pDest++;
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	3301      	adds	r3, #1
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005852:	8bfb      	ldrh	r3, [r7, #30]
 8005854:	3b01      	subs	r3, #1
 8005856:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005858:	8bfb      	ldrh	r3, [r7, #30]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1ea      	bne.n	8005834 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800585e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005860:	4618      	mov	r0, r3
 8005862:	372c      	adds	r7, #44	@ 0x2c
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d12c      	bne.n	80058e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	db12      	blt.n	80058c0 <USB_EPSetStall+0x54>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00f      	beq.n	80058c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058de:	6013      	str	r3, [r2, #0]
 80058e0:	e02b      	b.n	800593a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	db12      	blt.n	800591a <USB_EPSetStall+0xae>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00f      	beq.n	800591a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	0151      	lsls	r1, r2, #5
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	440a      	add	r2, r1
 8005910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005914:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005918:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005934:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005938:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	785b      	ldrb	r3, [r3, #1]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d128      	bne.n	80059b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005982:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	791b      	ldrb	r3, [r3, #4]
 8005988:	2b03      	cmp	r3, #3
 800598a:	d003      	beq.n	8005994 <USB_EPClearStall+0x4c>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	791b      	ldrb	r3, [r3, #4]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d138      	bne.n	8005a06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	e027      	b.n	8005a06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	791b      	ldrb	r3, [r3, #4]
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d003      	beq.n	80059e6 <USB_EPClearStall+0x9e>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	791b      	ldrb	r3, [r3, #4]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d10f      	bne.n	8005a06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005a48:	68f9      	ldr	r1, [r7, #12]
 8005a4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a8e:	f023 0302 	bic.w	r3, r3, #2
 8005a92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005abc:	f023 0303 	bic.w	r3, r3, #3
 8005ac0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005afc:	68fb      	ldr	r3, [r7, #12]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	0c1b      	lsrs	r3, r3, #16
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	b29b      	uxth	r3, r3
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b085      	sub	sp, #20
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bd0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	fa22 f303 	lsr.w	r3, r2, r3
 8005bde:	01db      	lsls	r3, r3, #7
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0301 	and.w	r3, r3, #1
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c40:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c44:	f023 0307 	bic.w	r3, r3, #7
 8005c48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	460b      	mov	r3, r1
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	333c      	adds	r3, #60	@ 0x3c
 8005c82:	3304      	adds	r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4a26      	ldr	r2, [pc, #152]	@ (8005d24 <USB_EP0_OutStart+0xb8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d90a      	bls.n	8005ca6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ca0:	d101      	bne.n	8005ca6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e037      	b.n	8005d16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cac:	461a      	mov	r2, r3
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd4:	f043 0318 	orr.w	r3, r3, #24
 8005cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005cec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cee:	7afb      	ldrb	r3, [r7, #11]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10f      	bne.n	8005d14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d0e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	4f54300a 	.word	0x4f54300a

08005d28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3301      	adds	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d40:	d901      	bls.n	8005d46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e01b      	b.n	8005d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	daf2      	bge.n	8005d34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f043 0201 	orr.w	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d6a:	d901      	bls.n	8005d70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e006      	b.n	8005d7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d0f0      	beq.n	8005d5e <USB_CoreReset+0x36>

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
	...

08005d8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d98:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005d9c:	f002 fc88 	bl	80086b0 <USBD_static_malloc>
 8005da0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	32b0      	adds	r2, #176	@ 0xb0
 8005db2:	2100      	movs	r1, #0
 8005db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005db8:	2302      	movs	r3, #2
 8005dba:	e0d4      	b.n	8005f66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dbc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f002 fcb8 	bl	8008738 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32b0      	adds	r2, #176	@ 0xb0
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	32b0      	adds	r2, #176	@ 0xb0
 8005de2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7c1b      	ldrb	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d138      	bne.n	8005e66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005df4:	4b5e      	ldr	r3, [pc, #376]	@ (8005f70 <USBD_CDC_Init+0x1e4>)
 8005df6:	7819      	ldrb	r1, [r3, #0]
 8005df8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f002 fb33 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e04:	4b5a      	ldr	r3, [pc, #360]	@ (8005f70 <USBD_CDC_Init+0x1e4>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 020f 	and.w	r2, r3, #15
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	3324      	adds	r3, #36	@ 0x24
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e1e:	4b55      	ldr	r3, [pc, #340]	@ (8005f74 <USBD_CDC_Init+0x1e8>)
 8005e20:	7819      	ldrb	r1, [r3, #0]
 8005e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e26:	2202      	movs	r2, #2
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 fb1e 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e2e:	4b51      	ldr	r3, [pc, #324]	@ (8005f74 <USBD_CDC_Init+0x1e8>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	f003 020f 	and.w	r2, r3, #15
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e46:	2201      	movs	r2, #1
 8005e48:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005f78 <USBD_CDC_Init+0x1ec>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	f003 020f 	and.w	r2, r3, #15
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	3326      	adds	r3, #38	@ 0x26
 8005e60:	2210      	movs	r2, #16
 8005e62:	801a      	strh	r2, [r3, #0]
 8005e64:	e035      	b.n	8005ed2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e66:	4b42      	ldr	r3, [pc, #264]	@ (8005f70 <USBD_CDC_Init+0x1e4>)
 8005e68:	7819      	ldrb	r1, [r3, #0]
 8005e6a:	2340      	movs	r3, #64	@ 0x40
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f002 fafb 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e74:	4b3e      	ldr	r3, [pc, #248]	@ (8005f70 <USBD_CDC_Init+0x1e4>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	3324      	adds	r3, #36	@ 0x24
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e8e:	4b39      	ldr	r3, [pc, #228]	@ (8005f74 <USBD_CDC_Init+0x1e8>)
 8005e90:	7819      	ldrb	r1, [r3, #0]
 8005e92:	2340      	movs	r3, #64	@ 0x40
 8005e94:	2202      	movs	r2, #2
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f002 fae7 	bl	800846a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e9c:	4b35      	ldr	r3, [pc, #212]	@ (8005f74 <USBD_CDC_Init+0x1e8>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005eb8:	4b2f      	ldr	r3, [pc, #188]	@ (8005f78 <USBD_CDC_Init+0x1ec>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	f003 020f 	and.w	r2, r3, #15
 8005ec0:	6879      	ldr	r1, [r7, #4]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	440b      	add	r3, r1
 8005ecc:	3326      	adds	r3, #38	@ 0x26
 8005ece:	2210      	movs	r2, #16
 8005ed0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ed2:	4b29      	ldr	r3, [pc, #164]	@ (8005f78 <USBD_CDC_Init+0x1ec>)
 8005ed4:	7819      	ldrb	r1, [r3, #0]
 8005ed6:	2308      	movs	r3, #8
 8005ed8:	2203      	movs	r2, #3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f002 fac5 	bl	800846a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ee0:	4b25      	ldr	r3, [pc, #148]	@ (8005f78 <USBD_CDC_Init+0x1ec>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	6879      	ldr	r1, [r7, #4]
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	3324      	adds	r3, #36	@ 0x24
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	33b0      	adds	r3, #176	@ 0xb0
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f30:	2302      	movs	r3, #2
 8005f32:	e018      	b.n	8005f66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7c1b      	ldrb	r3, [r3, #16]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <USBD_CDC_Init+0x1e8>)
 8005f3e:	7819      	ldrb	r1, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f002 fb7c 	bl	8008648 <USBD_LL_PrepareReceive>
 8005f50:	e008      	b.n	8005f64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f52:	4b08      	ldr	r3, [pc, #32]	@ (8005f74 <USBD_CDC_Init+0x1e8>)
 8005f54:	7819      	ldrb	r1, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f5c:	2340      	movs	r3, #64	@ 0x40
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f002 fb72 	bl	8008648 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3710      	adds	r7, #16
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20000093 	.word	0x20000093
 8005f74:	20000094 	.word	0x20000094
 8005f78:	20000095 	.word	0x20000095

08005f7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f88:	4b3a      	ldr	r3, [pc, #232]	@ (8006074 <USBD_CDC_DeInit+0xf8>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f002 fa91 	bl	80084b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f94:	4b37      	ldr	r3, [pc, #220]	@ (8006074 <USBD_CDC_DeInit+0xf8>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3324      	adds	r3, #36	@ 0x24
 8005faa:	2200      	movs	r2, #0
 8005fac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fae:	4b32      	ldr	r3, [pc, #200]	@ (8006078 <USBD_CDC_DeInit+0xfc>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f002 fa7e 	bl	80084b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fba:	4b2f      	ldr	r3, [pc, #188]	@ (8006078 <USBD_CDC_DeInit+0xfc>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fd6:	4b29      	ldr	r3, [pc, #164]	@ (800607c <USBD_CDC_DeInit+0x100>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f002 fa6a 	bl	80084b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005fe2:	4b26      	ldr	r3, [pc, #152]	@ (800607c <USBD_CDC_DeInit+0x100>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f003 020f 	and.w	r2, r3, #15
 8005fea:	6879      	ldr	r1, [r7, #4]
 8005fec:	4613      	mov	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	440b      	add	r3, r1
 8005ff6:	3324      	adds	r3, #36	@ 0x24
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800607c <USBD_CDC_DeInit+0x100>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	f003 020f 	and.w	r2, r3, #15
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	3326      	adds	r3, #38	@ 0x26
 8006012:	2200      	movs	r2, #0
 8006014:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	32b0      	adds	r2, #176	@ 0xb0
 8006020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d01f      	beq.n	8006068 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	33b0      	adds	r3, #176	@ 0xb0
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	32b0      	adds	r2, #176	@ 0xb0
 8006046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604a:	4618      	mov	r0, r3
 800604c:	f002 fb3e 	bl	80086cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	32b0      	adds	r2, #176	@ 0xb0
 800605a:	2100      	movs	r1, #0
 800605c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	20000093 	.word	0x20000093
 8006078:	20000094 	.word	0x20000094
 800607c:	20000095 	.word	0x20000095

08006080 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	32b0      	adds	r2, #176	@ 0xb0
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e0bf      	b.n	8006230 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d050      	beq.n	800615e <USBD_CDC_Setup+0xde>
 80060bc:	2b20      	cmp	r3, #32
 80060be:	f040 80af 	bne.w	8006220 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	88db      	ldrh	r3, [r3, #6]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d03a      	beq.n	8006140 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b25b      	sxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	da1b      	bge.n	800610c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	33b0      	adds	r3, #176	@ 0xb0
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	88d2      	ldrh	r2, [r2, #6]
 80060f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	88db      	ldrh	r3, [r3, #6]
 80060f6:	2b07      	cmp	r3, #7
 80060f8:	bf28      	it	cs
 80060fa:	2307      	movcs	r3, #7
 80060fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	89fa      	ldrh	r2, [r7, #14]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f001 fdbd 	bl	8007c84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800610a:	e090      	b.n	800622e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	785a      	ldrb	r2, [r3, #1]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	88db      	ldrh	r3, [r3, #6]
 800611a:	2b3f      	cmp	r3, #63	@ 0x3f
 800611c:	d803      	bhi.n	8006126 <USBD_CDC_Setup+0xa6>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	88db      	ldrh	r3, [r3, #6]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	e000      	b.n	8006128 <USBD_CDC_Setup+0xa8>
 8006126:	2240      	movs	r2, #64	@ 0x40
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800612e:	6939      	ldr	r1, [r7, #16]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006136:	461a      	mov	r2, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fdcf 	bl	8007cdc <USBD_CtlPrepareRx>
      break;
 800613e:	e076      	b.n	800622e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	33b0      	adds	r3, #176	@ 0xb0
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	7850      	ldrb	r0, [r2, #1]
 8006156:	2200      	movs	r2, #0
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	4798      	blx	r3
      break;
 800615c:	e067      	b.n	800622e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b0b      	cmp	r3, #11
 8006164:	d851      	bhi.n	800620a <USBD_CDC_Setup+0x18a>
 8006166:	a201      	add	r2, pc, #4	@ (adr r2, 800616c <USBD_CDC_Setup+0xec>)
 8006168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616c:	0800619d 	.word	0x0800619d
 8006170:	08006219 	.word	0x08006219
 8006174:	0800620b 	.word	0x0800620b
 8006178:	0800620b 	.word	0x0800620b
 800617c:	0800620b 	.word	0x0800620b
 8006180:	0800620b 	.word	0x0800620b
 8006184:	0800620b 	.word	0x0800620b
 8006188:	0800620b 	.word	0x0800620b
 800618c:	0800620b 	.word	0x0800620b
 8006190:	0800620b 	.word	0x0800620b
 8006194:	080061c7 	.word	0x080061c7
 8006198:	080061f1 	.word	0x080061f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d107      	bne.n	80061b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061a8:	f107 030a 	add.w	r3, r7, #10
 80061ac:	2202      	movs	r2, #2
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 fd67 	bl	8007c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061b6:	e032      	b.n	800621e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fce5 	bl	8007b8a <USBD_CtlError>
            ret = USBD_FAIL;
 80061c0:	2303      	movs	r3, #3
 80061c2:	75fb      	strb	r3, [r7, #23]
          break;
 80061c4:	e02b      	b.n	800621e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d107      	bne.n	80061e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061d2:	f107 030d 	add.w	r3, r7, #13
 80061d6:	2201      	movs	r2, #1
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 fd52 	bl	8007c84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061e0:	e01d      	b.n	800621e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f001 fcd0 	bl	8007b8a <USBD_CtlError>
            ret = USBD_FAIL;
 80061ea:	2303      	movs	r3, #3
 80061ec:	75fb      	strb	r3, [r7, #23]
          break;
 80061ee:	e016      	b.n	800621e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d00f      	beq.n	800621c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fcc3 	bl	8007b8a <USBD_CtlError>
            ret = USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006208:	e008      	b.n	800621c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 fcbc 	bl	8007b8a <USBD_CtlError>
          ret = USBD_FAIL;
 8006212:	2303      	movs	r3, #3
 8006214:	75fb      	strb	r3, [r7, #23]
          break;
 8006216:	e002      	b.n	800621e <USBD_CDC_Setup+0x19e>
          break;
 8006218:	bf00      	nop
 800621a:	e008      	b.n	800622e <USBD_CDC_Setup+0x1ae>
          break;
 800621c:	bf00      	nop
      }
      break;
 800621e:	e006      	b.n	800622e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f001 fcb1 	bl	8007b8a <USBD_CtlError>
      ret = USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	75fb      	strb	r3, [r7, #23]
      break;
 800622c:	bf00      	nop
  }

  return (uint8_t)ret;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800624a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	32b0      	adds	r2, #176	@ 0xb0
 8006256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d101      	bne.n	8006262 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800625e:	2303      	movs	r3, #3
 8006260:	e065      	b.n	800632e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	32b0      	adds	r2, #176	@ 0xb0
 800626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006270:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	f003 020f 	and.w	r2, r3, #15
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	3318      	adds	r3, #24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d02f      	beq.n	80062ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	f003 020f 	and.w	r2, r3, #15
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	3318      	adds	r3, #24
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	f003 010f 	and.w	r1, r3, #15
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	460b      	mov	r3, r1
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	440b      	add	r3, r1
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4403      	add	r3, r0
 80062b4:	331c      	adds	r3, #28
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d112      	bne.n	80062ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	3318      	adds	r3, #24
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062de:	78f9      	ldrb	r1, [r7, #3]
 80062e0:	2300      	movs	r3, #0
 80062e2:	2200      	movs	r2, #0
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f002 f98e 	bl	8008606 <USBD_LL_Transmit>
 80062ea:	e01f      	b.n	800632c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	33b0      	adds	r3, #176	@ 0xb0
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d010      	beq.n	800632c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	33b0      	adds	r3, #176	@ 0xb0
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006328:	78fa      	ldrb	r2, [r7, #3]
 800632a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	460b      	mov	r3, r1
 8006340:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	32b0      	adds	r2, #176	@ 0xb0
 800634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006350:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	32b0      	adds	r2, #176	@ 0xb0
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006364:	2303      	movs	r3, #3
 8006366:	e01a      	b.n	800639e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f002 f98c 	bl	800868a <USBD_LL_GetRxDataSize>
 8006372:	4602      	mov	r2, r0
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	33b0      	adds	r3, #176	@ 0xb0
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006398:	4611      	mov	r1, r2
 800639a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	32b0      	adds	r2, #176	@ 0xb0
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e024      	b.n	8006412 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	33b0      	adds	r3, #176	@ 0xb0
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d019      	beq.n	8006410 <USBD_CDC_EP0_RxReady+0x6a>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80063e2:	2bff      	cmp	r3, #255	@ 0xff
 80063e4:	d014      	beq.n	8006410 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	33b0      	adds	r3, #176	@ 0xb0
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4413      	add	r3, r2
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80063fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006406:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	22ff      	movs	r2, #255	@ 0xff
 800640c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006424:	2182      	movs	r1, #130	@ 0x82
 8006426:	4818      	ldr	r0, [pc, #96]	@ (8006488 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006428:	f000 fd4f 	bl	8006eca <USBD_GetEpDesc>
 800642c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800642e:	2101      	movs	r1, #1
 8006430:	4815      	ldr	r0, [pc, #84]	@ (8006488 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006432:	f000 fd4a 	bl	8006eca <USBD_GetEpDesc>
 8006436:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006438:	2181      	movs	r1, #129	@ 0x81
 800643a:	4813      	ldr	r0, [pc, #76]	@ (8006488 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800643c:	f000 fd45 	bl	8006eca <USBD_GetEpDesc>
 8006440:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2210      	movs	r2, #16
 800644c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d006      	beq.n	8006462 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	2200      	movs	r2, #0
 8006458:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800645c:	711a      	strb	r2, [r3, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006470:	711a      	strb	r2, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2243      	movs	r2, #67	@ 0x43
 800647a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800647c:	4b02      	ldr	r3, [pc, #8]	@ (8006488 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800647e:	4618      	mov	r0, r3
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000050 	.word	0x20000050

0800648c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006494:	2182      	movs	r1, #130	@ 0x82
 8006496:	4818      	ldr	r0, [pc, #96]	@ (80064f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006498:	f000 fd17 	bl	8006eca <USBD_GetEpDesc>
 800649c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800649e:	2101      	movs	r1, #1
 80064a0:	4815      	ldr	r0, [pc, #84]	@ (80064f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064a2:	f000 fd12 	bl	8006eca <USBD_GetEpDesc>
 80064a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064a8:	2181      	movs	r1, #129	@ 0x81
 80064aa:	4813      	ldr	r0, [pc, #76]	@ (80064f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064ac:	f000 fd0d 	bl	8006eca <USBD_GetEpDesc>
 80064b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2210      	movs	r2, #16
 80064bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d006      	beq.n	80064d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2200      	movs	r2, #0
 80064c8:	711a      	strb	r2, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f042 0202 	orr.w	r2, r2, #2
 80064d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d006      	beq.n	80064e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	711a      	strb	r2, [r3, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	f042 0202 	orr.w	r2, r2, #2
 80064e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2243      	movs	r2, #67	@ 0x43
 80064ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064ec:	4b02      	ldr	r3, [pc, #8]	@ (80064f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000050 	.word	0x20000050

080064fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006504:	2182      	movs	r1, #130	@ 0x82
 8006506:	4818      	ldr	r0, [pc, #96]	@ (8006568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006508:	f000 fcdf 	bl	8006eca <USBD_GetEpDesc>
 800650c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800650e:	2101      	movs	r1, #1
 8006510:	4815      	ldr	r0, [pc, #84]	@ (8006568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006512:	f000 fcda 	bl	8006eca <USBD_GetEpDesc>
 8006516:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006518:	2181      	movs	r1, #129	@ 0x81
 800651a:	4813      	ldr	r0, [pc, #76]	@ (8006568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800651c:	f000 fcd5 	bl	8006eca <USBD_GetEpDesc>
 8006520:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	2210      	movs	r2, #16
 800652c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d006      	beq.n	8006542 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2200      	movs	r2, #0
 8006538:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800653c:	711a      	strb	r2, [r3, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006550:	711a      	strb	r2, [r3, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2243      	movs	r2, #67	@ 0x43
 800655a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800655c:	4b02      	ldr	r3, [pc, #8]	@ (8006568 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20000050 	.word	0x20000050

0800656c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	220a      	movs	r2, #10
 8006578:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800657a:	4b03      	ldr	r3, [pc, #12]	@ (8006588 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	2000000c 	.word	0x2000000c

0800658c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800659c:	2303      	movs	r3, #3
 800659e:	e009      	b.n	80065b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	33b0      	adds	r3, #176	@ 0xb0
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	32b0      	adds	r2, #176	@ 0xb0
 80065d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e008      	b.n	80065f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	32b0      	adds	r2, #176	@ 0xb0
 8006618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006624:	2303      	movs	r3, #3
 8006626:	e004      	b.n	8006632 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	32b0      	adds	r2, #176	@ 0xb0
 8006652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006656:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006662:	2303      	movs	r3, #3
 8006664:	e025      	b.n	80066b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11f      	bne.n	80066b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2201      	movs	r2, #1
 8006674:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006678:	4b10      	ldr	r3, [pc, #64]	@ (80066bc <USBD_CDC_TransmitPacket+0x7c>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	f003 020f 	and.w	r2, r3, #15
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4403      	add	r3, r0
 8006692:	3318      	adds	r3, #24
 8006694:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006696:	4b09      	ldr	r3, [pc, #36]	@ (80066bc <USBD_CDC_TransmitPacket+0x7c>)
 8006698:	7819      	ldrb	r1, [r3, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 ffad 	bl	8008606 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000093 	.word	0x20000093

080066c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	32b0      	adds	r2, #176	@ 0xb0
 80066d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32b0      	adds	r2, #176	@ 0xb0
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e018      	b.n	8006720 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	7c1b      	ldrb	r3, [r3, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006728 <USBD_CDC_ReceivePacket+0x68>)
 80066f8:	7819      	ldrb	r1, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 ff9f 	bl	8008648 <USBD_LL_PrepareReceive>
 800670a:	e008      	b.n	800671e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800670c:	4b06      	ldr	r3, [pc, #24]	@ (8006728 <USBD_CDC_ReceivePacket+0x68>)
 800670e:	7819      	ldrb	r1, [r3, #0]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006716:	2340      	movs	r3, #64	@ 0x40
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 ff95 	bl	8008648 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20000094 	.word	0x20000094

0800672c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	4613      	mov	r3, r2
 8006738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006740:	2303      	movs	r3, #3
 8006742:	e01f      	b.n	8006784 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	79fa      	ldrb	r2, [r7, #7]
 8006776:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f001 fe09 	bl	8008390 <USBD_LL_Init>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e025      	b.n	80067f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	32ae      	adds	r2, #174	@ 0xae
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00f      	beq.n	80067e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32ae      	adds	r2, #174	@ 0xae
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	f107 020e 	add.w	r2, r7, #14
 80067d4:	4610      	mov	r0, r2
 80067d6:	4798      	blx	r3
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fe17 	bl	8008434 <USBD_LL_Start>
 8006806:	4603      	mov	r3, r0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006818:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800681a:	4618      	mov	r0, r3
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800683c:	2b00      	cmp	r3, #0
 800683e:	d009      	beq.n	8006854 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	4611      	mov	r1, r2
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	4798      	blx	r3
 8006850:	4603      	mov	r3, r0
 8006852:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	78fa      	ldrb	r2, [r7, #3]
 8006878:	4611      	mov	r1, r2
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	4798      	blx	r3
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006884:	2303      	movs	r3, #3
 8006886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b084      	sub	sp, #16
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f936 	bl	8007b16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068c6:	f003 031f 	and.w	r3, r3, #31
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d01a      	beq.n	8006904 <USBD_LL_SetupStage+0x72>
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d822      	bhi.n	8006918 <USBD_LL_SetupStage+0x86>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <USBD_LL_SetupStage+0x4a>
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d00a      	beq.n	80068f0 <USBD_LL_SetupStage+0x5e>
 80068da:	e01d      	b.n	8006918 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 fb63 	bl	8006fb0 <USBD_StdDevReq>
 80068ea:	4603      	mov	r3, r0
 80068ec:	73fb      	strb	r3, [r7, #15]
      break;
 80068ee:	e020      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fbcb 	bl	8007094 <USBD_StdItfReq>
 80068fe:	4603      	mov	r3, r0
 8006900:	73fb      	strb	r3, [r7, #15]
      break;
 8006902:	e016      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fc2d 	bl	800716c <USBD_StdEPReq>
 8006912:	4603      	mov	r3, r0
 8006914:	73fb      	strb	r3, [r7, #15]
      break;
 8006916:	e00c      	b.n	8006932 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800691e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006922:	b2db      	uxtb	r3, r3
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fde4 	bl	80084f4 <USBD_LL_StallEP>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	bf00      	nop
  }

  return ret;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	460b      	mov	r3, r1
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800694e:	7afb      	ldrb	r3, [r7, #11]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d16e      	bne.n	8006a32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800695a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006962:	2b03      	cmp	r3, #3
 8006964:	f040 8098 	bne.w	8006a98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d913      	bls.n	800699c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	689a      	ldr	r2, [r3, #8]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	4293      	cmp	r3, r2
 800698c:	bf28      	it	cs
 800698e:	4613      	movcs	r3, r2
 8006990:	461a      	mov	r2, r3
 8006992:	6879      	ldr	r1, [r7, #4]
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f001 f9be 	bl	8007d16 <USBD_CtlContinueRx>
 800699a:	e07d      	b.n	8006a98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d014      	beq.n	80069d4 <USBD_LL_DataOutStage+0x98>
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d81d      	bhi.n	80069ea <USBD_LL_DataOutStage+0xae>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <USBD_LL_DataOutStage+0x7c>
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d003      	beq.n	80069be <USBD_LL_DataOutStage+0x82>
 80069b6:	e018      	b.n	80069ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	75bb      	strb	r3, [r7, #22]
            break;
 80069bc:	e018      	b.n	80069f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	4619      	mov	r1, r3
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fa64 	bl	8006e96 <USBD_CoreFindIF>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75bb      	strb	r3, [r7, #22]
            break;
 80069d2:	e00d      	b.n	80069f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	4619      	mov	r1, r3
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fa66 	bl	8006eb0 <USBD_CoreFindEP>
 80069e4:	4603      	mov	r3, r0
 80069e6:	75bb      	strb	r3, [r7, #22]
            break;
 80069e8:	e002      	b.n	80069f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75bb      	strb	r3, [r7, #22]
            break;
 80069ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069f0:	7dbb      	ldrb	r3, [r7, #22]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d119      	bne.n	8006a2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d113      	bne.n	8006a2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a02:	7dba      	ldrb	r2, [r7, #22]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	32ae      	adds	r2, #174	@ 0xae
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a12:	7dba      	ldrb	r2, [r7, #22]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a1a:	7dba      	ldrb	r2, [r7, #22]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	32ae      	adds	r2, #174	@ 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f001 f984 	bl	8007d38 <USBD_CtlSendStatus>
 8006a30:	e032      	b.n	8006a98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a32:	7afb      	ldrb	r3, [r7, #11]
 8006a34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fa37 	bl	8006eb0 <USBD_CoreFindEP>
 8006a42:	4603      	mov	r3, r0
 8006a44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a46:	7dbb      	ldrb	r3, [r7, #22]
 8006a48:	2bff      	cmp	r3, #255	@ 0xff
 8006a4a:	d025      	beq.n	8006a98 <USBD_LL_DataOutStage+0x15c>
 8006a4c:	7dbb      	ldrb	r3, [r7, #22]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d122      	bne.n	8006a98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d117      	bne.n	8006a8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a5e:	7dba      	ldrb	r2, [r7, #22]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	32ae      	adds	r2, #174	@ 0xae
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00f      	beq.n	8006a8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a6e:	7dba      	ldrb	r2, [r7, #22]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a76:	7dba      	ldrb	r2, [r7, #22]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	32ae      	adds	r2, #174	@ 0xae
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	7afa      	ldrb	r2, [r7, #11]
 8006a84:	4611      	mov	r1, r2
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	4798      	blx	r3
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d001      	beq.n	8006a98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	e000      	b.n	8006a9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b086      	sub	sp, #24
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	607a      	str	r2, [r7, #4]
 8006aae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ab0:	7afb      	ldrb	r3, [r7, #11]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d16f      	bne.n	8006b96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3314      	adds	r3, #20
 8006aba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d15a      	bne.n	8006b7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	689a      	ldr	r2, [r3, #8]
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d914      	bls.n	8006afc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	1ad2      	subs	r2, r2, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 f8e6 	bl	8007cba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aee:	2300      	movs	r3, #0
 8006af0:	2200      	movs	r2, #0
 8006af2:	2100      	movs	r1, #0
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f001 fda7 	bl	8008648 <USBD_LL_PrepareReceive>
 8006afa:	e03f      	b.n	8006b7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d11c      	bne.n	8006b42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d316      	bcc.n	8006b42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d20f      	bcs.n	8006b42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b22:	2200      	movs	r2, #0
 8006b24:	2100      	movs	r1, #0
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f001 f8c7 	bl	8007cba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	2100      	movs	r1, #0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f001 fd84 	bl	8008648 <USBD_LL_PrepareReceive>
 8006b40:	e01c      	b.n	8006b7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d10f      	bne.n	8006b6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b6e:	2180      	movs	r1, #128	@ 0x80
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f001 fcbf 	bl	80084f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 f8f1 	bl	8007d5e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d03a      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff fe42 	bl	8006810 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006b94:	e032      	b.n	8006bfc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f985 	bl	8006eb0 <USBD_CoreFindEP>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2bff      	cmp	r3, #255	@ 0xff
 8006bae:	d025      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d122      	bne.n	8006bfc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d11c      	bne.n	8006bfc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bc2:	7dfa      	ldrb	r2, [r7, #23]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	32ae      	adds	r2, #174	@ 0xae
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d014      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bd2:	7dfa      	ldrb	r2, [r7, #23]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bda:	7dfa      	ldrb	r2, [r7, #23]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	32ae      	adds	r2, #174	@ 0xae
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	7afa      	ldrb	r2, [r7, #11]
 8006be8:	4611      	mov	r1, r2
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bf2:	7dbb      	ldrb	r3, [r7, #22]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006bf8:	7dbb      	ldrb	r3, [r7, #22]
 8006bfa:	e000      	b.n	8006bfe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d014      	beq.n	8006c6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00e      	beq.n	8006c6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6852      	ldr	r2, [r2, #4]
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c6c:	2340      	movs	r3, #64	@ 0x40
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fbf9 	bl	800846a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2240      	movs	r2, #64	@ 0x40
 8006c84:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c88:	2340      	movs	r3, #64	@ 0x40
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2180      	movs	r1, #128	@ 0x80
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fbeb 	bl	800846a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2240      	movs	r2, #64	@ 0x40
 8006c9e:	621a      	str	r2, [r3, #32]

  return ret;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d006      	beq.n	8006cec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2204      	movs	r2, #4
 8006cf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d106      	bne.n	8006d24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d110      	bne.n	8006d68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d56:	69db      	ldr	r3, [r3, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	32ae      	adds	r2, #174	@ 0xae
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e01c      	b.n	8006dce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d115      	bne.n	8006dcc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32ae      	adds	r2, #174	@ 0xae
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00b      	beq.n	8006dcc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	32ae      	adds	r2, #174	@ 0xae
 8006dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc2:	6a1b      	ldr	r3, [r3, #32]
 8006dc4:	78fa      	ldrb	r2, [r7, #3]
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	32ae      	adds	r2, #174	@ 0xae
 8006dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e01c      	b.n	8006e32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d115      	bne.n	8006e30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	32ae      	adds	r2, #174	@ 0xae
 8006e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	32ae      	adds	r2, #174	@ 0xae
 8006e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e28:	78fa      	ldrb	r2, [r7, #3]
 8006e2a:	4611      	mov	r1, r2
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00e      	beq.n	8006e8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6852      	ldr	r2, [r2, #4]
 8006e7a:	b2d2      	uxtb	r2, r2
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d001      	beq.n	8006e8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b083      	sub	sp, #12
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ea2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ebc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b086      	sub	sp, #24
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d91f      	bls.n	8006f30 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006ef6:	e013      	b.n	8006f20 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006ef8:	f107 030a 	add.w	r3, r7, #10
 8006efc:	4619      	mov	r1, r3
 8006efe:	6978      	ldr	r0, [r7, #20]
 8006f00:	f000 f81b 	bl	8006f3a <USBD_GetNextDesc>
 8006f04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	785b      	ldrb	r3, [r3, #1]
 8006f0a:	2b05      	cmp	r3, #5
 8006f0c:	d108      	bne.n	8006f20 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	789b      	ldrb	r3, [r3, #2]
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d008      	beq.n	8006f2e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	885b      	ldrh	r3, [r3, #2]
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d8e5      	bhi.n	8006ef8 <USBD_GetEpDesc+0x2e>
 8006f2c:	e000      	b.n	8006f30 <USBD_GetEpDesc+0x66>
          break;
 8006f2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f30:	693b      	ldr	r3, [r7, #16]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	7812      	ldrb	r2, [r2, #0]
 8006f50:	4413      	add	r3, r2
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4413      	add	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f64:	68fb      	ldr	r3, [r7, #12]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b087      	sub	sp, #28
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	3301      	adds	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f90:	8a3b      	ldrh	r3, [r7, #16]
 8006f92:	021b      	lsls	r3, r3, #8
 8006f94:	b21a      	sxth	r2, r3
 8006f96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	b21b      	sxth	r3, r3
 8006f9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fa0:	89fb      	ldrh	r3, [r7, #14]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d005      	beq.n	8006fd6 <USBD_StdDevReq+0x26>
 8006fca:	2b40      	cmp	r3, #64	@ 0x40
 8006fcc:	d857      	bhi.n	800707e <USBD_StdDevReq+0xce>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00f      	beq.n	8006ff2 <USBD_StdDevReq+0x42>
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d153      	bne.n	800707e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	32ae      	adds	r2, #174	@ 0xae
 8006fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	e04a      	b.n	8007088 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d83b      	bhi.n	8007072 <USBD_StdDevReq+0xc2>
 8006ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8007000 <USBD_StdDevReq+0x50>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007055 	.word	0x08007055
 8007004:	08007069 	.word	0x08007069
 8007008:	08007073 	.word	0x08007073
 800700c:	0800705f 	.word	0x0800705f
 8007010:	08007073 	.word	0x08007073
 8007014:	08007033 	.word	0x08007033
 8007018:	08007029 	.word	0x08007029
 800701c:	08007073 	.word	0x08007073
 8007020:	0800704b 	.word	0x0800704b
 8007024:	0800703d 	.word	0x0800703d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa3c 	bl	80074a8 <USBD_GetDescriptor>
          break;
 8007030:	e024      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fbcb 	bl	80077d0 <USBD_SetAddress>
          break;
 800703a:	e01f      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fc0a 	bl	8007858 <USBD_SetConfig>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
          break;
 8007048:	e018      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fcad 	bl	80079ac <USBD_GetConfig>
          break;
 8007052:	e013      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fcde 	bl	8007a18 <USBD_GetStatus>
          break;
 800705c:	e00e      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800705e:	6839      	ldr	r1, [r7, #0]
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fd0d 	bl	8007a80 <USBD_SetFeature>
          break;
 8007066:	e009      	b.n	800707c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007068:	6839      	ldr	r1, [r7, #0]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fd31 	bl	8007ad2 <USBD_ClrFeature>
          break;
 8007070:	e004      	b.n	800707c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fd88 	bl	8007b8a <USBD_CtlError>
          break;
 800707a:	bf00      	nop
      }
      break;
 800707c:	e004      	b.n	8007088 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fd82 	bl	8007b8a <USBD_CtlError>
      break;
 8007086:	bf00      	nop
  }

  return ret;
 8007088:	7bfb      	ldrb	r3, [r7, #15]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop

08007094 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070aa:	2b40      	cmp	r3, #64	@ 0x40
 80070ac:	d005      	beq.n	80070ba <USBD_StdItfReq+0x26>
 80070ae:	2b40      	cmp	r3, #64	@ 0x40
 80070b0:	d852      	bhi.n	8007158 <USBD_StdItfReq+0xc4>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <USBD_StdItfReq+0x26>
 80070b6:	2b20      	cmp	r3, #32
 80070b8:	d14e      	bne.n	8007158 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d840      	bhi.n	800714a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	889b      	ldrh	r3, [r3, #4]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d836      	bhi.n	8007140 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	889b      	ldrh	r3, [r3, #4]
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff fedb 	bl	8006e96 <USBD_CoreFindIF>
 80070e0:	4603      	mov	r3, r0
 80070e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2bff      	cmp	r3, #255	@ 0xff
 80070e8:	d01d      	beq.n	8007126 <USBD_StdItfReq+0x92>
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d11a      	bne.n	8007126 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070f0:	7bba      	ldrb	r2, [r7, #14]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	32ae      	adds	r2, #174	@ 0xae
 80070f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00f      	beq.n	8007120 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007100:	7bba      	ldrb	r2, [r7, #14]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007108:	7bba      	ldrb	r2, [r7, #14]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32ae      	adds	r2, #174	@ 0xae
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	4798      	blx	r3
 800711a:	4603      	mov	r3, r0
 800711c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800711e:	e004      	b.n	800712a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007124:	e001      	b.n	800712a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007126:	2303      	movs	r3, #3
 8007128:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	88db      	ldrh	r3, [r3, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d110      	bne.n	8007154 <USBD_StdItfReq+0xc0>
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10d      	bne.n	8007154 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fdfd 	bl	8007d38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800713e:	e009      	b.n	8007154 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fd21 	bl	8007b8a <USBD_CtlError>
          break;
 8007148:	e004      	b.n	8007154 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fd1c 	bl	8007b8a <USBD_CtlError>
          break;
 8007152:	e000      	b.n	8007156 <USBD_StdItfReq+0xc2>
          break;
 8007154:	bf00      	nop
      }
      break;
 8007156:	e004      	b.n	8007162 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fd15 	bl	8007b8a <USBD_CtlError>
      break;
 8007160:	bf00      	nop
  }

  return ret;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	889b      	ldrh	r3, [r3, #4]
 800717e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007188:	2b40      	cmp	r3, #64	@ 0x40
 800718a:	d007      	beq.n	800719c <USBD_StdEPReq+0x30>
 800718c:	2b40      	cmp	r3, #64	@ 0x40
 800718e:	f200 817f 	bhi.w	8007490 <USBD_StdEPReq+0x324>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d02a      	beq.n	80071ec <USBD_StdEPReq+0x80>
 8007196:	2b20      	cmp	r3, #32
 8007198:	f040 817a 	bne.w	8007490 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7ff fe85 	bl	8006eb0 <USBD_CoreFindEP>
 80071a6:	4603      	mov	r3, r0
 80071a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071aa:	7b7b      	ldrb	r3, [r7, #13]
 80071ac:	2bff      	cmp	r3, #255	@ 0xff
 80071ae:	f000 8174 	beq.w	800749a <USBD_StdEPReq+0x32e>
 80071b2:	7b7b      	ldrb	r3, [r7, #13]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 8170 	bne.w	800749a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071ba:	7b7a      	ldrb	r2, [r7, #13]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071c2:	7b7a      	ldrb	r2, [r7, #13]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	32ae      	adds	r2, #174	@ 0xae
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f000 8163 	beq.w	800749a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071d4:	7b7a      	ldrb	r2, [r7, #13]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	32ae      	adds	r2, #174	@ 0xae
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	4798      	blx	r3
 80071e6:	4603      	mov	r3, r0
 80071e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071ea:	e156      	b.n	800749a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d008      	beq.n	8007206 <USBD_StdEPReq+0x9a>
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	f300 8145 	bgt.w	8007484 <USBD_StdEPReq+0x318>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 809b 	beq.w	8007336 <USBD_StdEPReq+0x1ca>
 8007200:	2b01      	cmp	r3, #1
 8007202:	d03c      	beq.n	800727e <USBD_StdEPReq+0x112>
 8007204:	e13e      	b.n	8007484 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d002      	beq.n	8007218 <USBD_StdEPReq+0xac>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d016      	beq.n	8007244 <USBD_StdEPReq+0xd8>
 8007216:	e02c      	b.n	8007272 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <USBD_StdEPReq+0xce>
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b80      	cmp	r3, #128	@ 0x80
 8007222:	d00a      	beq.n	800723a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	4619      	mov	r1, r3
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 f963 	bl	80084f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800722e:	2180      	movs	r1, #128	@ 0x80
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f95f 	bl	80084f4 <USBD_LL_StallEP>
 8007236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007238:	e020      	b.n	800727c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fca4 	bl	8007b8a <USBD_CtlError>
              break;
 8007242:	e01b      	b.n	800727c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	885b      	ldrh	r3, [r3, #2]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10e      	bne.n	800726a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800724c:	7bbb      	ldrb	r3, [r7, #14]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <USBD_StdEPReq+0xfe>
 8007252:	7bbb      	ldrb	r3, [r7, #14]
 8007254:	2b80      	cmp	r3, #128	@ 0x80
 8007256:	d008      	beq.n	800726a <USBD_StdEPReq+0xfe>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	88db      	ldrh	r3, [r3, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d104      	bne.n	800726a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f945 	bl	80084f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fd64 	bl	8007d38 <USBD_CtlSendStatus>

              break;
 8007270:	e004      	b.n	800727c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fc88 	bl	8007b8a <USBD_CtlError>
              break;
 800727a:	bf00      	nop
          }
          break;
 800727c:	e107      	b.n	800748e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d002      	beq.n	8007290 <USBD_StdEPReq+0x124>
 800728a:	2b03      	cmp	r3, #3
 800728c:	d016      	beq.n	80072bc <USBD_StdEPReq+0x150>
 800728e:	e04b      	b.n	8007328 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00d      	beq.n	80072b2 <USBD_StdEPReq+0x146>
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b80      	cmp	r3, #128	@ 0x80
 800729a:	d00a      	beq.n	80072b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f927 	bl	80084f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072a6:	2180      	movs	r1, #128	@ 0x80
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f001 f923 	bl	80084f4 <USBD_LL_StallEP>
 80072ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072b0:	e040      	b.n	8007334 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fc68 	bl	8007b8a <USBD_CtlError>
              break;
 80072ba:	e03b      	b.n	8007334 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	885b      	ldrh	r3, [r3, #2]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d136      	bne.n	8007332 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d004      	beq.n	80072d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	4619      	mov	r1, r3
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f001 f92d 	bl	8008532 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 fd2d 	bl	8007d38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7ff fde4 	bl	8006eb0 <USBD_CoreFindEP>
 80072e8:	4603      	mov	r3, r0
 80072ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ec:	7b7b      	ldrb	r3, [r7, #13]
 80072ee:	2bff      	cmp	r3, #255	@ 0xff
 80072f0:	d01f      	beq.n	8007332 <USBD_StdEPReq+0x1c6>
 80072f2:	7b7b      	ldrb	r3, [r7, #13]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d11c      	bne.n	8007332 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072f8:	7b7a      	ldrb	r2, [r7, #13]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007300:	7b7a      	ldrb	r2, [r7, #13]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32ae      	adds	r2, #174	@ 0xae
 8007306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d010      	beq.n	8007332 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007310:	7b7a      	ldrb	r2, [r7, #13]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32ae      	adds	r2, #174	@ 0xae
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	4798      	blx	r3
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007326:	e004      	b.n	8007332 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007328:	6839      	ldr	r1, [r7, #0]
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 fc2d 	bl	8007b8a <USBD_CtlError>
              break;
 8007330:	e000      	b.n	8007334 <USBD_StdEPReq+0x1c8>
              break;
 8007332:	bf00      	nop
          }
          break;
 8007334:	e0ab      	b.n	800748e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d002      	beq.n	8007348 <USBD_StdEPReq+0x1dc>
 8007342:	2b03      	cmp	r3, #3
 8007344:	d032      	beq.n	80073ac <USBD_StdEPReq+0x240>
 8007346:	e097      	b.n	8007478 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <USBD_StdEPReq+0x1f2>
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b80      	cmp	r3, #128	@ 0x80
 8007352:	d004      	beq.n	800735e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fc17 	bl	8007b8a <USBD_CtlError>
                break;
 800735c:	e091      	b.n	8007482 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	da0b      	bge.n	800737e <USBD_StdEPReq+0x212>
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	3310      	adds	r3, #16
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	4413      	add	r3, r2
 800737a:	3304      	adds	r3, #4
 800737c:	e00b      	b.n	8007396 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	4413      	add	r3, r2
 8007394:	3304      	adds	r3, #4
 8007396:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2202      	movs	r2, #2
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fc6d 	bl	8007c84 <USBD_CtlSendData>
              break;
 80073aa:	e06a      	b.n	8007482 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da11      	bge.n	80073d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	f003 020f 	and.w	r2, r3, #15
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	3324      	adds	r3, #36	@ 0x24
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d117      	bne.n	80073fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fbda 	bl	8007b8a <USBD_CtlError>
                  break;
 80073d6:	e054      	b.n	8007482 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	f003 020f 	and.w	r2, r3, #15
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 fbc7 	bl	8007b8a <USBD_CtlError>
                  break;
 80073fc:	e041      	b.n	8007482 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007402:	2b00      	cmp	r3, #0
 8007404:	da0b      	bge.n	800741e <USBD_StdEPReq+0x2b2>
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800740c:	4613      	mov	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	3310      	adds	r3, #16
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	4413      	add	r3, r2
 800741a:	3304      	adds	r3, #4
 800741c:	e00b      	b.n	8007436 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	3304      	adds	r3, #4
 8007436:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <USBD_StdEPReq+0x2d8>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b80      	cmp	r3, #128	@ 0x80
 8007442:	d103      	bne.n	800744c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]
 800744a:	e00e      	b.n	800746a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	4619      	mov	r1, r3
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f001 f88d 	bl	8008570 <USBD_LL_IsStallEP>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e002      	b.n	800746a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2202      	movs	r2, #2
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fc07 	bl	8007c84 <USBD_CtlSendData>
              break;
 8007476:	e004      	b.n	8007482 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb85 	bl	8007b8a <USBD_CtlError>
              break;
 8007480:	bf00      	nop
          }
          break;
 8007482:	e004      	b.n	800748e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fb7f 	bl	8007b8a <USBD_CtlError>
          break;
 800748c:	bf00      	nop
      }
      break;
 800748e:	e005      	b.n	800749c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb79 	bl	8007b8a <USBD_CtlError>
      break;
 8007498:	e000      	b.n	800749c <USBD_StdEPReq+0x330>
      break;
 800749a:	bf00      	nop
  }

  return ret;
 800749c:	7bfb      	ldrb	r3, [r7, #15]
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
	...

080074a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ba:	2300      	movs	r3, #0
 80074bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	885b      	ldrh	r3, [r3, #2]
 80074c2:	0a1b      	lsrs	r3, r3, #8
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	2b0e      	cmp	r3, #14
 80074ca:	f200 8152 	bhi.w	8007772 <USBD_GetDescriptor+0x2ca>
 80074ce:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <USBD_GetDescriptor+0x2c>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	08007545 	.word	0x08007545
 80074d8:	0800755d 	.word	0x0800755d
 80074dc:	0800759d 	.word	0x0800759d
 80074e0:	08007773 	.word	0x08007773
 80074e4:	08007773 	.word	0x08007773
 80074e8:	08007713 	.word	0x08007713
 80074ec:	0800773f 	.word	0x0800773f
 80074f0:	08007773 	.word	0x08007773
 80074f4:	08007773 	.word	0x08007773
 80074f8:	08007773 	.word	0x08007773
 80074fc:	08007773 	.word	0x08007773
 8007500:	08007773 	.word	0x08007773
 8007504:	08007773 	.word	0x08007773
 8007508:	08007773 	.word	0x08007773
 800750c:	08007511 	.word	0x08007511
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007532:	e126      	b.n	8007782 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fb27 	bl	8007b8a <USBD_CtlError>
        err++;
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	3301      	adds	r3, #1
 8007540:	72fb      	strb	r3, [r7, #11]
      break;
 8007542:	e11e      	b.n	8007782 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7c12      	ldrb	r2, [r2, #16]
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
      break;
 800755a:	e112      	b.n	8007782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	7c1b      	ldrb	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10d      	bne.n	8007580 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800756a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800756c:	f107 0208 	add.w	r2, r7, #8
 8007570:	4610      	mov	r0, r2
 8007572:	4798      	blx	r3
 8007574:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	2202      	movs	r2, #2
 800757c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800757e:	e100      	b.n	8007782 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	f107 0208 	add.w	r2, r7, #8
 800758c:	4610      	mov	r0, r2
 800758e:	4798      	blx	r3
 8007590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	2202      	movs	r2, #2
 8007598:	701a      	strb	r2, [r3, #0]
      break;
 800759a:	e0f2      	b.n	8007782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	885b      	ldrh	r3, [r3, #2]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b05      	cmp	r3, #5
 80075a4:	f200 80ac 	bhi.w	8007700 <USBD_GetDescriptor+0x258>
 80075a8:	a201      	add	r2, pc, #4	@ (adr r2, 80075b0 <USBD_GetDescriptor+0x108>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	080075c9 	.word	0x080075c9
 80075b4:	080075fd 	.word	0x080075fd
 80075b8:	08007631 	.word	0x08007631
 80075bc:	08007665 	.word	0x08007665
 80075c0:	08007699 	.word	0x08007699
 80075c4:	080076cd 	.word	0x080076cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00b      	beq.n	80075ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	7c12      	ldrb	r2, [r2, #16]
 80075e0:	f107 0108 	add.w	r1, r7, #8
 80075e4:	4610      	mov	r0, r2
 80075e6:	4798      	blx	r3
 80075e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ea:	e091      	b.n	8007710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 facb 	bl	8007b8a <USBD_CtlError>
            err++;
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	3301      	adds	r3, #1
 80075f8:	72fb      	strb	r3, [r7, #11]
          break;
 80075fa:	e089      	b.n	8007710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	7c12      	ldrb	r2, [r2, #16]
 8007614:	f107 0108 	add.w	r1, r7, #8
 8007618:	4610      	mov	r0, r2
 800761a:	4798      	blx	r3
 800761c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800761e:	e077      	b.n	8007710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fab1 	bl	8007b8a <USBD_CtlError>
            err++;
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	3301      	adds	r3, #1
 800762c:	72fb      	strb	r3, [r7, #11]
          break;
 800762e:	e06f      	b.n	8007710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7c12      	ldrb	r2, [r2, #16]
 8007648:	f107 0108 	add.w	r1, r7, #8
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
 8007650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007652:	e05d      	b.n	8007710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa97 	bl	8007b8a <USBD_CtlError>
            err++;
 800765c:	7afb      	ldrb	r3, [r7, #11]
 800765e:	3301      	adds	r3, #1
 8007660:	72fb      	strb	r3, [r7, #11]
          break;
 8007662:	e055      	b.n	8007710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00b      	beq.n	8007688 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	7c12      	ldrb	r2, [r2, #16]
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	4610      	mov	r0, r2
 8007682:	4798      	blx	r3
 8007684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007686:	e043      	b.n	8007710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fa7d 	bl	8007b8a <USBD_CtlError>
            err++;
 8007690:	7afb      	ldrb	r3, [r7, #11]
 8007692:	3301      	adds	r3, #1
 8007694:	72fb      	strb	r3, [r7, #11]
          break;
 8007696:	e03b      	b.n	8007710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7c12      	ldrb	r2, [r2, #16]
 80076b0:	f107 0108 	add.w	r1, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ba:	e029      	b.n	8007710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076bc:	6839      	ldr	r1, [r7, #0]
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa63 	bl	8007b8a <USBD_CtlError>
            err++;
 80076c4:	7afb      	ldrb	r3, [r7, #11]
 80076c6:	3301      	adds	r3, #1
 80076c8:	72fb      	strb	r3, [r7, #11]
          break;
 80076ca:	e021      	b.n	8007710 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7c12      	ldrb	r2, [r2, #16]
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ee:	e00f      	b.n	8007710 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa49 	bl	8007b8a <USBD_CtlError>
            err++;
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	3301      	adds	r3, #1
 80076fc:	72fb      	strb	r3, [r7, #11]
          break;
 80076fe:	e007      	b.n	8007710 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007700:	6839      	ldr	r1, [r7, #0]
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa41 	bl	8007b8a <USBD_CtlError>
          err++;
 8007708:	7afb      	ldrb	r3, [r7, #11]
 800770a:	3301      	adds	r3, #1
 800770c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800770e:	bf00      	nop
      }
      break;
 8007710:	e037      	b.n	8007782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7c1b      	ldrb	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007722:	f107 0208 	add.w	r2, r7, #8
 8007726:	4610      	mov	r0, r2
 8007728:	4798      	blx	r3
 800772a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800772c:	e029      	b.n	8007782 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fa2a 	bl	8007b8a <USBD_CtlError>
        err++;
 8007736:	7afb      	ldrb	r3, [r7, #11]
 8007738:	3301      	adds	r3, #1
 800773a:	72fb      	strb	r3, [r7, #11]
      break;
 800773c:	e021      	b.n	8007782 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7c1b      	ldrb	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10d      	bne.n	8007762 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800774c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800774e:	f107 0208 	add.w	r2, r7, #8
 8007752:	4610      	mov	r0, r2
 8007754:	4798      	blx	r3
 8007756:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3301      	adds	r3, #1
 800775c:	2207      	movs	r2, #7
 800775e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007760:	e00f      	b.n	8007782 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa10 	bl	8007b8a <USBD_CtlError>
        err++;
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	3301      	adds	r3, #1
 800776e:	72fb      	strb	r3, [r7, #11]
      break;
 8007770:	e007      	b.n	8007782 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fa08 	bl	8007b8a <USBD_CtlError>
      err++;
 800777a:	7afb      	ldrb	r3, [r7, #11]
 800777c:	3301      	adds	r3, #1
 800777e:	72fb      	strb	r3, [r7, #11]
      break;
 8007780:	bf00      	nop
  }

  if (err != 0U)
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d11e      	bne.n	80077c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	88db      	ldrh	r3, [r3, #6]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d016      	beq.n	80077be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007790:	893b      	ldrh	r3, [r7, #8]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d00e      	beq.n	80077b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	88da      	ldrh	r2, [r3, #6]
 800779a:	893b      	ldrh	r3, [r7, #8]
 800779c:	4293      	cmp	r3, r2
 800779e:	bf28      	it	cs
 80077a0:	4613      	movcs	r3, r2
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077a6:	893b      	ldrh	r3, [r7, #8]
 80077a8:	461a      	mov	r2, r3
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fa69 	bl	8007c84 <USBD_CtlSendData>
 80077b2:	e009      	b.n	80077c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f9e7 	bl	8007b8a <USBD_CtlError>
 80077bc:	e004      	b.n	80077c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 faba 	bl	8007d38 <USBD_CtlSendStatus>
 80077c4:	e000      	b.n	80077c8 <USBD_GetDescriptor+0x320>
    return;
 80077c6:	bf00      	nop
  }
}
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop

080077d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	889b      	ldrh	r3, [r3, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d131      	bne.n	8007846 <USBD_SetAddress+0x76>
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d12d      	bne.n	8007846 <USBD_SetAddress+0x76>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	885b      	ldrh	r3, [r3, #2]
 80077ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80077f0:	d829      	bhi.n	8007846 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	885b      	ldrh	r3, [r3, #2]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b03      	cmp	r3, #3
 8007808:	d104      	bne.n	8007814 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f9bc 	bl	8007b8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007812:	e01d      	b.n	8007850 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7bfa      	ldrb	r2, [r7, #15]
 8007818:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fed1 	bl	80085c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa86 	bl	8007d38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800783a:	e009      	b.n	8007850 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007844:	e004      	b.n	8007850 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f99e 	bl	8007b8a <USBD_CtlError>
  }
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	885b      	ldrh	r3, [r3, #2]
 800786a:	b2da      	uxtb	r2, r3
 800786c:	4b4e      	ldr	r3, [pc, #312]	@ (80079a8 <USBD_SetConfig+0x150>)
 800786e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007870:	4b4d      	ldr	r3, [pc, #308]	@ (80079a8 <USBD_SetConfig+0x150>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d905      	bls.n	8007884 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f985 	bl	8007b8a <USBD_CtlError>
    return USBD_FAIL;
 8007880:	2303      	movs	r3, #3
 8007882:	e08c      	b.n	800799e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800788a:	b2db      	uxtb	r3, r3
 800788c:	2b02      	cmp	r3, #2
 800788e:	d002      	beq.n	8007896 <USBD_SetConfig+0x3e>
 8007890:	2b03      	cmp	r3, #3
 8007892:	d029      	beq.n	80078e8 <USBD_SetConfig+0x90>
 8007894:	e075      	b.n	8007982 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007896:	4b44      	ldr	r3, [pc, #272]	@ (80079a8 <USBD_SetConfig+0x150>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d020      	beq.n	80078e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800789e:	4b42      	ldr	r3, [pc, #264]	@ (80079a8 <USBD_SetConfig+0x150>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078a8:	4b3f      	ldr	r3, [pc, #252]	@ (80079a8 <USBD_SetConfig+0x150>)
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fe ffb9 	bl	8006826 <USBD_SetClassConfig>
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d008      	beq.n	80078d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f962 	bl	8007b8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078ce:	e065      	b.n	800799c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 fa31 	bl	8007d38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2203      	movs	r2, #3
 80078da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078de:	e05d      	b.n	800799c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa29 	bl	8007d38 <USBD_CtlSendStatus>
      break;
 80078e6:	e059      	b.n	800799c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078e8:	4b2f      	ldr	r3, [pc, #188]	@ (80079a8 <USBD_SetConfig+0x150>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d112      	bne.n	8007916 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80078f8:	4b2b      	ldr	r3, [pc, #172]	@ (80079a8 <USBD_SetConfig+0x150>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007902:	4b29      	ldr	r3, [pc, #164]	@ (80079a8 <USBD_SetConfig+0x150>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7fe ffa8 	bl	800685e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fa12 	bl	8007d38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007914:	e042      	b.n	800799c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007916:	4b24      	ldr	r3, [pc, #144]	@ (80079a8 <USBD_SetConfig+0x150>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	429a      	cmp	r2, r3
 8007922:	d02a      	beq.n	800797a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7fe ff96 	bl	800685e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007932:	4b1d      	ldr	r3, [pc, #116]	@ (80079a8 <USBD_SetConfig+0x150>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800793c:	4b1a      	ldr	r3, [pc, #104]	@ (80079a8 <USBD_SetConfig+0x150>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	4619      	mov	r1, r3
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fe ff6f 	bl	8006826 <USBD_SetClassConfig>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00f      	beq.n	8007972 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f918 	bl	8007b8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	4619      	mov	r1, r3
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fe ff7b 	bl	800685e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007970:	e014      	b.n	800799c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f9e0 	bl	8007d38 <USBD_CtlSendStatus>
      break;
 8007978:	e010      	b.n	800799c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9dc 	bl	8007d38 <USBD_CtlSendStatus>
      break;
 8007980:	e00c      	b.n	800799c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f900 	bl	8007b8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800798a:	4b07      	ldr	r3, [pc, #28]	@ (80079a8 <USBD_SetConfig+0x150>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	4619      	mov	r1, r3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f7fe ff64 	bl	800685e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007996:	2303      	movs	r3, #3
 8007998:	73fb      	strb	r3, [r7, #15]
      break;
 800799a:	bf00      	nop
  }

  return ret;
 800799c:	7bfb      	ldrb	r3, [r7, #15]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000604 	.word	0x20000604

080079ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	88db      	ldrh	r3, [r3, #6]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d004      	beq.n	80079c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079be:	6839      	ldr	r1, [r7, #0]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 f8e2 	bl	8007b8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079c6:	e023      	b.n	8007a10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	dc02      	bgt.n	80079da <USBD_GetConfig+0x2e>
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dc03      	bgt.n	80079e0 <USBD_GetConfig+0x34>
 80079d8:	e015      	b.n	8007a06 <USBD_GetConfig+0x5a>
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d00b      	beq.n	80079f6 <USBD_GetConfig+0x4a>
 80079de:	e012      	b.n	8007a06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3308      	adds	r3, #8
 80079ea:	2201      	movs	r2, #1
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f948 	bl	8007c84 <USBD_CtlSendData>
        break;
 80079f4:	e00c      	b.n	8007a10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3304      	adds	r3, #4
 80079fa:	2201      	movs	r2, #1
 80079fc:	4619      	mov	r1, r3
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f940 	bl	8007c84 <USBD_CtlSendData>
        break;
 8007a04:	e004      	b.n	8007a10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f8be 	bl	8007b8a <USBD_CtlError>
        break;
 8007a0e:	bf00      	nop
}
 8007a10:	bf00      	nop
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d81e      	bhi.n	8007a6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	88db      	ldrh	r3, [r3, #6]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d004      	beq.n	8007a42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f8a5 	bl	8007b8a <USBD_CtlError>
        break;
 8007a40:	e01a      	b.n	8007a78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f043 0202 	orr.w	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	330c      	adds	r3, #12
 8007a62:	2202      	movs	r2, #2
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f90c 	bl	8007c84 <USBD_CtlSendData>
      break;
 8007a6c:	e004      	b.n	8007a78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a6e:	6839      	ldr	r1, [r7, #0]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 f88a 	bl	8007b8a <USBD_CtlError>
      break;
 8007a76:	bf00      	nop
  }
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	885b      	ldrh	r3, [r3, #2]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d107      	bne.n	8007aa2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f94c 	bl	8007d38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007aa0:	e013      	b.n	8007aca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d10b      	bne.n	8007ac2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	889b      	ldrh	r3, [r3, #4]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f93c 	bl	8007d38 <USBD_CtlSendStatus>
}
 8007ac0:	e003      	b.n	8007aca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ac2:	6839      	ldr	r1, [r7, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f860 	bl	8007b8a <USBD_CtlError>
}
 8007aca:	bf00      	nop
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d80b      	bhi.n	8007b02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	885b      	ldrh	r3, [r3, #2]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d10c      	bne.n	8007b0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f91c 	bl	8007d38 <USBD_CtlSendStatus>
      }
      break;
 8007b00:	e004      	b.n	8007b0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f840 	bl	8007b8a <USBD_CtlError>
      break;
 8007b0a:	e000      	b.n	8007b0e <USBD_ClrFeature+0x3c>
      break;
 8007b0c:	bf00      	nop
  }
}
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	781a      	ldrb	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	781a      	ldrb	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fa16 	bl	8006f72 <SWAPBYTE>
 8007b46:	4603      	mov	r3, r0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3301      	adds	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff fa09 	bl	8006f72 <SWAPBYTE>
 8007b60:	4603      	mov	r3, r0
 8007b62:	461a      	mov	r2, r3
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3301      	adds	r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff f9fc 	bl	8006f72 <SWAPBYTE>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	80da      	strh	r2, [r3, #6]
}
 8007b82:	bf00      	nop
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b082      	sub	sp, #8
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b94:	2180      	movs	r1, #128	@ 0x80
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fcac 	bl	80084f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fca8 	bl	80084f4 <USBD_LL_StallEP>
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d042      	beq.n	8007c48 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007bc6:	6938      	ldr	r0, [r7, #16]
 8007bc8:	f000 f842 	bl	8007c50 <USBD_GetLen>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	3301      	adds	r3, #1
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd6:	d808      	bhi.n	8007bea <USBD_GetString+0x3e>
 8007bd8:	6938      	ldr	r0, [r7, #16]
 8007bda:	f000 f839 	bl	8007c50 <USBD_GetLen>
 8007bde:	4603      	mov	r3, r0
 8007be0:	3301      	adds	r3, #1
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	e001      	b.n	8007bee <USBD_GetString+0x42>
 8007bea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7812      	ldrb	r2, [r2, #0]
 8007bfc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	3301      	adds	r3, #1
 8007c02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	4413      	add	r3, r2
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c0e:	7dfb      	ldrb	r3, [r7, #23]
 8007c10:	3301      	adds	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c14:	e013      	b.n	8007c3e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	3301      	adds	r3, #1
 8007c26:	613b      	str	r3, [r7, #16]
    idx++;
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	4413      	add	r3, r2
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e7      	bne.n	8007c16 <USBD_GetString+0x6a>
 8007c46:	e000      	b.n	8007c4a <USBD_GetString+0x9e>
    return;
 8007c48:	bf00      	nop
  }
}
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c60:	e005      	b.n	8007c6e <USBD_GetLen+0x1e>
  {
    len++;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	3301      	adds	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1f5      	bne.n	8007c62 <USBD_GetLen+0x12>
  }

  return len;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f000 fcab 	bl	8008606 <USBD_LL_Transmit>

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	2100      	movs	r1, #0
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fc9a 	bl	8008606 <USBD_LL_Transmit>

  return USBD_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2203      	movs	r2, #3
 8007cec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	2100      	movs	r1, #0
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fc9e 	bl	8008648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	60f8      	str	r0, [r7, #12]
 8007d1e:	60b9      	str	r1, [r7, #8]
 8007d20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	2100      	movs	r1, #0
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f000 fc8d 	bl	8008648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2204      	movs	r2, #4
 8007d44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d48:	2300      	movs	r3, #0
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fc59 	bl	8008606 <USBD_LL_Transmit>

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3708      	adds	r7, #8
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2205      	movs	r2, #5
 8007d6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2200      	movs	r2, #0
 8007d72:	2100      	movs	r1, #0
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fc67 	bl	8008648 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	4912      	ldr	r1, [pc, #72]	@ (8007dd4 <MX_USB_DEVICE_Init+0x50>)
 8007d8c:	4812      	ldr	r0, [pc, #72]	@ (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007d8e:	f7fe fccd 	bl	800672c <USBD_Init>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d98:	f7f8 fb32 	bl	8000400 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007d9c:	490f      	ldr	r1, [pc, #60]	@ (8007ddc <MX_USB_DEVICE_Init+0x58>)
 8007d9e:	480e      	ldr	r0, [pc, #56]	@ (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007da0:	f7fe fcf4 	bl	800678c <USBD_RegisterClass>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007daa:	f7f8 fb29 	bl	8000400 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007dae:	490c      	ldr	r1, [pc, #48]	@ (8007de0 <MX_USB_DEVICE_Init+0x5c>)
 8007db0:	4809      	ldr	r0, [pc, #36]	@ (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007db2:	f7fe fbeb 	bl	800658c <USBD_CDC_RegisterInterface>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007dbc:	f7f8 fb20 	bl	8000400 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007dc0:	4805      	ldr	r0, [pc, #20]	@ (8007dd8 <MX_USB_DEVICE_Init+0x54>)
 8007dc2:	f7fe fd19 	bl	80067f8 <USBD_Start>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007dcc:	f7f8 fb18 	bl	8000400 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007dd0:	bf00      	nop
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	200000ac 	.word	0x200000ac
 8007dd8:	20000608 	.word	0x20000608
 8007ddc:	20000018 	.word	0x20000018
 8007de0:	20000098 	.word	0x20000098

08007de4 <CDC_Init_HS>:

/**
 * @brief  Initializes the CDC media low layer over the USB HS IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_HS(void) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007de8:	2200      	movs	r2, #0
 8007dea:	4905      	ldr	r1, [pc, #20]	@ (8007e00 <CDC_Init_HS+0x1c>)
 8007dec:	4805      	ldr	r0, [pc, #20]	@ (8007e04 <CDC_Init_HS+0x20>)
 8007dee:	f7fe fbe7 	bl	80065c0 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007df2:	4905      	ldr	r1, [pc, #20]	@ (8007e08 <CDC_Init_HS+0x24>)
 8007df4:	4803      	ldr	r0, [pc, #12]	@ (8007e04 <CDC_Init_HS+0x20>)
 8007df6:	f7fe fc05 	bl	8006604 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007dfa:	2300      	movs	r3, #0
	/* USER CODE END 8 */
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	200010e4 	.word	0x200010e4
 8007e04:	20000608 	.word	0x20000608
 8007e08:	200008e4 	.word	0x200008e4

08007e0c <CDC_DeInit_HS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @param  None
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_HS(void) {
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 9 */
	return (USBD_OK);
 8007e10:	2300      	movs	r3, #0
	/* USER CODE END 9 */
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <CDC_Control_HS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	6039      	str	r1, [r7, #0]
 8007e26:	71fb      	strb	r3, [r7, #7]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 10 */
	switch (cmd) {
 8007e2c:	79fb      	ldrb	r3, [r7, #7]
 8007e2e:	2b23      	cmp	r3, #35	@ 0x23
 8007e30:	d84a      	bhi.n	8007ec8 <CDC_Control_HS+0xac>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <CDC_Control_HS+0x1c>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007ec9 	.word	0x08007ec9
 8007e3c:	08007ec9 	.word	0x08007ec9
 8007e40:	08007ec9 	.word	0x08007ec9
 8007e44:	08007ec9 	.word	0x08007ec9
 8007e48:	08007ec9 	.word	0x08007ec9
 8007e4c:	08007ec9 	.word	0x08007ec9
 8007e50:	08007ec9 	.word	0x08007ec9
 8007e54:	08007ec9 	.word	0x08007ec9
 8007e58:	08007ec9 	.word	0x08007ec9
 8007e5c:	08007ec9 	.word	0x08007ec9
 8007e60:	08007ec9 	.word	0x08007ec9
 8007e64:	08007ec9 	.word	0x08007ec9
 8007e68:	08007ec9 	.word	0x08007ec9
 8007e6c:	08007ec9 	.word	0x08007ec9
 8007e70:	08007ec9 	.word	0x08007ec9
 8007e74:	08007ec9 	.word	0x08007ec9
 8007e78:	08007ec9 	.word	0x08007ec9
 8007e7c:	08007ec9 	.word	0x08007ec9
 8007e80:	08007ec9 	.word	0x08007ec9
 8007e84:	08007ec9 	.word	0x08007ec9
 8007e88:	08007ec9 	.word	0x08007ec9
 8007e8c:	08007ec9 	.word	0x08007ec9
 8007e90:	08007ec9 	.word	0x08007ec9
 8007e94:	08007ec9 	.word	0x08007ec9
 8007e98:	08007ec9 	.word	0x08007ec9
 8007e9c:	08007ec9 	.word	0x08007ec9
 8007ea0:	08007ec9 	.word	0x08007ec9
 8007ea4:	08007ec9 	.word	0x08007ec9
 8007ea8:	08007ec9 	.word	0x08007ec9
 8007eac:	08007ec9 	.word	0x08007ec9
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ec9 	.word	0x08007ec9
 8007eb8:	08007ec9 	.word	0x08007ec9
 8007ebc:	08007ec9 	.word	0x08007ec9
 8007ec0:	08007ec9 	.word	0x08007ec9
 8007ec4:	08007ec9 	.word	0x08007ec9
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007ec8:	bf00      	nop
	}

	return (USBD_OK);
 8007eca:	2300      	movs	r3, #0
	/* USER CODE END 10 */
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <CDC_Receive_HS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
 */
static int8_t CDC_Receive_HS(uint8_t *Buf, uint32_t *Len) {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 11 */
	// we send back what we recieved
	Buf[*Len] = '\0';
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	4413      	add	r3, r2
 8007eea:	2200      	movs	r2, #0
 8007eec:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_HS(Buf, *Len);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f80e 	bl	8007f18 <CDC_Transmit_HS>
// prepare for the next recieve
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4805      	ldr	r0, [pc, #20]	@ (8007f14 <CDC_Receive_HS+0x3c>)
 8007f00:	f7fe fb80 	bl	8006604 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007f04:	4803      	ldr	r0, [pc, #12]	@ (8007f14 <CDC_Receive_HS+0x3c>)
 8007f06:	f7fe fbdb 	bl	80066c0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8007f0a:	2300      	movs	r3, #0
	/* USER CODE END 11 */
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000608 	.word	0x20000608

08007f18 <CDC_Transmit_HS>:
 *         through this function.
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_HS(uint8_t *Buf, uint16_t Len) {
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc =
 8007f28:	4b0f      	ldr	r3, [pc, #60]	@ (8007f68 <CDC_Transmit_HS+0x50>)
 8007f2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f2e:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceHS.pClassData;

	if (hcdc == NULL)
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <CDC_Transmit_HS+0x22>
		return USBD_FAIL;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e012      	b.n	8007f60 <CDC_Transmit_HS+0x48>

	if (hcdc->TxState != 0) {
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <CDC_Transmit_HS+0x30>
		return USBD_BUSY;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e00b      	b.n	8007f60 <CDC_Transmit_HS+0x48>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8007f48:	887b      	ldrh	r3, [r7, #2]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6879      	ldr	r1, [r7, #4]
 8007f4e:	4806      	ldr	r0, [pc, #24]	@ (8007f68 <CDC_Transmit_HS+0x50>)
 8007f50:	f7fe fb36 	bl	80065c0 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8007f54:	4804      	ldr	r0, [pc, #16]	@ (8007f68 <CDC_Transmit_HS+0x50>)
 8007f56:	f7fe fb73 	bl	8006640 <USBD_CDC_TransmitPacket>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 12 */
	return result;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	20000608 	.word	0x20000608

08007f6c <CDC_TransmitCplt_HS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 14 */
	return result;
 8007f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
	...

08007f90 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2212      	movs	r2, #18
 8007fa0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007fa2:	4b03      	ldr	r3, [pc, #12]	@ (8007fb0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	200000cc 	.word	0x200000cc

08007fb4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	4603      	mov	r3, r0
 8007fbc:	6039      	str	r1, [r7, #0]
 8007fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	2204      	movs	r2, #4
 8007fc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fc6:	4b03      	ldr	r3, [pc, #12]	@ (8007fd4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	200000e0 	.word	0x200000e0

08007fd8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	6039      	str	r1, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d105      	bne.n	8007ff6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4907      	ldr	r1, [pc, #28]	@ (800800c <USBD_HS_ProductStrDescriptor+0x34>)
 8007fee:	4808      	ldr	r0, [pc, #32]	@ (8008010 <USBD_HS_ProductStrDescriptor+0x38>)
 8007ff0:	f7ff fddc 	bl	8007bac <USBD_GetString>
 8007ff4:	e004      	b.n	8008000 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	4904      	ldr	r1, [pc, #16]	@ (800800c <USBD_HS_ProductStrDescriptor+0x34>)
 8007ffa:	4805      	ldr	r0, [pc, #20]	@ (8008010 <USBD_HS_ProductStrDescriptor+0x38>)
 8007ffc:	f7ff fdd6 	bl	8007bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008000:	4b02      	ldr	r3, [pc, #8]	@ (800800c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	200018e4 	.word	0x200018e4
 8008010:	080087bc 	.word	0x080087bc

08008014 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	6039      	str	r1, [r7, #0]
 800801e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	4904      	ldr	r1, [pc, #16]	@ (8008034 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008024:	4804      	ldr	r0, [pc, #16]	@ (8008038 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8008026:	f7ff fdc1 	bl	8007bac <USBD_GetString>
  return USBD_StrDesc;
 800802a:	4b02      	ldr	r3, [pc, #8]	@ (8008034 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	200018e4 	.word	0x200018e4
 8008038:	080087d4 	.word	0x080087d4

0800803c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	6039      	str	r1, [r7, #0]
 8008046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	221a      	movs	r2, #26
 800804c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800804e:	f000 f843 	bl	80080d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008052:	4b02      	ldr	r3, [pc, #8]	@ (800805c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	200000e4 	.word	0x200000e4

08008060 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	6039      	str	r1, [r7, #0]
 800806a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800806c:	79fb      	ldrb	r3, [r7, #7]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	4907      	ldr	r1, [pc, #28]	@ (8008094 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008076:	4808      	ldr	r0, [pc, #32]	@ (8008098 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008078:	f7ff fd98 	bl	8007bac <USBD_GetString>
 800807c:	e004      	b.n	8008088 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800807e:	683a      	ldr	r2, [r7, #0]
 8008080:	4904      	ldr	r1, [pc, #16]	@ (8008094 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008082:	4805      	ldr	r0, [pc, #20]	@ (8008098 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008084:	f7ff fd92 	bl	8007bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008088:	4b02      	ldr	r3, [pc, #8]	@ (8008094 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	200018e4 	.word	0x200018e4
 8008098:	080087e8 	.word	0x080087e8

0800809c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	6039      	str	r1, [r7, #0]
 80080a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080a8:	79fb      	ldrb	r3, [r7, #7]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d105      	bne.n	80080ba <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	4907      	ldr	r1, [pc, #28]	@ (80080d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80080b2:	4808      	ldr	r0, [pc, #32]	@ (80080d4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80080b4:	f7ff fd7a 	bl	8007bac <USBD_GetString>
 80080b8:	e004      	b.n	80080c4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	4904      	ldr	r1, [pc, #16]	@ (80080d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80080be:	4805      	ldr	r0, [pc, #20]	@ (80080d4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80080c0:	f7ff fd74 	bl	8007bac <USBD_GetString>
  }
  return USBD_StrDesc;
 80080c4:	4b02      	ldr	r3, [pc, #8]	@ (80080d0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200018e4 	.word	0x200018e4
 80080d4:	080087f4 	.word	0x080087f4

080080d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080de:	4b0f      	ldr	r3, [pc, #60]	@ (800811c <Get_SerialNum+0x44>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008120 <Get_SerialNum+0x48>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80080ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008124 <Get_SerialNum+0x4c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80080fe:	2208      	movs	r2, #8
 8008100:	4909      	ldr	r1, [pc, #36]	@ (8008128 <Get_SerialNum+0x50>)
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 f814 	bl	8008130 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008108:	2204      	movs	r2, #4
 800810a:	4908      	ldr	r1, [pc, #32]	@ (800812c <Get_SerialNum+0x54>)
 800810c:	68b8      	ldr	r0, [r7, #8]
 800810e:	f000 f80f 	bl	8008130 <IntToUnicode>
  }
}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	0bfa0700 	.word	0x0bfa0700
 8008120:	0bfa0704 	.word	0x0bfa0704
 8008124:	0bfa0708 	.word	0x0bfa0708
 8008128:	200000e6 	.word	0x200000e6
 800812c:	200000f6 	.word	0x200000f6

08008130 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008142:	2300      	movs	r3, #0
 8008144:	75fb      	strb	r3, [r7, #23]
 8008146:	e027      	b.n	8008198 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	0f1b      	lsrs	r3, r3, #28
 800814c:	2b09      	cmp	r3, #9
 800814e:	d80b      	bhi.n	8008168 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	0f1b      	lsrs	r3, r3, #28
 8008154:	b2da      	uxtb	r2, r3
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	4619      	mov	r1, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	440b      	add	r3, r1
 8008160:	3230      	adds	r2, #48	@ 0x30
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]
 8008166:	e00a      	b.n	800817e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	0f1b      	lsrs	r3, r3, #28
 800816c:	b2da      	uxtb	r2, r3
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4619      	mov	r1, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	440b      	add	r3, r1
 8008178:	3237      	adds	r2, #55	@ 0x37
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	3301      	adds	r3, #1
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	2200      	movs	r2, #0
 8008190:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	3301      	adds	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
 8008198:	7dfa      	ldrb	r2, [r7, #23]
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	429a      	cmp	r2, r3
 800819e:	d3d3      	bcc.n	8008148 <IntToUnicode+0x18>
  }
}
 80081a0:	bf00      	nop
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr

080081ae <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081c2:	4619      	mov	r1, r3
 80081c4:	4610      	mov	r0, r2
 80081c6:	f7fe fb64 	bl	8006892 <USBD_LL_SetupStage>
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b082      	sub	sp, #8
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081e4:	78fa      	ldrb	r2, [r7, #3]
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4613      	mov	r3, r2
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	440b      	add	r3, r1
 80081f2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	4619      	mov	r1, r3
 80081fc:	f7fe fb9e 	bl	800693c <USBD_LL_DataOutStage>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	4613      	mov	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	3320      	adds	r3, #32
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	4619      	mov	r1, r3
 8008230:	f7fe fc37 	bl	8006aa2 <USBD_LL_DataInStage>
}
 8008234:	bf00      	nop
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fd71 	bl	8006d32 <USBD_LL_SOF>
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008260:	2301      	movs	r3, #1
 8008262:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	79db      	ldrb	r3, [r3, #7]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800826c:	2300      	movs	r3, #0
 800826e:	73fb      	strb	r3, [r7, #15]
 8008270:	e008      	b.n	8008284 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	79db      	ldrb	r3, [r3, #7]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d102      	bne.n	8008280 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800827a:	2301      	movs	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	e001      	b.n	8008284 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008280:	f7f8 f8be 	bl	8000400 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800828a:	7bfa      	ldrb	r2, [r7, #15]
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f7fe fd0b 	bl	8006caa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fcb3 	bl	8006c06 <USBD_LL_Reset>
}
 80082a0:	bf00      	nop
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fe fd07 	bl	8006cca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	6812      	ldr	r2, [r2, #0]
 80082ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7adb      	ldrb	r3, [r3, #11]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082dc:	4b04      	ldr	r3, [pc, #16]	@ (80082f0 <HAL_PCD_SuspendCallback+0x48>)
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	4a03      	ldr	r2, [pc, #12]	@ (80082f0 <HAL_PCD_SuspendCallback+0x48>)
 80082e2:	f043 0306 	orr.w	r3, r3, #6
 80082e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	e000ed00 	.word	0xe000ed00

080082f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008302:	4618      	mov	r0, r3
 8008304:	f7fe fcfd 	bl	8006d02 <USBD_LL_Resume>
}
 8008308:	bf00      	nop
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	4611      	mov	r1, r2
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fd55 	bl	8006dd6 <USBD_LL_IsoOUTIncomplete>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008346:	78fa      	ldrb	r2, [r7, #3]
 8008348:	4611      	mov	r1, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fd11 	bl	8006d72 <USBD_LL_IsoINIncomplete>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fd67 	bl	8006e3a <USBD_LL_DevConnected>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008382:	4618      	mov	r0, r3
 8008384:	f7fe fd64 	bl	8006e50 <USBD_LL_DevDisconnected>
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d140      	bne.n	8008422 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80083a0:	4a22      	ldr	r2, [pc, #136]	@ (800842c <USBD_LL_Init+0x9c>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a20      	ldr	r2, [pc, #128]	@ (800842c <USBD_LL_Init+0x9c>)
 80083ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80083b0:	4b1e      	ldr	r3, [pc, #120]	@ (800842c <USBD_LL_Init+0x9c>)
 80083b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008430 <USBD_LL_Init+0xa0>)
 80083b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80083b6:	4b1d      	ldr	r3, [pc, #116]	@ (800842c <USBD_LL_Init+0x9c>)
 80083b8:	2209      	movs	r2, #9
 80083ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80083bc:	4b1b      	ldr	r3, [pc, #108]	@ (800842c <USBD_LL_Init+0x9c>)
 80083be:	2202      	movs	r2, #2
 80083c0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80083c2:	4b1a      	ldr	r3, [pc, #104]	@ (800842c <USBD_LL_Init+0x9c>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80083c8:	4b18      	ldr	r3, [pc, #96]	@ (800842c <USBD_LL_Init+0x9c>)
 80083ca:	2203      	movs	r2, #3
 80083cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80083ce:	4b17      	ldr	r3, [pc, #92]	@ (800842c <USBD_LL_Init+0x9c>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80083d4:	4b15      	ldr	r3, [pc, #84]	@ (800842c <USBD_LL_Init+0x9c>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80083da:	4b14      	ldr	r3, [pc, #80]	@ (800842c <USBD_LL_Init+0x9c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80083e0:	4b12      	ldr	r3, [pc, #72]	@ (800842c <USBD_LL_Init+0x9c>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80083e6:	4b11      	ldr	r3, [pc, #68]	@ (800842c <USBD_LL_Init+0x9c>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80083ec:	4b0f      	ldr	r3, [pc, #60]	@ (800842c <USBD_LL_Init+0x9c>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80083f2:	480e      	ldr	r0, [pc, #56]	@ (800842c <USBD_LL_Init+0x9c>)
 80083f4:	f7f8 fc24 	bl	8000c40 <HAL_PCD_Init>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d001      	beq.n	8008402 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80083fe:	f7f7 ffff 	bl	8000400 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008402:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008406:	4809      	ldr	r0, [pc, #36]	@ (800842c <USBD_LL_Init+0x9c>)
 8008408:	f7f9 fe67 	bl	80020da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800840c:	2280      	movs	r2, #128	@ 0x80
 800840e:	2100      	movs	r1, #0
 8008410:	4806      	ldr	r0, [pc, #24]	@ (800842c <USBD_LL_Init+0x9c>)
 8008412:	f7f9 fe1b 	bl	800204c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008416:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800841a:	2101      	movs	r1, #1
 800841c:	4803      	ldr	r0, [pc, #12]	@ (800842c <USBD_LL_Init+0x9c>)
 800841e:	f7f9 fe15 	bl	800204c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	2000011c 	.word	0x2000011c
 8008430:	42040000 	.word	0x42040000

08008434 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800844a:	4618      	mov	r0, r3
 800844c:	f7f8 fd04 	bl	8000e58 <HAL_PCD_Start>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f942 	bl	80086e0 <USBD_Get_USB_Status>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008460:	7bbb      	ldrb	r3, [r7, #14]
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b084      	sub	sp, #16
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	4608      	mov	r0, r1
 8008474:	4611      	mov	r1, r2
 8008476:	461a      	mov	r2, r3
 8008478:	4603      	mov	r3, r0
 800847a:	70fb      	strb	r3, [r7, #3]
 800847c:	460b      	mov	r3, r1
 800847e:	70bb      	strb	r3, [r7, #2]
 8008480:	4613      	mov	r3, r2
 8008482:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008492:	78bb      	ldrb	r3, [r7, #2]
 8008494:	883a      	ldrh	r2, [r7, #0]
 8008496:	78f9      	ldrb	r1, [r7, #3]
 8008498:	f7f9 f9f2 	bl	8001880 <HAL_PCD_EP_Open>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f91c 	bl	80086e0 <USBD_Get_USB_Status>
 80084a8:	4603      	mov	r3, r0
 80084aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c2:	2300      	movs	r3, #0
 80084c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	4611      	mov	r1, r2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7f9 fa3d 	bl	8001954 <HAL_PCD_EP_Close>
 80084da:	4603      	mov	r3, r0
 80084dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 f8fd 	bl	80086e0 <USBD_Get_USB_Status>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	4611      	mov	r1, r2
 8008512:	4618      	mov	r0, r3
 8008514:	f7f9 faf5 	bl	8001b02 <HAL_PCD_EP_SetStall>
 8008518:	4603      	mov	r3, r0
 800851a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 f8de 	bl	80086e0 <USBD_Get_USB_Status>
 8008524:	4603      	mov	r3, r0
 8008526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008528:	7bbb      	ldrb	r3, [r7, #14]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b084      	sub	sp, #16
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	4611      	mov	r1, r2
 8008550:	4618      	mov	r0, r3
 8008552:	f7f9 fb39 	bl	8001bc8 <HAL_PCD_EP_ClrStall>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	4618      	mov	r0, r3
 800855e:	f000 f8bf 	bl	80086e0 <USBD_Get_USB_Status>
 8008562:	4603      	mov	r3, r0
 8008564:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008566:	7bbb      	ldrb	r3, [r7, #14]
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008582:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008584:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008588:	2b00      	cmp	r3, #0
 800858a:	da0b      	bge.n	80085a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008592:	68f9      	ldr	r1, [r7, #12]
 8008594:	4613      	mov	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	3316      	adds	r3, #22
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	e00b      	b.n	80085bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	4613      	mov	r3, r2
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80085ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	4611      	mov	r1, r2
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7f9 f926 	bl	8001838 <HAL_PCD_SetAddress>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f874 	bl	80086e0 <USBD_Get_USB_Status>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
 8008612:	460b      	mov	r3, r1
 8008614:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008616:	2300      	movs	r3, #0
 8008618:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861a:	2300      	movs	r3, #0
 800861c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008624:	7af9      	ldrb	r1, [r7, #11]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	f7f9 fa30 	bl	8001a8e <HAL_PCD_EP_Transmit>
 800862e:	4603      	mov	r3, r0
 8008630:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008632:	7dfb      	ldrb	r3, [r7, #23]
 8008634:	4618      	mov	r0, r3
 8008636:	f000 f853 	bl	80086e0 <USBD_Get_USB_Status>
 800863a:	4603      	mov	r3, r0
 800863c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800863e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	460b      	mov	r3, r1
 8008656:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800865c:	2300      	movs	r3, #0
 800865e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008666:	7af9      	ldrb	r1, [r7, #11]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	f7f9 f9bc 	bl	80019e8 <HAL_PCD_EP_Receive>
 8008670:	4603      	mov	r3, r0
 8008672:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	4618      	mov	r0, r3
 8008678:	f000 f832 	bl	80086e0 <USBD_Get_USB_Status>
 800867c:	4603      	mov	r3, r0
 800867e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008680:	7dbb      	ldrb	r3, [r7, #22]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3718      	adds	r7, #24
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	4611      	mov	r1, r2
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7f9 f9dc 	bl	8001a5e <HAL_PCD_EP_GetRxCount>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086b8:	4b03      	ldr	r3, [pc, #12]	@ (80086c8 <USBD_static_malloc+0x18>)
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	20001ae4 	.word	0x20001ae4

080086cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	4603      	mov	r3, r0
 80086e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d817      	bhi.n	8008724 <USBD_Get_USB_Status+0x44>
 80086f4:	a201      	add	r2, pc, #4	@ (adr r2, 80086fc <USBD_Get_USB_Status+0x1c>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	0800870d 	.word	0x0800870d
 8008700:	08008713 	.word	0x08008713
 8008704:	08008719 	.word	0x08008719
 8008708:	0800871f 	.word	0x0800871f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
    break;
 8008710:	e00b      	b.n	800872a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008712:	2303      	movs	r3, #3
 8008714:	73fb      	strb	r3, [r7, #15]
    break;
 8008716:	e008      	b.n	800872a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008718:	2301      	movs	r3, #1
 800871a:	73fb      	strb	r3, [r7, #15]
    break;
 800871c:	e005      	b.n	800872a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800871e:	2303      	movs	r3, #3
 8008720:	73fb      	strb	r3, [r7, #15]
    break;
 8008722:	e002      	b.n	800872a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	73fb      	strb	r3, [r7, #15]
    break;
 8008728:	bf00      	nop
  }
  return usb_status;
 800872a:	7bfb      	ldrb	r3, [r7, #15]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <memset>:
 8008738:	4402      	add	r2, r0
 800873a:	4603      	mov	r3, r0
 800873c:	4293      	cmp	r3, r2
 800873e:	d100      	bne.n	8008742 <memset+0xa>
 8008740:	4770      	bx	lr
 8008742:	f803 1b01 	strb.w	r1, [r3], #1
 8008746:	e7f9      	b.n	800873c <memset+0x4>

08008748 <__libc_init_array>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	4d0d      	ldr	r5, [pc, #52]	@ (8008780 <__libc_init_array+0x38>)
 800874c:	2600      	movs	r6, #0
 800874e:	4c0d      	ldr	r4, [pc, #52]	@ (8008784 <__libc_init_array+0x3c>)
 8008750:	1b64      	subs	r4, r4, r5
 8008752:	10a4      	asrs	r4, r4, #2
 8008754:	42a6      	cmp	r6, r4
 8008756:	d109      	bne.n	800876c <__libc_init_array+0x24>
 8008758:	4d0b      	ldr	r5, [pc, #44]	@ (8008788 <__libc_init_array+0x40>)
 800875a:	2600      	movs	r6, #0
 800875c:	4c0b      	ldr	r4, [pc, #44]	@ (800878c <__libc_init_array+0x44>)
 800875e:	f000 f817 	bl	8008790 <_init>
 8008762:	1b64      	subs	r4, r4, r5
 8008764:	10a4      	asrs	r4, r4, #2
 8008766:	42a6      	cmp	r6, r4
 8008768:	d105      	bne.n	8008776 <__libc_init_array+0x2e>
 800876a:	bd70      	pop	{r4, r5, r6, pc}
 800876c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008770:	3601      	adds	r6, #1
 8008772:	4798      	blx	r3
 8008774:	e7ee      	b.n	8008754 <__libc_init_array+0xc>
 8008776:	f855 3b04 	ldr.w	r3, [r5], #4
 800877a:	3601      	adds	r6, #1
 800877c:	4798      	blx	r3
 800877e:	e7f2      	b.n	8008766 <__libc_init_array+0x1e>
 8008780:	08008854 	.word	0x08008854
 8008784:	08008854 	.word	0x08008854
 8008788:	08008854 	.word	0x08008854
 800878c:	08008858 	.word	0x08008858

08008790 <_init>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	bf00      	nop
 8008794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008796:	bc08      	pop	{r3}
 8008798:	469e      	mov	lr, r3
 800879a:	4770      	bx	lr

0800879c <_fini>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr
