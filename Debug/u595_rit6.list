
u595_rit6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008570  08000250  08000250  00001250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080087c0  080087c0  000097c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800886c  0800886c  0000986c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08008870  08008870  00009870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000000fe  20000000  08008874  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d04  20000100  08008972  0000a100  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20001e04  08008972  0000ae04  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0000a0fe  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013146  00000000  00000000  0000a134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003177  00000000  00000000  0001d27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001058  00000000  00000000  000203f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000c2c  00000000  00000000  00021450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000353cd  00000000  00000000  0002207c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000149b9  00000000  00000000  00057449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013fb57  00000000  00000000  0006be02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001ab959  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004210  00000000  00000000  001ab99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001afbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000100 	.word	0x20000100
 800026c:	00000000 	.word	0x00000000
 8000270:	080087a8 	.word	0x080087a8

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000104 	.word	0x20000104
 800028c:	080087a8 	.word	0x080087a8

08000290 <Fill_Buffer>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ICACHE_Init(void);
static void MX_USB_OTG_HS_PCD_Init(void);
/* USER CODE BEGIN PFP */
void Fill_Buffer(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    memset(buffer, FILL_VALUE, PACKET_SIZE);
 8000294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000298:	2155      	movs	r1, #85	@ 0x55
 800029a:	4802      	ldr	r0, [pc, #8]	@ (80002a4 <Fill_Buffer+0x14>)
 800029c:	f008 fa58 	bl	8008750 <memset>
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000600 	.word	0x20000600

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b5b0      	push	{r4, r5, r7, lr}
 80002aa:	b086      	sub	sp, #24
 80002ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	Fill_Buffer();
 80002ae:	f7ff ffef 	bl	8000290 <Fill_Buffer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b2:	f000 f9fb 	bl	80006ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b6:	f000 f819 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ba:	f000 f883 	bl	80003c4 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80002be:	f000 f86d 	bl	800039c <MX_ICACHE_Init>
  //MX_USB_OTG_HS_PCD_Init();
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80002c2:	f007 fd6b 	bl	8007d9c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t msg[] = "Hello, USB CDC!\r\n";
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <main+0x3c>)
 80002c8:	1d3c      	adds	r4, r7, #4
 80002ca:	461d      	mov	r5, r3
 80002cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002d0:	682b      	ldr	r3, [r5, #0]
 80002d2:	8023      	strh	r3, [r4, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //CDC_Transmit_HS(msg, sizeof(msg) - 1);
	  CDC_Transmit_HS(buffer, PACKET_SIZE);
 80002d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <main+0x40>)
 80002da:	f007 fe29 	bl	8007f30 <CDC_Transmit_HS>
  {
 80002de:	bf00      	nop
 80002e0:	e7f8      	b.n	80002d4 <main+0x2c>
 80002e2:	bf00      	nop
 80002e4:	080087c0 	.word	0x080087c0
 80002e8:	20000600 	.word	0x20000600

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b09e      	sub	sp, #120	@ 0x78
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	2260      	movs	r2, #96	@ 0x60
 80002f8:	2100      	movs	r1, #0
 80002fa:	4618      	mov	r0, r3
 80002fc:	f008 fa28 	bl	8008750 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000300:	463b      	mov	r3, r7
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	609a      	str	r2, [r3, #8]
 800030a:	60da      	str	r2, [r3, #12]
 800030c:	611a      	str	r2, [r3, #16]
 800030e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000310:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000314:	f001 ff2e 	bl	8002174 <HAL_PWREx_ControlVoltageScaling>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800031e:	f000 f87b 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000322:	2301      	movs	r3, #1
 8000324:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000326:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	2303      	movs	r3, #3
 8000332:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000338:	2301      	movs	r3, #1
 800033a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 20;
 800033c:	2314      	movs	r3, #20
 800033e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 10;
 8000340:	230a      	movs	r3, #10
 8000342:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000344:	2302      	movs	r3, #2
 8000346:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000348:	2302      	movs	r3, #2
 800034a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800034c:	230c      	movs	r3, #12
 800034e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000350:	2300      	movs	r3, #0
 8000352:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	f107 0318 	add.w	r3, r7, #24
 8000358:	4618      	mov	r0, r3
 800035a:	f001 ffc5 	bl	80022e8 <HAL_RCC_OscConfig>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000364:	f000 f858 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000368:	231f      	movs	r3, #31
 800036a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800036c:	2303      	movs	r3, #3
 800036e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	2104      	movs	r1, #4
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fe8b 	bl	80030a0 <HAL_RCC_ClockConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000390:	f000 f842 	bl	8000418 <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3778      	adds	r7, #120	@ 0x78
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003a0:	2000      	movs	r0, #0
 80003a2:	f000 fc29 	bl	8000bf8 <HAL_ICACHE_ConfigAssociativityMode>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003ac:	f000 f834 	bl	8000418 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003b0:	f000 fc42 	bl	8000c38 <HAL_ICACHE_Enable>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003ba:	f000 f82d 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <MX_GPIO_Init+0x50>)
 80003cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003d0:	4a10      	ldr	r2, [pc, #64]	@ (8000414 <MX_GPIO_Init+0x50>)
 80003d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003da:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <MX_GPIO_Init+0x50>)
 80003dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <MX_GPIO_Init+0x50>)
 80003ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003ee:	4a09      	ldr	r2, [pc, #36]	@ (8000414 <MX_GPIO_Init+0x50>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80003f8:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_GPIO_Init+0x50>)
 80003fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	46020c00 	.word	0x46020c00

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <Error_Handler+0x8>

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <HAL_MspInit+0x30>)
 800042c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000430:	4a08      	ldr	r2, [pc, #32]	@ (8000454 <HAL_MspInit+0x30>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <HAL_MspInit+0x30>)
 800043c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddUSB();
 8000448:	f001 ff20 	bl	800228c <HAL_PWREx_EnableVddUSB>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	46020c00 	.word	0x46020c00

08000458 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b0bc      	sub	sp, #240	@ 0xf0
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	f107 0318 	add.w	r3, r7, #24
 8000464:	22d8      	movs	r2, #216	@ 0xd8
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f008 f971 	bl	8008750 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a3e      	ldr	r2, [pc, #248]	@ (800056c <HAL_PCD_MspInit+0x114>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d175      	bne.n	8000564 <HAL_PCD_MspInit+0x10c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000478:	4b3d      	ldr	r3, [pc, #244]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 800047a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800047e:	4a3c      	ldr	r2, [pc, #240]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 8000480:	f043 0302 	orr.w	r3, r3, #2
 8000484:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8000488:	4b39      	ldr	r3, [pc, #228]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 800048a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USBPHY;
 8000496:	f04f 0200 	mov.w	r2, #0
 800049a:	f04f 0308 	mov.w	r3, #8
 800049e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.UsbPhyClockSelection = RCC_USBPHYCLKSOURCE_PLL1;
 80004a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004aa:	f107 0318 	add.w	r3, r7, #24
 80004ae:	4618      	mov	r0, r3
 80004b0:	f003 f98a 	bl	80037c8 <HAL_RCCEx_PeriphCLKConfig>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <HAL_PCD_MspInit+0x66>
    {
      Error_Handler();
 80004ba:	f7ff ffad 	bl	8000418 <Error_Handler>
    }

  /** Set the OTG PHY reference clock selection
  */
    HAL_SYSCFG_SetOTGPHYReferenceClockSelection(SYSCFG_OTG_HS_PHY_CLK_SELECT_6);
 80004be:	202c      	movs	r0, #44	@ 0x2c
 80004c0:	f000 f9f2 	bl	80008a8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80004c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 80004c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004ca:	4a29      	ldr	r2, [pc, #164]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 80004cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004d4:	4b26      	ldr	r3, [pc, #152]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 80004d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004de:	613b      	str	r3, [r7, #16]
 80004e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USBPHYC_CLK_ENABLE();
 80004e2:	4b23      	ldr	r3, [pc, #140]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 80004e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004e8:	4a21      	ldr	r2, [pc, #132]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 80004ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80004f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 80004f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80004f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 8000502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	2b00      	cmp	r3, #0
 800050c:	d11b      	bne.n	8000546 <HAL_PCD_MspInit+0xee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 8000510:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000514:	4a16      	ldr	r2, [pc, #88]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 8000520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800052c:	f001 feae 	bl	800228c <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 8000530:	f001 febc 	bl	80022ac <HAL_PWREx_EnableUSBHSTranceiverSupply>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000534:	4b0e      	ldr	r3, [pc, #56]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 8000536:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800053a:	4a0d      	ldr	r2, [pc, #52]	@ (8000570 <HAL_PCD_MspInit+0x118>)
 800053c:	f023 0304 	bic.w	r3, r3, #4
 8000540:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000544:	e003      	b.n	800054e <HAL_PCD_MspInit+0xf6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000546:	f001 fea1 	bl	800228c <HAL_PWREx_EnableVddUSB>

      /*configure VOSR register of USB*/
      HAL_PWREx_EnableUSBHSTranceiverSupply();
 800054a:	f001 feaf 	bl	80022ac <HAL_PWREx_EnableUSBHSTranceiverSupply>
    }

    /*Configuring the SYSCFG registers OTG_HS PHY*/
    /*OTG_HS PHY enable*/
      HAL_SYSCFG_EnableOTGPHY(SYSCFG_OTG_HS_PHY_ENABLE);
 800054e:	2001      	movs	r0, #1
 8000550:	f000 f996 	bl	8000880 <HAL_SYSCFG_EnableOTGPHY>
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2100      	movs	r1, #0
 8000558:	2049      	movs	r0, #73	@ 0x49
 800055a:	f000 fa71 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800055e:	2049      	movs	r0, #73	@ 0x49
 8000560:	f000 fa88 	bl	8000a74 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8000564:	bf00      	nop
 8000566:	37f0      	adds	r7, #240	@ 0xf0
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	42040000 	.word	0x42040000
 8000570:	46020c00 	.word	0x46020c00

08000574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <NMI_Handler+0x4>

0800057c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <MemManage_Handler+0x4>

0800058c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <BusFault_Handler+0x4>

08000594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000598:	bf00      	nop
 800059a:	e7fd      	b.n	8000598 <UsageFault_Handler+0x4>

0800059c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ca:	f000 f915 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB OTG HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80005d8:	4802      	ldr	r0, [pc, #8]	@ (80005e4 <OTG_HS_IRQHandler+0x10>)
 80005da:	f000 fc6b 	bl	8000eb4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000011c 	.word	0x2000011c

080005e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005ec:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <SystemInit+0x68>)
 80005ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <SystemInit+0x68>)
 80005f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80005fc:	4b15      	ldr	r3, [pc, #84]	@ (8000654 <SystemInit+0x6c>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <SystemInit+0x6c>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <SystemInit+0x6c>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <SystemInit+0x6c>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <SystemInit+0x6c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <SystemInit+0x6c>)
 800061a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 800061e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000624:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <SystemInit+0x6c>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <SystemInit+0x6c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a09      	ldr	r2, [pc, #36]	@ (8000654 <SystemInit+0x6c>)
 8000630:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000634:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000636:	4b07      	ldr	r3, [pc, #28]	@ (8000654 <SystemInit+0x6c>)
 8000638:	2200      	movs	r2, #0
 800063a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800063c:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <SystemInit+0x68>)
 800063e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000642:	609a      	str	r2, [r3, #8]
  #endif
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00
 8000654:	46020c00 	.word	0x46020c00

08000658 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000658:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000690 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800065c:	f7ff ffc4 	bl	80005e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000660:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000662:	e003      	b.n	800066c <LoopCopyDataInit>

08000664 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000664:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000666:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000668:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800066a:	3104      	adds	r1, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800066c:	480a      	ldr	r0, [pc, #40]	@ (8000698 <LoopForever+0xa>)
	ldr	r3, =_edata
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000670:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000672:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000674:	d3f6      	bcc.n	8000664 <CopyDataInit>
	ldr	r2, =_sbss
 8000676:	4a0a      	ldr	r2, [pc, #40]	@ (80006a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000678:	e002      	b.n	8000680 <LoopFillZerobss>

0800067a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800067a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800067c:	f842 3b04 	str.w	r3, [r2], #4

08000680 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000680:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <LoopForever+0x16>)
	cmp	r2, r3
 8000682:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000684:	d3f9      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000686:	f008 f86b 	bl	8008760 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800068a:	f7ff fe0d 	bl	80002a8 <main>

0800068e <LoopForever>:

LoopForever:
    b LoopForever
 800068e:	e7fe      	b.n	800068e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000690:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 8000694:	08008874 	.word	0x08008874
	ldr	r0, =_sdata
 8000698:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800069c:	200000fe 	.word	0x200000fe
	ldr	r2, =_sbss
 80006a0:	20000100 	.word	0x20000100
	ldr	r3, = _ebss
 80006a4:	20001e04 	.word	0x20001e04

080006a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006a8:	e7fe      	b.n	80006a8 <ADC1_2_IRQHandler>
	...

080006ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <HAL_Init+0x50>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a11      	ldr	r2, [pc, #68]	@ (80006fc <HAL_Init+0x50>)
 80006b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006bc:	2003      	movs	r0, #3
 80006be:	f000 f9b4 	bl	8000a2a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80006c2:	f002 fedf 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <HAL_Init+0x54>)
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	f003 030f 	and.w	r3, r3, #15
 80006d0:	490c      	ldr	r1, [pc, #48]	@ (8000704 <HAL_Init+0x58>)
 80006d2:	5ccb      	ldrb	r3, [r1, r3]
 80006d4:	fa22 f303 	lsr.w	r3, r2, r3
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <HAL_Init+0x5c>)
 80006da:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006dc:	2004      	movs	r0, #4
 80006de:	f000 f9f9 	bl	8000ad4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e2:	200e      	movs	r0, #14
 80006e4:	f000 f812 	bl	800070c <HAL_InitTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e002      	b.n	80006f8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006f2:	f7ff fe97 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40022000 	.word	0x40022000
 8000700:	46020c00 	.word	0x46020c00
 8000704:	0800881c 	.word	0x0800881c
 8000708:	20000000 	.word	0x20000000

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000718:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <HAL_InitTick+0xdc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d101      	bne.n	8000724 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e05c      	b.n	80007de <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000724:	4b31      	ldr	r3, [pc, #196]	@ (80007ec <HAL_InitTick+0xe0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	2b04      	cmp	r3, #4
 800072e:	d10c      	bne.n	800074a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000730:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <HAL_InitTick+0xe4>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b2c      	ldr	r3, [pc, #176]	@ (80007e8 <HAL_InitTick+0xdc>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800073e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000742:	fbb2 f3f3 	udiv	r3, r2, r3
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e037      	b.n	80007ba <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800074a:	f000 fa1b 	bl	8000b84 <HAL_SYSTICK_GetCLKSourceConfig>
 800074e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d023      	beq.n	800079e <HAL_InitTick+0x92>
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d82d      	bhi.n	80007b8 <HAL_InitTick+0xac>
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <HAL_InitTick+0x5e>
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d00d      	beq.n	8000784 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8000768:	e026      	b.n	80007b8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800076a:	4b21      	ldr	r3, [pc, #132]	@ (80007f0 <HAL_InitTick+0xe4>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <HAL_InitTick+0xdc>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4619      	mov	r1, r3
 8000774:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000778:	fbb3 f3f1 	udiv	r3, r3, r1
 800077c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000780:	60fb      	str	r3, [r7, #12]
        break;
 8000782:	e01a      	b.n	80007ba <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <HAL_InitTick+0xdc>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800078e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000792:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	60fb      	str	r3, [r7, #12]
        break;
 800079c:	e00d      	b.n	80007ba <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800079e:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0xdc>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80007ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b4:	60fb      	str	r3, [r7, #12]
        break;
 80007b6:	e000      	b.n	80007ba <HAL_InitTick+0xae>
        break;
 80007b8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80007ba:	68f8      	ldr	r0, [r7, #12]
 80007bc:	f000 f968 	bl	8000a90 <HAL_SYSTICK_Config>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
 80007c8:	e009      	b.n	80007de <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ca:	2200      	movs	r2, #0
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	f04f 30ff 	mov.w	r0, #4294967295
 80007d2:	f000 f935 	bl	8000a40 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80007d6:	4a07      	ldr	r2, [pc, #28]	@ (80007f4 <HAL_InitTick+0xe8>)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000008 	.word	0x20000008
 80007ec:	e000e010 	.word	0xe000e010
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_IncTick+0x20>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <HAL_IncTick+0x24>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4413      	add	r3, r2
 8000808:	4a04      	ldr	r2, [pc, #16]	@ (800081c <HAL_IncTick+0x24>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000700 	.word	0x20000700

08000820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  return uwTick;
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <HAL_GetTick+0x14>)
 8000826:	681b      	ldr	r3, [r3, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000700 	.word	0x20000700

08000838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000840:	f7ff ffee 	bl	8000820 <HAL_GetTick>
 8000844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d005      	beq.n	800085e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000852:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HAL_Delay+0x44>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4413      	add	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800085e:	bf00      	nop
 8000860:	f7ff ffde 	bl	8000820 <HAL_GetTick>
 8000864:	4602      	mov	r2, r0
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	429a      	cmp	r2, r3
 800086e:	d8f7      	bhi.n	8000860 <HAL_Delay+0x28>
  {
  }
}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	3710      	adds	r7, #16
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000008 	.word	0x20000008

08000880 <HAL_SYSCFG_EnableOTGPHY>:
  * @param  OTGPHYConfig Defines the OTG PHY configuration.
            This parameter can be one of @ref SYSCFG_OTG_PHY_Enable
  * @retval None
  */
void HAL_SYSCFG_EnableOTGPHY(uint32_t OTGPHYConfig)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_CONFIG(OTGPHYConfig));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_EN, OTGPHYConfig);
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 800088a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800088c:	f023 0201 	bic.w	r2, r3, #1
 8000890:	4904      	ldr	r1, [pc, #16]	@ (80008a4 <HAL_SYSCFG_EnableOTGPHY+0x24>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4313      	orrs	r3, r2
 8000896:	674b      	str	r3, [r1, #116]	@ 0x74
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	46000400 	.word	0x46000400

080008a8 <HAL_SYSCFG_SetOTGPHYReferenceClockSelection>:
  * @param  RefClkSelection Defines the OTG PHY reference clock selection.
            This parameter can be one of the @ref SYSCFG_OTG_PHY_RefenceClockSelection
  * @retval None
  */
void HAL_SYSCFG_SetOTGPHYReferenceClockSelection(uint32_t RefClkSelection)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_OTGPHY_REFERENCE_CLOCK(RefClkSelection));

  MODIFY_REG(SYSCFG->OTGHSPHYCR, SYSCFG_OTGHSPHYCR_CLKSEL, RefClkSelection);
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80008b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80008b4:	f023 023c 	bic.w	r2, r3, #60	@ 0x3c
 80008b8:	4904      	ldr	r1, [pc, #16]	@ (80008cc <HAL_SYSCFG_SetOTGPHYReferenceClockSelection+0x24>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4313      	orrs	r3, r2
 80008be:	674b      	str	r3, [r1, #116]	@ 0x74
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	46000400 	.word	0x46000400

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000902:	4a04      	ldr	r2, [pc, #16]	@ (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	60d3      	str	r3, [r2, #12]
}
 8000908:	bf00      	nop
 800090a:	3714      	adds	r7, #20
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	@ (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	@ (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	@ (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b089      	sub	sp, #36	@ 0x24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	f1c3 0307 	rsb	r3, r3, #7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	bf28      	it	cs
 80009e2:	2304      	movcs	r3, #4
 80009e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3304      	adds	r3, #4
 80009ea:	2b06      	cmp	r3, #6
 80009ec:	d902      	bls.n	80009f4 <NVIC_EncodePriority+0x30>
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3b03      	subs	r3, #3
 80009f2:	e000      	b.n	80009f6 <NVIC_EncodePriority+0x32>
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 32ff 	mov.w	r2, #4294967295
 80009fc:	69bb      	ldr	r3, [r7, #24]
 80009fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000a02:	43da      	mvns	r2, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	43d9      	mvns	r1, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a1c:	4313      	orrs	r3, r2
         );
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3724      	adds	r7, #36	@ 0x24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff ff4c 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4e:	f7ff ff63 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a54:	687a      	ldr	r2, [r7, #4]
 8000a56:	68b9      	ldr	r1, [r7, #8]
 8000a58:	6978      	ldr	r0, [r7, #20]
 8000a5a:	f7ff ffb3 	bl	80009c4 <NVIC_EncodePriority>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff82 	bl	8000970 <__NVIC_SetPriority>
}
 8000a6c:	bf00      	nop
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff ff56 	bl	8000934 <__NVIC_EnableIRQ>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00d      	b.n	8000ac2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <HAL_SYSTICK_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <HAL_SYSTICK_Config+0x40>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000ab4:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_SYSTICK_Config+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a05      	ldr	r2, [pc, #20]	@ (8000ad0 <HAL_SYSTICK_Config+0x40>)
 8000aba:	f043 0303 	orr.w	r3, r3, #3
 8000abe:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d844      	bhi.n	8000b6c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae8:	08000b0b 	.word	0x08000b0b
 8000aec:	08000b29 	.word	0x08000b29
 8000af0:	08000b4b 	.word	0x08000b4b
 8000af4:	08000b6d 	.word	0x08000b6d
 8000af8:	08000afd 	.word	0x08000afd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000afc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1e      	ldr	r2, [pc, #120]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6013      	str	r3, [r2, #0]
      break;
 8000b08:	e031      	b.n	8000b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b10:	f023 0304 	bic.w	r3, r3, #4
 8000b14:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a18      	ldr	r2, [pc, #96]	@ (8000b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b1e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b26:	e022      	b.n	8000b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b2e:	f023 0304 	bic.w	r3, r3, #4
 8000b32:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b48:	e011      	b.n	8000b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b7c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000b50:	f023 0304 	bic.w	r3, r3, #4
 8000b54:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000b60:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000b62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000b6a:	e000      	b.n	8000b6e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000b6c:	bf00      	nop
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010
 8000b80:	46020c00 	.word	0x46020c00

08000b84 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000b8a:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000b96:	2304      	movs	r3, #4
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e021      	b.n	8000be0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000b9c:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000ba6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bae:	d011      	beq.n	8000bd4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000bb6:	d810      	bhi.n	8000bda <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000bc4:	d003      	beq.n	8000bce <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000bc6:	e008      	b.n	8000bda <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
        break;
 8000bcc:	e008      	b.n	8000be0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	607b      	str	r3, [r7, #4]
        break;
 8000bd2:	e005      	b.n	8000be0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
        break;
 8000bd8:	e002      	b.n	8000be0 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
        break;
 8000bde:	bf00      	nop
    }
  }
  return systick_source;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010
 8000bf4:	46020c00 	.word	0x46020c00

08000bf8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e007      	b.n	8000c26 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f023 0204 	bic.w	r2, r3, #4
 8000c1e:	4905      	ldr	r1, [pc, #20]	@ (8000c34 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40030400 	.word	0x40030400

08000c38 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000c3c:	4b05      	ldr	r3, [pc, #20]	@ (8000c54 <HAL_ICACHE_Enable+0x1c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <HAL_ICACHE_Enable+0x1c>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40030400 	.word	0x40030400

08000c58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0fe      	b.n	8000e68 <HAL_PCD_Init+0x210>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d106      	bne.n	8000c84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff fbea 	bl	8000458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2203      	movs	r2, #3
 8000c88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f003 fe4a 	bl	800492a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	7c1a      	ldrb	r2, [r3, #16]
 8000c9e:	f88d 2000 	strb.w	r2, [sp]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca6:	f003 fd5d 	bl	8004764 <USB_CoreInit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2202      	movs	r2, #2
 8000cb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e0d5      	b.n	8000e68 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 fe42 	bl	800494c <USB_SetCurrentMode>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e0c6      	b.n	8000e68 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
 8000cde:	e04a      	b.n	8000d76 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ce0:	7bfa      	ldrb	r2, [r7, #15]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4413      	add	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	3315      	adds	r3, #21
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	3314      	adds	r3, #20
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	b298      	uxth	r0, r3
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	332e      	adds	r3, #46	@ 0x2e
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000d20:	7bfa      	ldrb	r2, [r7, #15]
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	3318      	adds	r3, #24
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4413      	add	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	440b      	add	r3, r1
 8000d42:	331c      	adds	r3, #28
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	3320      	adds	r3, #32
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4413      	add	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	3324      	adds	r3, #36	@ 0x24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	7bfa      	ldrb	r2, [r7, #15]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d3af      	bcc.n	8000ce0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]
 8000d84:	e044      	b.n	8000e10 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d86:	7bfa      	ldrb	r2, [r7, #15]
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d9c:	7bfa      	ldrb	r2, [r7, #15]
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	4613      	mov	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4413      	add	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8000dae:	7bfa      	ldrb	r2, [r7, #15]
 8000db0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4413      	add	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4613      	mov	r3, r2
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000dde:	7bfa      	ldrb	r2, [r7, #15]
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	4613      	mov	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4413      	add	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	440b      	add	r3, r1
 8000dec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	7bfa      	ldrb	r2, [r7, #15]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3b5      	bcc.n	8000d86 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6818      	ldr	r0, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7c1a      	ldrb	r2, [r3, #16]
 8000e22:	f88d 2000 	strb.w	r2, [sp]
 8000e26:	3304      	adds	r3, #4
 8000e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e2a:	f003 fddb 	bl	80049e4 <USB_DevInit>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2202      	movs	r2, #2
 8000e38:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e013      	b.n	8000e68 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7b1b      	ldrb	r3, [r3, #12]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d102      	bne.n	8000e5c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f001 f95c 	bl	8002114 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fe2a 	bl	8005aba <USB_DevDisconnect>

  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
#if defined (STM32U575xx) || defined (STM32U585xx)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  __HAL_LOCK(hpcd);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_PCD_Start+0x16>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e012      	b.n	8000eac <HAL_PCD_Start+0x3c>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  __HAL_PCD_ENABLE(hpcd);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fd38 	bl	8004908 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f004 fdeb 	bl	8005a78 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b08d      	sub	sp, #52	@ 0x34
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ec2:	6a3b      	ldr	r3, [r7, #32]
 8000ec4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f004 fea9 	bl	8005c22 <USB_GetMode>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 84b9 	bne.w	800184a <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fe0d 	bl	8005afc <USB_ReadInterrupts>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 84af 	beq.w	8001848 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 fdfa 	bl	8005afc <USB_ReadInterrupts>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d107      	bne.n	8000f22 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f002 0202 	and.w	r2, r2, #2
 8000f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f004 fde8 	bl	8005afc <USB_ReadInterrupts>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	2b10      	cmp	r3, #16
 8000f34:	d161      	bne.n	8000ffa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	699a      	ldr	r2, [r3, #24]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0210 	bic.w	r2, r2, #16
 8000f44:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000f46:	6a3b      	ldr	r3, [r7, #32]
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	f003 020f 	and.w	r2, r3, #15
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	4413      	add	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	3304      	adds	r3, #4
 8000f64:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	0c5b      	lsrs	r3, r3, #17
 8000f6a:	f003 030f 	and.w	r3, r3, #15
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d124      	bne.n	8000fbc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8000f78:	4013      	ands	r3, r2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d035      	beq.n	8000fea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	6a38      	ldr	r0, [r7, #32]
 8000f92:	f004 fc1f 	bl	80057d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	68da      	ldr	r2, [r3, #12]
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fa2:	441a      	add	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	091b      	lsrs	r3, r3, #4
 8000fb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb4:	441a      	add	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	615a      	str	r2, [r3, #20]
 8000fba:	e016      	b.n	8000fea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	0c5b      	lsrs	r3, r3, #17
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	2b06      	cmp	r3, #6
 8000fc6:	d110      	bne.n	8000fea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8000fce:	2208      	movs	r2, #8
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	6a38      	ldr	r0, [r7, #32]
 8000fd4:	f004 fbfe 	bl	80057d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	695a      	ldr	r2, [r3, #20]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fe4:	441a      	add	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	699a      	ldr	r2, [r3, #24]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0210 	orr.w	r2, r2, #16
 8000ff8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 fd7c 	bl	8005afc <USB_ReadInterrupts>
 8001004:	4603      	mov	r3, r0
 8001006:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800100a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800100e:	f040 80a7 	bne.w	8001160 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f004 fd81 	bl	8005b22 <USB_ReadDevAllOutEpInterrupt>
 8001020:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001022:	e099      	b.n	8001158 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 808e 	beq.w	800114c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fda5 	bl	8005b8a <USB_ReadDevOutEPInterrupt>
 8001040:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104e:	015a      	lsls	r2, r3, #5
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	4413      	add	r3, r2
 8001054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001058:	461a      	mov	r2, r3
 800105a:	2301      	movs	r3, #1
 800105c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800105e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fed1 	bl	8001e08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00c      	beq.n	800108a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001072:	015a      	lsls	r2, r3, #5
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	4413      	add	r3, r2
 8001078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800107c:	461a      	mov	r2, r3
 800107e:	2308      	movs	r3, #8
 8001080:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 ffa7 	bl	8001fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	2b00      	cmp	r3, #0
 8001092:	d008      	beq.n	80010a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	015a      	lsls	r2, r3, #5
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4413      	add	r3, r2
 800109c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80010a0:	461a      	mov	r2, r3
 80010a2:	2310      	movs	r3, #16
 80010a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d030      	beq.n	8001112 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80010b0:	6a3b      	ldr	r3, [r7, #32]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b8:	2b80      	cmp	r3, #128	@ 0x80
 80010ba:	d109      	bne.n	80010d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	69fa      	ldr	r2, [r7, #28]
 80010c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80010d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	4413      	add	r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	3304      	adds	r3, #4
 80010e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	78db      	ldrb	r3, [r3, #3]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	2200      	movs	r2, #0
 80010f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f007 f914 	bl	8008328 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	015a      	lsls	r2, r3, #5
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	4413      	add	r3, r2
 8001108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800110c:	461a      	mov	r2, r3
 800110e:	2302      	movs	r3, #2
 8001110:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f003 0320 	and.w	r3, r3, #32
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	015a      	lsls	r2, r3, #5
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001128:	461a      	mov	r2, r3
 800112a:	2320      	movs	r3, #32
 800112c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d009      	beq.n	800114c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113a:	015a      	lsls	r2, r3, #5
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	4413      	add	r3, r2
 8001140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001144:	461a      	mov	r2, r3
 8001146:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800114a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	3301      	adds	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001154:	085b      	lsrs	r3, r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115a:	2b00      	cmp	r3, #0
 800115c:	f47f af62 	bne.w	8001024 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4618      	mov	r0, r3
 8001166:	f004 fcc9 	bl	8005afc <USB_ReadInterrupts>
 800116a:	4603      	mov	r3, r0
 800116c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001170:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001174:	f040 80db 	bne.w	800132e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 fcea 	bl	8005b56 <USB_ReadDevAllInEpInterrupt>
 8001182:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001188:	e0cd      	b.n	8001326 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80c2 	beq.w	800131a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fd10 	bl	8005bc6 <USB_ReadDevInEPInterrupt>
 80011a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d057      	beq.n	8001262 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	2201      	movs	r2, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80011c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69f9      	ldr	r1, [r7, #28]
 80011ce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80011d2:	4013      	ands	r3, r2
 80011d4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	015a      	lsls	r2, r3, #5
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80011e2:	461a      	mov	r2, r3
 80011e4:	2301      	movs	r3, #1
 80011e6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	799b      	ldrb	r3, [r3, #6]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d132      	bne.n	8001256 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	3320      	adds	r3, #32
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4403      	add	r3, r0
 8001210:	331c      	adds	r3, #28
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4419      	add	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4403      	add	r3, r0
 8001224:	3320      	adds	r3, #32
 8001226:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	2b00      	cmp	r3, #0
 800122c:	d113      	bne.n	8001256 <HAL_PCD_IRQHandler+0x3a2>
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001232:	4613      	mov	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4413      	add	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	440b      	add	r3, r1
 800123c:	3324      	adds	r3, #36	@ 0x24
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d108      	bne.n	8001256 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800124e:	461a      	mov	r2, r3
 8001250:	2101      	movs	r1, #1
 8001252:	f004 fd17 	bl	8005c84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f006 ffdf 	bl	8008220 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	4413      	add	r3, r2
 8001274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001278:	461a      	mov	r2, r3
 800127a:	2308      	movs	r3, #8
 800127c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128a:	015a      	lsls	r2, r3, #5
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001294:	461a      	mov	r2, r3
 8001296:	2310      	movs	r3, #16
 8001298:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d008      	beq.n	80012b6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	015a      	lsls	r2, r3, #5
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	4413      	add	r3, r2
 80012ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80012b0:	461a      	mov	r2, r3
 80012b2:	2340      	movs	r3, #64	@ 0x40
 80012b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d023      	beq.n	8001308 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80012c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012c2:	6a38      	ldr	r0, [r7, #32]
 80012c4:	f003 fcfe 	bl	8004cc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80012c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ca:	4613      	mov	r3, r2
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	3310      	adds	r3, #16
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	3304      	adds	r3, #4
 80012da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	78db      	ldrb	r3, [r3, #3]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d108      	bne.n	80012f6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2200      	movs	r2, #0
 80012e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4619      	mov	r1, r3
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f007 f82b 	bl	800834c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	015a      	lsls	r2, r3, #5
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001302:	461a      	mov	r2, r3
 8001304:	2302      	movs	r3, #2
 8001306:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001312:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fcea 	bl	8001cee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001322:	085b      	lsrs	r3, r3, #1
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001328:	2b00      	cmp	r3, #0
 800132a:	f47f af2e 	bne.w	800118a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f004 fbe2 	bl	8005afc <USB_ReadInterrupts>
 8001338:	4603      	mov	r3, r0
 800133a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800133e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001342:	d122      	bne.n	800138a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800135e:	2b01      	cmp	r3, #1
 8001360:	d108      	bne.n	8001374 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800136a:	2100      	movs	r1, #0
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fef5 	bl	800215c <HAL_PCDEx_LPM_Callback>
 8001372:	e002      	b.n	800137a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f006 ffc9 	bl	800830c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fbb4 	bl	8005afc <USB_ReadInterrupts>
 8001394:	4603      	mov	r3, r0
 8001396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800139a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800139e:	d112      	bne.n	80013c6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d102      	bne.n	80013b6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f006 ff85 	bl	80082c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80013c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fb96 	bl	8005afc <USB_ReadInterrupts>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80013da:	d121      	bne.n	8001420 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	695a      	ldr	r2, [r3, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80013ea:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d111      	bne.n	800141a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	f003 020f 	and.w	r2, r3, #15
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001410:	2101      	movs	r1, #1
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fea2 	bl	800215c <HAL_PCDEx_LPM_Callback>
 8001418:	e002      	b.n	8001420 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f006 ff50 	bl	80082c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fb69 	bl	8005afc <USB_ReadInterrupts>
 800142a:	4603      	mov	r3, r0
 800142c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001430:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001434:	f040 80b7 	bne.w	80015a6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	69fa      	ldr	r2, [r7, #28]
 8001442:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001446:	f023 0301 	bic.w	r3, r3, #1
 800144a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2110      	movs	r1, #16
 8001452:	4618      	mov	r0, r3
 8001454:	f003 fc36 	bl	8004cc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800145c:	e046      	b.n	80014ec <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800145e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001460:	015a      	lsls	r2, r3, #5
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	4413      	add	r3, r2
 8001466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800146a:	461a      	mov	r2, r3
 800146c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001470:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001474:	015a      	lsls	r2, r3, #5
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001482:	0151      	lsls	r1, r2, #5
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	440a      	add	r2, r1
 8001488:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800148c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001490:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001494:	015a      	lsls	r2, r3, #5
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	4413      	add	r3, r2
 800149a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800149e:	461a      	mov	r2, r3
 80014a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80014a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80014a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b6:	0151      	lsls	r1, r2, #5
 80014b8:	69fa      	ldr	r2, [r7, #28]
 80014ba:	440a      	add	r2, r1
 80014bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80014c0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80014c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c8:	015a      	lsls	r2, r3, #5
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	4413      	add	r3, r2
 80014ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014d6:	0151      	lsls	r1, r2, #5
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	440a      	add	r2, r1
 80014dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80014e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e8:	3301      	adds	r3, #1
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	461a      	mov	r2, r3
 80014f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d3b2      	bcc.n	800145e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	69fa      	ldr	r2, [r7, #28]
 8001502:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001506:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800150a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7bdb      	ldrb	r3, [r3, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d016      	beq.n	8001542 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800151a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001524:	f043 030b 	orr.w	r3, r3, #11
 8001528:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800153a:	f043 030b 	orr.w	r3, r3, #11
 800153e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001540:	e015      	b.n	800156e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	69fa      	ldr	r2, [r7, #28]
 800154c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001550:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001554:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001558:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001568:	f043 030b 	orr.w	r3, r3, #11
 800156c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800157c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001580:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001590:	461a      	mov	r2, r3
 8001592:	f004 fb77 	bl	8005c84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	695a      	ldr	r2, [r3, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80015a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 faa6 	bl	8005afc <USB_ReadInterrupts>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ba:	d123      	bne.n	8001604 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f004 fb3c 	bl	8005c3e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fbf3 	bl	8004db6 <USB_GetDevSpeed>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681c      	ldr	r4, [r3, #0]
 80015dc:	f002 f854 	bl	8003688 <HAL_RCC_GetHCLKFreq>
 80015e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015e6:	461a      	mov	r2, r3
 80015e8:	4620      	mov	r0, r4
 80015ea:	f003 f8eb 	bl	80047c4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f006 fe3e 	bl	8008270 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001602:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fa77 	bl	8005afc <USB_ReadInterrupts>
 800160e:	4603      	mov	r3, r0
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b08      	cmp	r3, #8
 8001616:	d10a      	bne.n	800162e <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f006 fe1b 	bl	8008254 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f002 0208 	and.w	r2, r2, #8
 800162c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fa62 	bl	8005afc <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	2b80      	cmp	r3, #128	@ 0x80
 8001640:	d123      	bne.n	800168a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800164e:	2301      	movs	r3, #1
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
 8001652:	e014      	b.n	800167e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 fb0a 	bl	8001c8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	3301      	adds	r3, #1
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	461a      	mov	r2, r3
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	4293      	cmp	r3, r2
 8001688:	d3e4      	bcc.n	8001654 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fa34 	bl	8005afc <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800169a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800169e:	d13c      	bne.n	800171a <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016a0:	2301      	movs	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a4:	e02b      	b.n	80016fe <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	015a      	lsls	r2, r3, #5
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016ba:	4613      	mov	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	3318      	adds	r3, #24
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d115      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80016cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da12      	bge.n	80016f8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	3317      	adds	r3, #23
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 faca 	bl	8001c8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	3301      	adds	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	461a      	mov	r2, r3
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	4293      	cmp	r3, r2
 8001708:	d3cd      	bcc.n	80016a6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	695a      	ldr	r2, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f004 f9ec 	bl	8005afc <USB_ReadInterrupts>
 8001724:	4603      	mov	r3, r0
 8001726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800172e:	d156      	bne.n	80017de <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001730:	2301      	movs	r3, #1
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
 8001734:	e045      	b.n	80017c2 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001738:	015a      	lsls	r2, r3, #5
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4413      	add	r3, r2
 800173e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d12e      	bne.n	80017bc <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800175e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001760:	2b00      	cmp	r3, #0
 8001762:	da2b      	bge.n	80017bc <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	0c1a      	lsrs	r2, r3, #16
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800176e:	4053      	eors	r3, r2
 8001770:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001774:	2b00      	cmp	r3, #0
 8001776:	d121      	bne.n	80017bc <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b8:	6053      	str	r3, [r2, #4]
            break;
 80017ba:	e008      	b.n	80017ce <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017be:	3301      	adds	r3, #1
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	791b      	ldrb	r3, [r3, #4]
 80017c6:	461a      	mov	r2, r3
 80017c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d3b3      	bcc.n	8001736 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80017dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f004 f98a 	bl	8005afc <USB_ReadInterrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80017ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017f2:	d10a      	bne.n	800180a <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f006 fdbb 	bl	8008370 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f004 f974 	bl	8005afc <USB_ReadInterrupts>
 8001814:	4603      	mov	r3, r0
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	2b04      	cmp	r3, #4
 800181c:	d115      	bne.n	800184a <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d002      	beq.n	8001836 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f006 fdab 	bl	800838c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	430a      	orrs	r2, r1
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	e000      	b.n	800184a <HAL_PCD_IRQHandler+0x996>
      return;
 8001848:	bf00      	nop
    }
  }
}
 800184a:	3734      	adds	r7, #52	@ 0x34
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}

08001850 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_PCD_SetAddress+0x1a>
 8001866:	2302      	movs	r3, #2
 8001868:	e012      	b.n	8001890 <HAL_PCD_SetAddress+0x40>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f004 f8d3 	bl	8005a2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	4608      	mov	r0, r1
 80018a2:	4611      	mov	r1, r2
 80018a4:	461a      	mov	r2, r3
 80018a6:	4603      	mov	r3, r0
 80018a8:	70fb      	strb	r3, [r7, #3]
 80018aa:	460b      	mov	r3, r1
 80018ac:	803b      	strh	r3, [r7, #0]
 80018ae:	4613      	mov	r3, r2
 80018b0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	da0f      	bge.n	80018de <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	f003 020f 	and.w	r2, r3, #15
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3310      	adds	r3, #16
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	3304      	adds	r3, #4
 80018d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	705a      	strb	r2, [r3, #1]
 80018dc:	e00f      	b.n	80018fe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	f003 020f 	and.w	r2, r3, #15
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	4413      	add	r3, r2
 80018f4:	3304      	adds	r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	b2da      	uxtb	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800190a:	883b      	ldrh	r3, [r7, #0]
 800190c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	78ba      	ldrb	r2, [r7, #2]
 8001918:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (ep->is_in != 0U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	785b      	ldrb	r3, [r3, #1]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800192c:	78bb      	ldrb	r3, [r7, #2]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d102      	bne.n	8001938 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800193e:	2b01      	cmp	r3, #1
 8001940:	d101      	bne.n	8001946 <HAL_PCD_EP_Open+0xae>
 8001942:	2302      	movs	r3, #2
 8001944:	e00e      	b.n	8001964 <HAL_PCD_EP_Open+0xcc>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68f9      	ldr	r1, [r7, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fa53 	bl	8004e00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001962:	7afb      	ldrb	r3, [r7, #11]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800197c:	2b00      	cmp	r3, #0
 800197e:	da0f      	bge.n	80019a0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001980:	78fb      	ldrb	r3, [r7, #3]
 8001982:	f003 020f 	and.w	r2, r3, #15
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	3310      	adds	r3, #16
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	3304      	adds	r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	705a      	strb	r2, [r3, #1]
 800199e:	e00f      	b.n	80019c0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	f003 020f 	and.w	r2, r3, #15
 80019a6:	4613      	mov	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	4413      	add	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	3304      	adds	r3, #4
 80019b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019c0:	78fb      	ldrb	r3, [r7, #3]
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_PCD_EP_Close+0x6e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e00e      	b.n	80019f8 <HAL_PCD_EP_Close+0x8c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68f9      	ldr	r1, [r7, #12]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 fa91 	bl	8004f10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a10:	7afb      	ldrb	r3, [r7, #11]
 8001a12:	f003 020f 	and.w	r2, r3, #15
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4413      	add	r3, r2
 8001a26:	3304      	adds	r3, #4
 8001a28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a42:	7afb      	ldrb	r3, [r7, #11]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	799b      	ldrb	r3, [r3, #6]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d102      	bne.n	8001a5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	799b      	ldrb	r3, [r3, #6]
 8001a64:	461a      	mov	r2, r3
 8001a66:	6979      	ldr	r1, [r7, #20]
 8001a68:	f003 fb2e 	bl	80050c8 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	f003 020f 	and.w	r2, r3, #15
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001a98:	681b      	ldr	r3, [r3, #0]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ab6:	7afb      	ldrb	r3, [r7, #11]
 8001ab8:	f003 020f 	and.w	r2, r3, #15
 8001abc:	4613      	mov	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	3310      	adds	r3, #16
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	3304      	adds	r3, #4
 8001acc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	611a      	str	r2, [r3, #16]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	701a      	strb	r2, [r3, #0]

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if (hpcd->Init.dma_enable == 1U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	799b      	ldrb	r3, [r3, #6]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d102      	bne.n	8001b00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	799b      	ldrb	r3, [r3, #6]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	6979      	ldr	r1, [r7, #20]
 8001b0c:	f003 fadc 	bl	80050c8 <USB_EPStartXfer>
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	7912      	ldrb	r2, [r2, #4]
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04f      	b.n	8001bd8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	da0f      	bge.n	8001b60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b40:	78fb      	ldrb	r3, [r7, #3]
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3310      	adds	r3, #16
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	705a      	strb	r2, [r3, #1]
 8001b5e:	e00d      	b.n	8001b7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b60:	78fa      	ldrb	r2, [r7, #3]
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	4413      	add	r3, r2
 8001b72:	3304      	adds	r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_PCD_EP_SetStall+0x82>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e01d      	b.n	8001bd8 <HAL_PCD_EP_SetStall+0xbe>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68f9      	ldr	r1, [r7, #12]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fe6a 	bl	8005884 <USB_EPSetStall>

#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7999      	ldrb	r1, [r3, #6]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f004 f85b 	bl	8005c84 <USB_EP0_OutStart>
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	7912      	ldrb	r2, [r2, #4]
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e042      	b.n	8001c84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	da0f      	bge.n	8001c26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 020f 	and.w	r2, r3, #15
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3310      	adds	r3, #16
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2201      	movs	r2, #1
 8001c22:	705a      	strb	r2, [r3, #1]
 8001c24:	e00f      	b.n	8001c46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 020f 	and.w	r2, r3, #15
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2200      	movs	r2, #0
 8001c44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_PCD_EP_ClrStall+0x86>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e00e      	b.n	8001c84 <HAL_PCD_EP_ClrStall+0xa4>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68f9      	ldr	r1, [r7, #12]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fe73 	bl	8005960 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	da0c      	bge.n	8001cba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f003 020f 	and.w	r2, r3, #15
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	4413      	add	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	3310      	adds	r3, #16
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e00c      	b.n	8001cd4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68f9      	ldr	r1, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f003 fc92 	bl	8005604 <USB_EPStopXfer>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b08a      	sub	sp, #40	@ 0x28
 8001cf2:	af02      	add	r7, sp, #8
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	3304      	adds	r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d901      	bls.n	8001d26 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06b      	b.n	8001dfe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d902      	bls.n	8001d42 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3303      	adds	r3, #3
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d4a:	e02a      	b.n	8001da2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d902      	bls.n	8001d68 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	3303      	adds	r3, #3
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68d9      	ldr	r1, [r3, #12]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4603      	mov	r3, r0
 8001d84:	6978      	ldr	r0, [r7, #20]
 8001d86:	f003 fce7 	bl	8005758 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	441a      	add	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d809      	bhi.n	8001dcc <PCD_WriteEmptyTxFifo+0xde>
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	695a      	ldr	r2, [r3, #20]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d203      	bcs.n	8001dcc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1bf      	bne.n	8001d4c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d811      	bhi.n	8001dfc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	2201      	movs	r2, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	6939      	ldr	r1, [r7, #16]
 8001df4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001df8:	4013      	ands	r3, r2
 8001dfa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	333c      	adds	r3, #60	@ 0x3c
 8001e20:	3304      	adds	r3, #4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	799b      	ldrb	r3, [r3, #6]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d17b      	bne.n	8001f36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d015      	beq.n	8001e74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	4a61      	ldr	r2, [pc, #388]	@ (8001fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	f240 80b9 	bls.w	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80b3 	beq.w	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e70:	6093      	str	r3, [r2, #8]
 8001e72:	e0a7      	b.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d009      	beq.n	8001e92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	015a      	lsls	r2, r3, #5
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	6093      	str	r3, [r2, #8]
 8001e90:	e098      	b.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f040 8093 	bne.w	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d90f      	bls.n	8001ec6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	015a      	lsls	r2, r3, #5
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ec2:	6093      	str	r3, [r2, #8]
 8001ec4:	e07e      	b.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3304      	adds	r3, #4
 8001eda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6a1a      	ldr	r2, [r3, #32]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	0159      	lsls	r1, r3, #5
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	440b      	add	r3, r1
 8001ee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef2:	1ad2      	subs	r2, r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d114      	bne.n	8001f28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f10:	461a      	mov	r2, r3
 8001f12:	2101      	movs	r1, #1
 8001f14:	f003 feb6 	bl	8005c84 <USB_EP0_OutStart>
 8001f18:	e006      	b.n	8001f28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	441a      	add	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f006 f95b 	bl	80081ea <HAL_PCD_DataOutStageCallback>
 8001f34:	e046      	b.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4a26      	ldr	r2, [pc, #152]	@ (8001fd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d124      	bne.n	8001f88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f54:	461a      	mov	r2, r3
 8001f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f5a:	6093      	str	r3, [r2, #8]
 8001f5c:	e032      	b.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d008      	beq.n	8001f7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f74:	461a      	mov	r2, r3
 8001f76:	2320      	movs	r3, #32
 8001f78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f006 f932 	bl	80081ea <HAL_PCD_DataOutStageCallback>
 8001f86:	e01d      	b.n	8001fc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d114      	bne.n	8001fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d108      	bne.n	8001fb8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	f003 fe66 	bl	8005c84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f006 f913 	bl	80081ea <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	4f54300a 	.word	0x4f54300a
 8001fd4:	4f54310a 	.word	0x4f54310a

08001fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	333c      	adds	r3, #60	@ 0x3c
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4a15      	ldr	r2, [pc, #84]	@ (8002060 <PCD_EP_OutSetupPacket_int+0x88>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d90e      	bls.n	800202c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	d009      	beq.n	800202c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002024:	461a      	mov	r2, r3
 8002026:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800202a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f006 f8ca 	bl	80081c6 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <PCD_EP_OutSetupPacket_int+0x88>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d90c      	bls.n	8002054 <PCD_EP_OutSetupPacket_int+0x7c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	799b      	ldrb	r3, [r3, #6]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d108      	bne.n	8002054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6818      	ldr	r0, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800204c:	461a      	mov	r2, r3
 800204e:	2101      	movs	r1, #1
 8002050:	f003 fe18 	bl	8005c84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3718      	adds	r7, #24
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	4f54300a 	.word	0x4f54300a

08002064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	4613      	mov	r3, r2
 8002072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002082:	883b      	ldrh	r3, [r7, #0]
 8002084:	0419      	lsls	r1, r3, #16
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	430a      	orrs	r2, r1
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002090:	e028      	b.n	80020e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	4413      	add	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e00d      	b.n	80020c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	3340      	adds	r3, #64	@ 0x40
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	4413      	add	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	3301      	adds	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d3ec      	bcc.n	80020a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020cc:	883b      	ldrh	r3, [r7, #0]
 80020ce:	0418      	lsls	r0, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	68ba      	ldr	r2, [r7, #8]
 80020da:	4302      	orrs	r2, r0
 80020dc:	3340      	adds	r3, #64	@ 0x40
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002146:	f043 0303 	orr.w	r3, r3, #3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800217c:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800217e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002180:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002184:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	429a      	cmp	r2, r3
 800218c:	d10b      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002194:	d905      	bls.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002196:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a32      	ldr	r2, [pc, #200]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800219c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021a0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e057      	b.n	8002256 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ac:	d90a      	bls.n	80021c4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80021ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c0:	60d3      	str	r3, [r2, #12]
 80021c2:	e007      	b.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80021c4:	4b27      	ldr	r3, [pc, #156]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80021cc:	4925      	ldr	r1, [pc, #148]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80021d4:	4b24      	ldr	r3, [pc, #144]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a24      	ldr	r2, [pc, #144]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	099b      	lsrs	r3, r3, #6
 80021e0:	2232      	movs	r2, #50	@ 0x32
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	4a21      	ldr	r2, [pc, #132]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	3301      	adds	r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80021f2:	e002      	b.n	80021fa <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_PWREx_ControlVoltageScaling+0x98>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f3      	bne.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01b      	beq.n	800224a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a15      	ldr	r2, [pc, #84]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	099b      	lsrs	r3, r3, #6
 800221e:	2232      	movs	r2, #50	@ 0x32
 8002220:	fb02 f303 	mul.w	r3, r2, r3
 8002224:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	3301      	adds	r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002230:	e002      	b.n	8002238 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	3b01      	subs	r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002238:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800223a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f3      	bne.n	8002232 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e000      	b.n	8002256 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	46020800 	.word	0x46020800
 8002268:	20000000 	.word	0x20000000
 800226c:	10624dd3 	.word	0x10624dd3

08002270 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <HAL_PWREx_GetVoltageRange+0x18>)
 8002276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002278:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800227c:	4618      	mov	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	46020800 	.word	0x46020800

0800228c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6113      	str	r3, [r2, #16]
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	46020800 	.word	0x46020800

080022ac <HAL_PWREx_EnableUSBHSTranceiverSupply>:
/**
  * @brief  Enable the internal USB HS transceiver supply.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBHSTranceiverSupply(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
  uint32_t vos;

  /* Get the system applied voltage scaling range */
  vos = HAL_PWREx_GetVoltageRange();
 80022b2:	f7ff ffdd 	bl	8002270 <HAL_PWREx_GetVoltageRange>
 80022b6:	6078      	str	r0, [r7, #4]

  /* Check the system applied voltage scaling range */
  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80022be:	d003      	beq.n	80022c8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x1c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022c6:	d107      	bne.n	80022d8 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2c>
  {
    SET_BIT(PWR->VOSR, (PWR_VOSR_USBPWREN | PWR_VOSR_USBBOOSTEN));
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a05      	ldr	r2, [pc, #20]	@ (80022e4 <HAL_PWREx_EnableUSBHSTranceiverSupply+0x38>)
 80022ce:	f443 13c0 	orr.w	r3, r3, #1572864	@ 0x180000
 80022d2:	60d3      	str	r3, [r2, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_PWREx_EnableUSBHSTranceiverSupply+0x2e>
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	46020800 	.word	0x46020800

080022e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08e      	sub	sp, #56	@ 0x38
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d102      	bne.n	8002302 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f000 bec8 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002302:	4b99      	ldr	r3, [pc, #612]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800230c:	4b96      	ldr	r3, [pc, #600]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0310 	and.w	r3, r3, #16
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 816c 	beq.w	80025fc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <HAL_RCC_OscConfig+0x52>
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	2b0c      	cmp	r3, #12
 800232e:	f040 80de 	bne.w	80024ee <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002334:	2b01      	cmp	r3, #1
 8002336:	f040 80da 	bne.w	80024ee <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f000 bea5 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800234c:	4b86      	ldr	r3, [pc, #536]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <HAL_RCC_OscConfig+0x7a>
 8002358:	4b83      	ldr	r3, [pc, #524]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002360:	e005      	b.n	800236e <HAL_RCC_OscConfig+0x86>
 8002362:	4b81      	ldr	r3, [pc, #516]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002364:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800236e:	4293      	cmp	r3, r2
 8002370:	d255      	bcs.n	800241e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f99d 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f000 be82 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800238e:	4b76      	ldr	r3, [pc, #472]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4a75      	ldr	r2, [pc, #468]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002394:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002398:	6093      	str	r3, [r2, #8]
 800239a:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	4970      	ldr	r1, [pc, #448]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80023b4:	d309      	bcc.n	80023ca <HAL_RCC_OscConfig+0xe2>
 80023b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f023 021f 	bic.w	r2, r3, #31
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4969      	ldr	r1, [pc, #420]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60cb      	str	r3, [r1, #12]
 80023c8:	e07e      	b.n	80024c8 <HAL_RCC_OscConfig+0x1e0>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	da0a      	bge.n	80023e8 <HAL_RCC_OscConfig+0x100>
 80023d2:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	4961      	ldr	r1, [pc, #388]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60cb      	str	r3, [r1, #12]
 80023e6:	e06f      	b.n	80024c8 <HAL_RCC_OscConfig+0x1e0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f0:	d30a      	bcc.n	8002408 <HAL_RCC_OscConfig+0x120>
 80023f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	029b      	lsls	r3, r3, #10
 8002400:	4959      	ldr	r1, [pc, #356]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002402:	4313      	orrs	r3, r2
 8002404:	60cb      	str	r3, [r1, #12]
 8002406:	e05f      	b.n	80024c8 <HAL_RCC_OscConfig+0x1e0>
 8002408:	4b57      	ldr	r3, [pc, #348]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	03db      	lsls	r3, r3, #15
 8002416:	4954      	ldr	r1, [pc, #336]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002418:	4313      	orrs	r3, r2
 800241a:	60cb      	str	r3, [r1, #12]
 800241c:	e054      	b.n	80024c8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800241e:	4b52      	ldr	r3, [pc, #328]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	4a51      	ldr	r2, [pc, #324]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002424:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002428:	6093      	str	r3, [r2, #8]
 800242a:	4b4f      	ldr	r3, [pc, #316]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	494c      	ldr	r1, [pc, #304]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002444:	d309      	bcc.n	800245a <HAL_RCC_OscConfig+0x172>
 8002446:	4b48      	ldr	r3, [pc, #288]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f023 021f 	bic.w	r2, r3, #31
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4945      	ldr	r1, [pc, #276]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002454:	4313      	orrs	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
 8002458:	e028      	b.n	80024ac <HAL_RCC_OscConfig+0x1c4>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	2b00      	cmp	r3, #0
 8002460:	da0a      	bge.n	8002478 <HAL_RCC_OscConfig+0x190>
 8002462:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	015b      	lsls	r3, r3, #5
 8002470:	493d      	ldr	r1, [pc, #244]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002472:	4313      	orrs	r3, r2
 8002474:	60cb      	str	r3, [r1, #12]
 8002476:	e019      	b.n	80024ac <HAL_RCC_OscConfig+0x1c4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002480:	d30a      	bcc.n	8002498 <HAL_RCC_OscConfig+0x1b0>
 8002482:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	029b      	lsls	r3, r3, #10
 8002490:	4935      	ldr	r1, [pc, #212]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002492:	4313      	orrs	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]
 8002496:	e009      	b.n	80024ac <HAL_RCC_OscConfig+0x1c4>
 8002498:	4b33      	ldr	r3, [pc, #204]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	03db      	lsls	r3, r3, #15
 80024a6:	4930      	ldr	r1, [pc, #192]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80024ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 f900 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f000 bde5 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80024c8:	f001 f8de 	bl	8003688 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024cc:	4b27      	ldr	r3, [pc, #156]	@ (800256c <HAL_RCC_OscConfig+0x284>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe f91b 	bl	800070c <HAL_InitTick>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80024dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 808a 	beq.w	80025fa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80024e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024ea:	f000 bdd2 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69db      	ldr	r3, [r3, #28]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d066      	beq.n	80025c4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002502:	f7fe f98d 	bl	8000820 <HAL_GetTick>
 8002506:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8002508:	e009      	b.n	800251e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800250a:	f7fe f989 	bl	8000820 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d902      	bls.n	800251e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	f000 bdba 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800251e:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0ef      	beq.n	800250a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800252a:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	4a0e      	ldr	r2, [pc, #56]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002530:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002534:	6093      	str	r3, [r2, #8]
 8002536:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	4909      	ldr	r1, [pc, #36]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002550:	d30e      	bcc.n	8002570 <HAL_RCC_OscConfig+0x288>
 8002552:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f023 021f 	bic.w	r2, r3, #31
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4902      	ldr	r1, [pc, #8]	@ (8002568 <HAL_RCC_OscConfig+0x280>)
 8002560:	4313      	orrs	r3, r2
 8002562:	60cb      	str	r3, [r1, #12]
 8002564:	e04a      	b.n	80025fc <HAL_RCC_OscConfig+0x314>
 8002566:	bf00      	nop
 8002568:	46020c00 	.word	0x46020c00
 800256c:	20000004 	.word	0x20000004
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002574:	2b00      	cmp	r3, #0
 8002576:	da0a      	bge.n	800258e <HAL_RCC_OscConfig+0x2a6>
 8002578:	4b98      	ldr	r3, [pc, #608]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	015b      	lsls	r3, r3, #5
 8002586:	4995      	ldr	r1, [pc, #596]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
 800258c:	e036      	b.n	80025fc <HAL_RCC_OscConfig+0x314>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002596:	d30a      	bcc.n	80025ae <HAL_RCC_OscConfig+0x2c6>
 8002598:	4b90      	ldr	r3, [pc, #576]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	498d      	ldr	r1, [pc, #564]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60cb      	str	r3, [r1, #12]
 80025ac:	e026      	b.n	80025fc <HAL_RCC_OscConfig+0x314>
 80025ae:	4b8b      	ldr	r3, [pc, #556]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	03db      	lsls	r3, r3, #15
 80025bc:	4987      	ldr	r1, [pc, #540]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]
 80025c2:	e01b      	b.n	80025fc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80025c4:	4b85      	ldr	r3, [pc, #532]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a84      	ldr	r2, [pc, #528]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80025d0:	f7fe f926 	bl	8000820 <HAL_GetTick>
 80025d4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025d6:	e009      	b.n	80025ec <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025d8:	f7fe f922 	bl	8000820 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d902      	bls.n	80025ec <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	f000 bd53 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80025ec:	4b7b      	ldr	r3, [pc, #492]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1ef      	bne.n	80025d8 <HAL_RCC_OscConfig+0x2f0>
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80025fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 808b 	beq.w	8002720 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800260a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260c:	2b08      	cmp	r3, #8
 800260e:	d005      	beq.n	800261c <HAL_RCC_OscConfig+0x334>
 8002610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d109      	bne.n	800262a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002618:	2b03      	cmp	r3, #3
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d17d      	bne.n	8002720 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	f000 bd34 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x35a>
 8002634:	4b69      	ldr	r3, [pc, #420]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a68      	ldr	r2, [pc, #416]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e041      	b.n	80026c6 <HAL_RCC_OscConfig+0x3de>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264a:	d112      	bne.n	8002672 <HAL_RCC_OscConfig+0x38a>
 800264c:	4b63      	ldr	r3, [pc, #396]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a62      	ldr	r2, [pc, #392]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b60      	ldr	r3, [pc, #384]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5f      	ldr	r2, [pc, #380]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b5d      	ldr	r3, [pc, #372]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a5c      	ldr	r2, [pc, #368]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e029      	b.n	80026c6 <HAL_RCC_OscConfig+0x3de>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800267a:	d112      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3ba>
 800267c:	4b57      	ldr	r3, [pc, #348]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a56      	ldr	r2, [pc, #344]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002682:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b54      	ldr	r3, [pc, #336]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a53      	ldr	r2, [pc, #332]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800268e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b51      	ldr	r3, [pc, #324]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a50      	ldr	r2, [pc, #320]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	e011      	b.n	80026c6 <HAL_RCC_OscConfig+0x3de>
 80026a2:	4b4e      	ldr	r3, [pc, #312]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a4d      	ldr	r2, [pc, #308]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b4b      	ldr	r3, [pc, #300]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a4a      	ldr	r2, [pc, #296]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b48      	ldr	r3, [pc, #288]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a47      	ldr	r2, [pc, #284]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80026c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d014      	beq.n	80026f8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80026ce:	f7fe f8a7 	bl	8000820 <HAL_GetTick>
 80026d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d4:	e009      	b.n	80026ea <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d6:	f7fe f8a3 	bl	8000820 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b64      	cmp	r3, #100	@ 0x64
 80026e2:	d902      	bls.n	80026ea <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	f000 bcd4 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ea:	4b3c      	ldr	r3, [pc, #240]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0ef      	beq.n	80026d6 <HAL_RCC_OscConfig+0x3ee>
 80026f6:	e013      	b.n	8002720 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80026f8:	f7fe f892 	bl	8000820 <HAL_GetTick>
 80026fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fe:	e009      	b.n	8002714 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe f88e 	bl	8000820 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	@ 0x64
 800270c:	d902      	bls.n	8002714 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	f000 bcbf 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002714:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1ef      	bne.n	8002700 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05f      	beq.n	80027ec <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	2b04      	cmp	r3, #4
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x456>
 8002732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d114      	bne.n	8002762 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800273a:	2b02      	cmp	r3, #2
 800273c:	d111      	bne.n	8002762 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f000 bca3 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	041b      	lsls	r3, r3, #16
 800275a:	4920      	ldr	r1, [pc, #128]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002760:	e044      	b.n	80027ec <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d024      	beq.n	80027b4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800276a:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1b      	ldr	r2, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002774:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002776:	f7fe f853 	bl	8000820 <HAL_GetTick>
 800277a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800277c:	e009      	b.n	8002792 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277e:	f7fe f84f 	bl	8000820 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d902      	bls.n	8002792 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	f000 bc80 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002792:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0ef      	beq.n	800277e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	490b      	ldr	r1, [pc, #44]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	610b      	str	r3, [r1, #16]
 80027b2:	e01b      	b.n	80027ec <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80027b4:	4b09      	ldr	r3, [pc, #36]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a08      	ldr	r2, [pc, #32]	@ (80027dc <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80027c0:	f7fe f82e 	bl	8000820 <HAL_GetTick>
 80027c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c6:	e00b      	b.n	80027e0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c8:	f7fe f82a 	bl	8000820 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d904      	bls.n	80027e0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	f000 bc5b 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
 80027dc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e0:	4baf      	ldr	r3, [pc, #700]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ed      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80c8 	beq.w	800298a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002800:	4ba7      	ldr	r3, [pc, #668]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d111      	bne.n	8002832 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4ba4      	ldr	r3, [pc, #656]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002814:	4aa2      	ldr	r2, [pc, #648]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002816:	f043 0304 	orr.w	r3, r3, #4
 800281a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800281e:	4ba0      	ldr	r3, [pc, #640]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002820:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800282c:	2301      	movs	r3, #1
 800282e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002832:	4b9c      	ldr	r3, [pc, #624]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 8002834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800283e:	4b99      	ldr	r3, [pc, #612]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 8002840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002842:	4a98      	ldr	r2, [pc, #608]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284a:	f7fd ffe9 	bl	8000820 <HAL_GetTick>
 800284e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002852:	f7fd ffe5 	bl	8000820 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d902      	bls.n	8002866 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	f000 bc16 	b.w	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002866:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 8002868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0ef      	beq.n	8002852 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d05f      	beq.n	800293a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800287a:	4b89      	ldr	r3, [pc, #548]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 800287c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002880:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288c:	429a      	cmp	r2, r3
 800288e:	d037      	beq.n	8002900 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e3f4      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d01b      	beq.n	80028ea <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80028b2:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80028b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b8:	4a79      	ldr	r2, [pc, #484]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80028ba:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80028be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80028c2:	f7fd ffad 	bl	8000820 <HAL_GetTick>
 80028c6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ca:	f7fd ffa9 	bl	8000820 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e3da      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80028dc:	4b70      	ldr	r3, [pc, #448]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80028de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1ef      	bne.n	80028ca <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80028ea:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80028ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4969      	ldr	r1, [pc, #420]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8002900:	4b67      	ldr	r3, [pc, #412]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002906:	4a66      	ldr	r2, [pc, #408]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002908:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800290c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8002910:	f7fd ff86 	bl	8000820 <HAL_GetTick>
 8002914:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7fd ff82 	bl	8000820 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b05      	cmp	r3, #5
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e3b3      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800292a:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 800292c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0ef      	beq.n	8002918 <HAL_RCC_OscConfig+0x630>
 8002938:	e01b      	b.n	8002972 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800293a:	4b59      	ldr	r3, [pc, #356]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 800293c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002940:	4a57      	ldr	r2, [pc, #348]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002942:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8002946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800294a:	f7fd ff69 	bl	8000820 <HAL_GetTick>
 800294e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002952:	f7fd ff65 	bl	8000820 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b05      	cmp	r3, #5
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e396      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002964:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800296a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ef      	bne.n	8002952 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002972:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b49      	ldr	r3, [pc, #292]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 800297c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002980:	4a47      	ldr	r2, [pc, #284]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8111 	beq.w	8002bba <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299e:	4b40      	ldr	r3, [pc, #256]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80029a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d111      	bne.n	80029d0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80029ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b2:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029bc:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80029ca:	2301      	movs	r3, #1
 80029cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029d0:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 80029d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d118      	bne.n	8002a0e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80029dc:	4b31      	ldr	r3, [pc, #196]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 80029de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e0:	4a30      	ldr	r2, [pc, #192]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e8:	f7fd ff1a 	bl	8000820 <HAL_GetTick>
 80029ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f0:	f7fd ff16 	bl	8000820 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e347      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002a02:	4b28      	ldr	r3, [pc, #160]	@ (8002aa4 <HAL_RCC_OscConfig+0x7bc>)
 8002a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d01f      	beq.n	8002a5a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d010      	beq.n	8002a48 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a36:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a3c:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a46:	e018      	b.n	8002a7a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a48:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a4e:	4a14      	ldr	r2, [pc, #80]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a58:	e00f      	b.n	8002a7a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a60:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a62:	f023 0301 	bic.w	r3, r3, #1
 8002a66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a70:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b8>)
 8002a72:	f023 0304 	bic.w	r3, r3, #4
 8002a76:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d057      	beq.n	8002b32 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8002a82:	f7fd fecd 	bl	8000820 <HAL_GetTick>
 8002a86:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a88:	e00e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fd fec9 	bl	8000820 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d905      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e2f8      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
 8002aa0:	46020c00 	.word	0x46020c00
 8002aa4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa8:	4b9c      	ldr	r3, [pc, #624]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0e9      	beq.n	8002a8a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01b      	beq.n	8002afa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ac2:	4b96      	ldr	r3, [pc, #600]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ac8:	4a94      	ldr	r2, [pc, #592]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ace:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7fd fea4 	bl	8000820 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e2d3      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002aea:	4b8c      	ldr	r3, [pc, #560]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002af0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ed      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x7ec>
 8002af8:	e053      	b.n	8002ba2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002afa:	4b88      	ldr	r3, [pc, #544]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b00:	4a86      	ldr	r2, [pc, #536]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002b02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fd fe88 	bl	8000820 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e2b7      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b22:	4b7e      	ldr	r3, [pc, #504]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1ed      	bne.n	8002b0c <HAL_RCC_OscConfig+0x824>
 8002b30:	e037      	b.n	8002ba2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8002b32:	f7fd fe75 	bl	8000820 <HAL_GetTick>
 8002b36:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b38:	e00a      	b.n	8002b50 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fd fe71 	bl	8000820 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e2a0      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b50:	4b72      	ldr	r3, [pc, #456]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002b52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ed      	bne.n	8002b3a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002b5e:	4b6f      	ldr	r3, [pc, #444]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002b60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d01a      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b6c:	4b6b      	ldr	r3, [pc, #428]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b72:	4a6a      	ldr	r2, [pc, #424]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fd fe4f 	bl	8000820 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e27e      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b94:	4b61      	ldr	r3, [pc, #388]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ed      	bne.n	8002b7e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ba2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b5c      	ldr	r3, [pc, #368]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d036      	beq.n	8002c34 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d019      	beq.n	8002c02 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8002bce:	4b53      	ldr	r3, [pc, #332]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a52      	ldr	r2, [pc, #328]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002bd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bd8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002bda:	f7fd fe21 	bl	8000820 <HAL_GetTick>
 8002bde:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002be2:	f7fd fe1d 	bl	8000820 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e24e      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002bf4:	4b49      	ldr	r3, [pc, #292]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x8fa>
 8002c00:	e018      	b.n	8002c34 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8002c02:	4b46      	ldr	r3, [pc, #280]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a45      	ldr	r2, [pc, #276]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c0c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c0e:	f7fd fe07 	bl	8000820 <HAL_GetTick>
 8002c12:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c16:	f7fd fe03 	bl	8000820 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e234      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002c28:	4b3c      	ldr	r3, [pc, #240]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d036      	beq.n	8002cae <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d019      	beq.n	8002c7c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a33      	ldr	r2, [pc, #204]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c52:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c54:	f7fd fde4 	bl	8000820 <HAL_GetTick>
 8002c58:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c5c:	f7fd fde0 	bl	8000820 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e211      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x974>
 8002c7a:	e018      	b.n	8002cae <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002c7c:	4b27      	ldr	r3, [pc, #156]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a26      	ldr	r2, [pc, #152]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002c82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c86:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002c88:	f7fd fdca 	bl	8000820 <HAL_GetTick>
 8002c8c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002c90:	f7fd fdc6 	bl	8000820 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1f7      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d07f      	beq.n	8002dba <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d062      	beq.n	8002d88 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4a15      	ldr	r2, [pc, #84]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002cc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ccc:	6093      	str	r3, [r2, #8]
 8002cce:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	4910      	ldr	r1, [pc, #64]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002ce8:	d309      	bcc.n	8002cfe <HAL_RCC_OscConfig+0xa16>
 8002cea:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f023 021f 	bic.w	r2, r3, #31
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4909      	ldr	r1, [pc, #36]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
 8002cfc:	e02a      	b.n	8002d54 <HAL_RCC_OscConfig+0xa6c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	da0c      	bge.n	8002d20 <HAL_RCC_OscConfig+0xa38>
 8002d06:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	015b      	lsls	r3, r3, #5
 8002d14:	4901      	ldr	r1, [pc, #4]	@ (8002d1c <HAL_RCC_OscConfig+0xa34>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60cb      	str	r3, [r1, #12]
 8002d1a:	e01b      	b.n	8002d54 <HAL_RCC_OscConfig+0xa6c>
 8002d1c:	46020c00 	.word	0x46020c00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d28:	d30a      	bcc.n	8002d40 <HAL_RCC_OscConfig+0xa58>
 8002d2a:	4ba1      	ldr	r3, [pc, #644]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	029b      	lsls	r3, r3, #10
 8002d38:	499d      	ldr	r1, [pc, #628]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60cb      	str	r3, [r1, #12]
 8002d3e:	e009      	b.n	8002d54 <HAL_RCC_OscConfig+0xa6c>
 8002d40:	4b9b      	ldr	r3, [pc, #620]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	03db      	lsls	r3, r3, #15
 8002d4e:	4998      	ldr	r1, [pc, #608]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002d54:	4b96      	ldr	r3, [pc, #600]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a95      	ldr	r2, [pc, #596]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d5a:	f043 0310 	orr.w	r3, r3, #16
 8002d5e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d60:	f7fd fd5e 	bl	8000820 <HAL_GetTick>
 8002d64:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002d68:	f7fd fd5a 	bl	8000820 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e18b      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0f0      	beq.n	8002d68 <HAL_RCC_OscConfig+0xa80>
 8002d86:	e018      	b.n	8002dba <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002d88:	4b89      	ldr	r3, [pc, #548]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a88      	ldr	r2, [pc, #544]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002d8e:	f023 0310 	bic.w	r3, r3, #16
 8002d92:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002d94:	f7fd fd44 	bl	8000820 <HAL_GetTick>
 8002d98:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002d9c:	f7fd fd40 	bl	8000820 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e171      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002dae:	4b80      	ldr	r3, [pc, #512]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 8166 	beq.w	8003090 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dca:	4b79      	ldr	r3, [pc, #484]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	f000 80f2 	beq.w	8002fbc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	f040 80c5 	bne.w	8002f6c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b73      	ldr	r3, [pc, #460]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a72      	ldr	r2, [pc, #456]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002de8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002dee:	f7fd fd17 	bl	8000820 <HAL_GetTick>
 8002df2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fd fd13 	bl	8000820 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e144      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002e08:	4b69      	ldr	r3, [pc, #420]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e14:	4b66      	ldr	r3, [pc, #408]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d111      	bne.n	8002e46 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	4b63      	ldr	r3, [pc, #396]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e28:	4a61      	ldr	r2, [pc, #388]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e2a:	f043 0304 	orr.w	r3, r3, #4
 8002e2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002e32:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002e46:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb4 <HAL_RCC_OscConfig+0xccc>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002e5a:	4b56      	ldr	r3, [pc, #344]	@ (8002fb4 <HAL_RCC_OscConfig+0xccc>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4a55      	ldr	r2, [pc, #340]	@ (8002fb4 <HAL_RCC_OscConfig+0xccc>)
 8002e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e64:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002e66:	4b52      	ldr	r3, [pc, #328]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e6e:	f023 0303 	bic.w	r3, r3, #3
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e7a:	3a01      	subs	r2, #1
 8002e7c:	0212      	lsls	r2, r2, #8
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002e84:	430a      	orrs	r2, r1
 8002e86:	494a      	ldr	r1, [pc, #296]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e8c:	4b48      	ldr	r3, [pc, #288]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002e8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e90:	4b49      	ldr	r3, [pc, #292]	@ (8002fb8 <HAL_RCC_OscConfig+0xcd0>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ea2:	3a01      	subs	r2, #1
 8002ea4:	0252      	lsls	r2, r2, #9
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	4311      	orrs	r1, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eae:	3a01      	subs	r2, #1
 8002eb0:	0412      	lsls	r2, r2, #16
 8002eb2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	0612      	lsls	r2, r2, #24
 8002ec0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	493a      	ldr	r1, [pc, #232]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002ecc:	4b38      	ldr	r3, [pc, #224]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	4a37      	ldr	r2, [pc, #220]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002ed2:	f023 0310 	bic.w	r3, r3, #16
 8002ed6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	4a34      	ldr	r2, [pc, #208]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002ee2:	4b33      	ldr	r3, [pc, #204]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee6:	4a32      	ldr	r2, [pc, #200]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002ee8:	f043 0310 	orr.w	r3, r3, #16
 8002eec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002eee:	4b30      	ldr	r3, [pc, #192]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef2:	f023 020c 	bic.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	492d      	ldr	r1, [pc, #180]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8002f00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002f08:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb4 <HAL_RCC_OscConfig+0xccc>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	4a29      	ldr	r2, [pc, #164]	@ (8002fb4 <HAL_RCC_OscConfig+0xccc>)
 8002f0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f12:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002f14:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002f1c:	4b24      	ldr	r3, [pc, #144]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f22:	4a23      	ldr	r2, [pc, #140]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f24:	f023 0304 	bic.w	r3, r3, #4
 8002f28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002f2c:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f38:	f7fd fc72 	bl	8000820 <HAL_GetTick>
 8002f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fd fc6e 	bl	8000820 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e09f      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002f52:	4b17      	ldr	r3, [pc, #92]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f5e:	4b14      	ldr	r3, [pc, #80]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	4a13      	ldr	r2, [pc, #76]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f68:	6293      	str	r3, [r2, #40]	@ 0x28
 8002f6a:	e091      	b.n	8003090 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002f6c:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0f      	ldr	r2, [pc, #60]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f76:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002f78:	f7fd fc52 	bl	8000820 <HAL_GetTick>
 8002f7c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f80:	f7fd fc4e 	bl	8000820 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e07f      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002f9e:	4b04      	ldr	r3, [pc, #16]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	4a03      	ldr	r2, [pc, #12]	@ (8002fb0 <HAL_RCC_OscConfig+0xcc8>)
 8002fa4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002fa8:	f023 0303 	bic.w	r3, r3, #3
 8002fac:	6293      	str	r3, [r2, #40]	@ 0x28
 8002fae:	e06f      	b.n	8003090 <HAL_RCC_OscConfig+0xda8>
 8002fb0:	46020c00 	.word	0x46020c00
 8002fb4:	46020800 	.word	0x46020800
 8002fb8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002fbc:	4b37      	ldr	r3, [pc, #220]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fc2:	4b36      	ldr	r3, [pc, #216]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 8002fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d039      	beq.n	8003044 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0203 	and.w	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d132      	bne.n	8003044 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	0a1b      	lsrs	r3, r3, #8
 8002fe2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d129      	bne.n	8003044 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d122      	bne.n	8003044 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003008:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d11a      	bne.n	8003044 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	0a5b      	lsrs	r3, r3, #9
 8003012:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d111      	bne.n	8003044 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	0c1b      	lsrs	r3, r3, #16
 8003024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d108      	bne.n	8003044 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	0e1b      	lsrs	r3, r3, #24
 8003036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d001      	beq.n	8003048 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e024      	b.n	8003092 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003048:	4b14      	ldr	r3, [pc, #80]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 800304a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304c:	08db      	lsrs	r3, r3, #3
 800304e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003056:	429a      	cmp	r2, r3
 8003058:	d01a      	beq.n	8003090 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800305a:	4b10      	ldr	r3, [pc, #64]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	4a0f      	ldr	r2, [pc, #60]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 8003060:	f023 0310 	bic.w	r3, r3, #16
 8003064:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fd fbdb 	bl	8000820 <HAL_GetTick>
 800306a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800306c:	bf00      	nop
 800306e:	f7fd fbd7 	bl	8000820 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	4293      	cmp	r3, r2
 8003078:	d0f9      	beq.n	800306e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307e:	4a07      	ldr	r2, [pc, #28]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003084:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	4a04      	ldr	r2, [pc, #16]	@ (800309c <HAL_RCC_OscConfig+0xdb4>)
 800308a:	f043 0310 	orr.w	r3, r3, #16
 800308e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3738      	adds	r7, #56	@ 0x38
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	46020c00 	.word	0x46020c00

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e1d9      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b9b      	ldr	r3, [pc, #620]	@ (8003324 <HAL_RCC_ClockConfig+0x284>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b98      	ldr	r3, [pc, #608]	@ (8003324 <HAL_RCC_ClockConfig+0x284>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 020f 	bic.w	r2, r3, #15
 80030ca:	4996      	ldr	r1, [pc, #600]	@ (8003324 <HAL_RCC_ClockConfig+0x284>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b94      	ldr	r3, [pc, #592]	@ (8003324 <HAL_RCC_ClockConfig+0x284>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e1c1      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	4b8c      	ldr	r3, [pc, #560]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d908      	bls.n	8003112 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003100:	4b89      	ldr	r3, [pc, #548]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003104:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	4986      	ldr	r1, [pc, #536]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 800310e:	4313      	orrs	r3, r2
 8003110:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	4b81      	ldr	r3, [pc, #516]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800312c:	429a      	cmp	r2, r3
 800312e:	d909      	bls.n	8003144 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003130:	4b7d      	ldr	r3, [pc, #500]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	497a      	ldr	r1, [pc, #488]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003140:	4313      	orrs	r3, r2
 8003142:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d010      	beq.n	8003172 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68da      	ldr	r2, [r3, #12]
 8003154:	4b74      	ldr	r3, [pc, #464]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800315c:	429a      	cmp	r2, r3
 800315e:	d908      	bls.n	8003172 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003160:	4b71      	ldr	r3, [pc, #452]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	496e      	ldr	r1, [pc, #440]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 800316e:	4313      	orrs	r3, r2
 8003170:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d010      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	4b69      	ldr	r3, [pc, #420]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	429a      	cmp	r2, r3
 800318c:	d908      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800318e:	4b66      	ldr	r3, [pc, #408]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 020f 	bic.w	r2, r3, #15
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	4963      	ldr	r1, [pc, #396]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 800319c:	4313      	orrs	r3, r2
 800319e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80d2 	beq.w	8003352 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80031ae:	2300      	movs	r3, #0
 80031b0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d143      	bne.n	8003242 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d110      	bne.n	80031ea <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b57      	ldr	r3, [pc, #348]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 80031ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ce:	4a56      	ldr	r2, [pc, #344]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80031d8:	4b53      	ldr	r3, [pc, #332]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80031e6:	2301      	movs	r3, #1
 80031e8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80031ea:	f7fd fb19 	bl	8000820 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80031f0:	4b4e      	ldr	r3, [pc, #312]	@ (800332c <HAL_RCC_ClockConfig+0x28c>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00f      	beq.n	800321c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80031fc:	e008      	b.n	8003210 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80031fe:	f7fd fb0f 	bl	8000820 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e12b      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003210:	4b46      	ldr	r3, [pc, #280]	@ (800332c <HAL_RCC_ClockConfig+0x28c>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800321c:	7dfb      	ldrb	r3, [r7, #23]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003222:	4b41      	ldr	r3, [pc, #260]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003228:	4a3f      	ldr	r2, [pc, #252]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003232:	4b3d      	ldr	r3, [pc, #244]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d121      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e112      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324a:	4b37      	ldr	r3, [pc, #220]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d115      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e106      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003262:	4b31      	ldr	r3, [pc, #196]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0fa      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003272:	4b2d      	ldr	r3, [pc, #180]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0f2      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b29      	ldr	r3, [pc, #164]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4926      	ldr	r1, [pc, #152]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003290:	4313      	orrs	r3, r2
 8003292:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003294:	f7fd fac4 	bl	8000820 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d112      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fd fabc 	bl	8000820 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e0d6      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d1ee      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x204>
 80032c6:	e044      	b.n	8003352 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d112      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	f7fd faa5 	bl	8000820 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0bf      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d1ee      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x232>
 80032f4:	e02d      	b.n	8003352 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d123      	bne.n	8003346 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fd fa8e 	bl	8000820 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0a8      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_RCC_ClockConfig+0x288>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1ee      	bne.n	8003300 <HAL_RCC_ClockConfig+0x260>
 8003322:	e016      	b.n	8003352 <HAL_RCC_ClockConfig+0x2b2>
 8003324:	40022000 	.word	0x40022000
 8003328:	46020c00 	.word	0x46020c00
 800332c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003330:	f7fd fa76 	bl	8000820 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e090      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003346:	4b4a      	ldr	r3, [pc, #296]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d1ee      	bne.n	8003330 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d010      	beq.n	8003380 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	4b43      	ldr	r3, [pc, #268]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	429a      	cmp	r2, r3
 800336c:	d208      	bcs.n	8003380 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800336e:	4b40      	ldr	r3, [pc, #256]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	f023 020f 	bic.w	r2, r3, #15
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	493d      	ldr	r1, [pc, #244]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 800337c:	4313      	orrs	r3, r2
 800337e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b3c      	ldr	r3, [pc, #240]	@ (8003474 <HAL_RCC_ClockConfig+0x3d4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d210      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b39      	ldr	r3, [pc, #228]	@ (8003474 <HAL_RCC_ClockConfig+0x3d4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 020f 	bic.w	r2, r3, #15
 8003396:	4937      	ldr	r1, [pc, #220]	@ (8003474 <HAL_RCC_ClockConfig+0x3d4>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b35      	ldr	r3, [pc, #212]	@ (8003474 <HAL_RCC_ClockConfig+0x3d4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e05b      	b.n	8003468 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d010      	beq.n	80033de <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d208      	bcs.n	80033de <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80033cc:	4b28      	ldr	r3, [pc, #160]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4925      	ldr	r1, [pc, #148]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d012      	beq.n	8003410 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d209      	bcs.n	8003410 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80033fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	4919      	ldr	r1, [pc, #100]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 800340c:	4313      	orrs	r3, r2
 800340e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d010      	beq.n	800343e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	4b13      	ldr	r3, [pc, #76]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003428:	429a      	cmp	r2, r3
 800342a:	d208      	bcs.n	800343e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800342c:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	490d      	ldr	r1, [pc, #52]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800343e:	f000 f821 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003442:	4602      	mov	r2, r0
 8003444:	4b0a      	ldr	r3, [pc, #40]	@ (8003470 <HAL_RCC_ClockConfig+0x3d0>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	490a      	ldr	r1, [pc, #40]	@ (8003478 <HAL_RCC_ClockConfig+0x3d8>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
 8003454:	4a09      	ldr	r2, [pc, #36]	@ (800347c <HAL_RCC_ClockConfig+0x3dc>)
 8003456:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <HAL_RCC_ClockConfig+0x3e0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f955 	bl	800070c <HAL_InitTick>
 8003462:	4603      	mov	r3, r0
 8003464:	73fb      	strb	r3, [r7, #15]

  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	46020c00 	.word	0x46020c00
 8003474:	40022000 	.word	0x40022000
 8003478:	0800881c 	.word	0x0800881c
 800347c:	20000000 	.word	0x20000000
 8003480:	20000004 	.word	0x20000004

08003484 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003484:	b480      	push	{r7}
 8003486:	b08b      	sub	sp, #44	@ 0x2c
 8003488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4b78      	ldr	r3, [pc, #480]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4b75      	ldr	r3, [pc, #468]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800349e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0x34>
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d121      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d11e      	bne.n	80034f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80034b8:	4b6e      	ldr	r3, [pc, #440]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80034c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034ca:	0b1b      	lsrs	r3, r3, #12
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d2:	e005      	b.n	80034e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80034d4:	4b67      	ldr	r3, [pc, #412]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	0f1b      	lsrs	r3, r3, #28
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034e0:	4a65      	ldr	r2, [pc, #404]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d110      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f4:	e00d      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d102      	bne.n	8003508 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003502:	4b5e      	ldr	r3, [pc, #376]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	e004      	b.n	8003512 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b08      	cmp	r3, #8
 800350c:	d101      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800350e:	4b5b      	ldr	r3, [pc, #364]	@ (800367c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003510:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b0c      	cmp	r3, #12
 8003516:	f040 80a5 	bne.w	8003664 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800351a:	4b56      	ldr	r3, [pc, #344]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800351c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8003524:	4b53      	ldr	r3, [pc, #332]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	0a1b      	lsrs	r3, r3, #8
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003532:	4b50      	ldr	r3, [pc, #320]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800353e:	4b4d      	ldr	r3, [pc, #308]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003542:	08db      	lsrs	r3, r3, #3
 8003544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003556:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d003      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0xe4>
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d022      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x128>
 8003566:	e043      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003572:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003680 <HAL_RCC_GetSysClockFreq+0x1fc>
 8003576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357a:	4b3e      	ldr	r3, [pc, #248]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800357c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800358a:	ed97 6a01 	vldr	s12, [r7, #4]
 800358e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8003684 <HAL_RCC_GetSysClockFreq+0x200>
 8003592:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003596:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800359a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035aa:	e046      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035b6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8003680 <HAL_RCC_GetSysClockFreq+0x1fc>
 80035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035be:	4b2d      	ldr	r3, [pc, #180]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80035c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c6:	ee07 3a90 	vmov	s15, r3
 80035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80035d2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8003684 <HAL_RCC_GetSysClockFreq+0x200>
 80035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80035de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035ee:	e024      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	ee07 3a90 	vmov	s15, r3
 8003600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003604:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003608:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800360a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003618:	ed97 6a01 	vldr	s12, [r7, #4]
 800361c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8003684 <HAL_RCC_GetSysClockFreq+0x200>
 8003620:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003624:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8003628:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800362c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003630:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003634:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003638:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800363a:	4b0e      	ldr	r3, [pc, #56]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800363c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363e:	0e1b      	lsrs	r3, r3, #24
 8003640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003644:	3301      	adds	r3, #1
 8003646:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003652:	edd7 6a07 	vldr	s13, [r7, #28]
 8003656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800365e:	ee17 3a90 	vmov	r3, s15
 8003662:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8003664:	6a3b      	ldr	r3, [r7, #32]
}
 8003666:	4618      	mov	r0, r3
 8003668:	372c      	adds	r7, #44	@ 0x2c
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	46020c00 	.word	0x46020c00
 8003678:	0800882c 	.word	0x0800882c
 800367c:	00f42400 	.word	0x00f42400
 8003680:	4b742400 	.word	0x4b742400
 8003684:	46000000 	.word	0x46000000

08003688 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800368c:	f7ff fefa 	bl	8003484 <HAL_RCC_GetSysClockFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b07      	ldr	r3, [pc, #28]	@ (80036b0 <HAL_RCC_GetHCLKFreq+0x28>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	4906      	ldr	r1, [pc, #24]	@ (80036b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800369c:	5ccb      	ldrb	r3, [r1, r3]
 800369e:	fa22 f303 	lsr.w	r3, r2, r3
 80036a2:	4a05      	ldr	r2, [pc, #20]	@ (80036b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80036a4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80036a6:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80036a8:	681b      	ldr	r3, [r3, #0]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	46020c00 	.word	0x46020c00
 80036b4:	0800881c 	.word	0x0800881c
 80036b8:	20000000 	.word	0x20000000

080036bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036c4:	4b3e      	ldr	r3, [pc, #248]	@ (80037c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036d2:	f7fe fdcd 	bl	8002270 <HAL_PWREx_GetVoltageRange>
 80036d6:	6178      	str	r0, [r7, #20]
 80036d8:	e019      	b.n	800370e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036e0:	4a37      	ldr	r2, [pc, #220]	@ (80037c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80036ea:	4b35      	ldr	r3, [pc, #212]	@ (80037c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80036ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036f8:	f7fe fdba 	bl	8002270 <HAL_PWREx_GetVoltageRange>
 80036fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036fe:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003704:	4a2e      	ldr	r2, [pc, #184]	@ (80037c0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003714:	d003      	beq.n	800371e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800371c:	d109      	bne.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003724:	d202      	bcs.n	800372c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8003726:	2301      	movs	r3, #1
 8003728:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800372a:	e033      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800372c:	2300      	movs	r3, #0
 800372e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8003730:	e030      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003738:	d208      	bcs.n	800374c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003740:	d102      	bne.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8003742:	2303      	movs	r3, #3
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	e025      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e035      	b.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003752:	d90f      	bls.n	8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003760:	d902      	bls.n	8003768 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e015      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8003768:	2301      	movs	r3, #1
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	e012      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e00f      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800377a:	d109      	bne.n	8003790 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003782:	d102      	bne.n	800378a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8003784:	2301      	movs	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	e004      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800378a:	2302      	movs	r3, #2
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	e001      	b.n	8003794 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8003790:	2301      	movs	r3, #1
 8003792:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003794:	4b0b      	ldr	r3, [pc, #44]	@ (80037c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 020f 	bic.w	r2, r3, #15
 800379c:	4909      	ldr	r1, [pc, #36]	@ (80037c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e000      	b.n	80037b8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	46020c00 	.word	0x46020c00
 80037c4:	40022000 	.word	0x40022000

080037c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80037c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037cc:	b0c2      	sub	sp, #264	@ 0x108
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f002 0401 	and.w	r4, r2, #1
 80037ec:	2500      	movs	r5, #0
 80037ee:	ea54 0305 	orrs.w	r3, r4, r5
 80037f2:	d00b      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80037f4:	4bd5      	ldr	r3, [pc, #852]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80037f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037fa:	f023 0103 	bic.w	r1, r3, #3
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003804:	4ad1      	ldr	r2, [pc, #836]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003806:	430b      	orrs	r3, r1
 8003808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800380c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f002 0802 	and.w	r8, r2, #2
 8003818:	f04f 0900 	mov.w	r9, #0
 800381c:	ea58 0309 	orrs.w	r3, r8, r9
 8003820:	d00b      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003822:	4bca      	ldr	r3, [pc, #808]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003828:	f023 010c 	bic.w	r1, r3, #12
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003832:	4ac6      	ldr	r2, [pc, #792]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003834:	430b      	orrs	r3, r1
 8003836:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f002 0a04 	and.w	sl, r2, #4
 8003846:	f04f 0b00 	mov.w	fp, #0
 800384a:	ea5a 030b 	orrs.w	r3, sl, fp
 800384e:	d00b      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003850:	4bbe      	ldr	r3, [pc, #760]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003856:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800385a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	4aba      	ldr	r2, [pc, #744]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003862:	430b      	orrs	r3, r1
 8003864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f002 0308 	and.w	r3, r2, #8
 8003874:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003878:	2300      	movs	r3, #0
 800387a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800387e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003882:	460b      	mov	r3, r1
 8003884:	4313      	orrs	r3, r2
 8003886:	d00b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003888:	4bb0      	ldr	r3, [pc, #704]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800388a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800388e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003898:	4aac      	ldr	r2, [pc, #688]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800389a:	430b      	orrs	r3, r1
 800389c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f002 0310 	and.w	r3, r2, #16
 80038ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038b6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d00b      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80038c0:	4ba2      	ldr	r3, [pc, #648]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d0:	4a9e      	ldr	r2, [pc, #632]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038d2:	430b      	orrs	r3, r1
 80038d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038f2:	460b      	mov	r3, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	d00b      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80038f8:	4b94      	ldr	r3, [pc, #592]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80038fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80038fe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003908:	4a90      	ldr	r2, [pc, #576]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800390a:	430b      	orrs	r3, r1
 800390c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f002 0320 	and.w	r3, r2, #32
 800391c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003926:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800392a:	460b      	mov	r3, r1
 800392c:	4313      	orrs	r3, r2
 800392e:	d00b      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003930:	4b86      	ldr	r3, [pc, #536]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003936:	f023 0107 	bic.w	r1, r3, #7
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003940:	4a82      	ldr	r2, [pc, #520]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003942:	430b      	orrs	r3, r1
 8003944:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003954:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800395e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003962:	460b      	mov	r3, r1
 8003964:	4313      	orrs	r3, r2
 8003966:	d00b      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003968:	4b78      	ldr	r3, [pc, #480]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800396a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800396e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003978:	4a74      	ldr	r2, [pc, #464]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800397a:	430b      	orrs	r3, r1
 800397c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800398c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003990:	2300      	movs	r3, #0
 8003992:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003996:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800399a:	460b      	mov	r3, r1
 800399c:	4313      	orrs	r3, r2
 800399e:	d00b      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80039a0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039b0:	4a66      	ldr	r2, [pc, #408]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80039c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80039ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80039d8:	4b5c      	ldr	r3, [pc, #368]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80039de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039e8:	4a58      	ldr	r2, [pc, #352]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80039ea:	430b      	orrs	r3, r1
 80039ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003a10:	4b4e      	ldr	r3, [pc, #312]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a16:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8003a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a20:	4a4a      	ldr	r2, [pc, #296]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a22:	430b      	orrs	r3, r1
 8003a24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003a34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a3e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d00b      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8003a48:	4b40      	ldr	r3, [pc, #256]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a4e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a58:	4a3c      	ldr	r2, [pc, #240]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003a6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003a76:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	d00c      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8003a80:	4b32      	ldr	r3, [pc, #200]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a82:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003a86:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a92:	4a2e      	ldr	r2, [pc, #184]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003aa6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ab0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	d00c      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003aba:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ac0:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003acc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003ae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003aea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d00c      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003af4:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003afa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b06:	4a11      	ldr	r2, [pc, #68]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8003b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b24:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8003b2e:	4b07      	ldr	r3, [pc, #28]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b34:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b40:	4a02      	ldr	r2, [pc, #8]	@ (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8003b42:	430b      	orrs	r3, r1
 8003b44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b48:	e002      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8003b4a:	bf00      	nop
 8003b4c:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b66:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d04c      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003b78:	2b80      	cmp	r3, #128	@ 0x80
 8003b7a:	d02d      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003b7c:	2b80      	cmp	r3, #128	@ 0x80
 8003b7e:	d827      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b80:	2b60      	cmp	r3, #96	@ 0x60
 8003b82:	d02b      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x414>
 8003b84:	2b60      	cmp	r3, #96	@ 0x60
 8003b86:	d823      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b88:	2b40      	cmp	r3, #64	@ 0x40
 8003b8a:	d006      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003b8c:	2b40      	cmp	r3, #64	@ 0x40
 8003b8e:	d81f      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d009      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d011      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003b98:	e01a      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b9a:	4bbd      	ldr	r3, [pc, #756]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9e:	4abc      	ldr	r2, [pc, #752]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ba6:	e01a      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	3308      	adds	r3, #8
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fca8 	bl	8004504 <RCCEx_PLL2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bba:	e010      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	332c      	adds	r3, #44	@ 0x2c
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fd36 	bl	8004634 <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bce:	e006      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8003bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bde:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10d      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003be6:	4baa      	ldr	r3, [pc, #680]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003be8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003bec:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bf8:	4aa5      	ldr	r2, [pc, #660]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003c00:	e003      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c02:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003c06:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c18:	2300      	movs	r3, #0
 8003c1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c1c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c20:	460b      	mov	r3, r1
 8003c22:	4313      	orrs	r3, r2
 8003c24:	d053      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c32:	d033      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c38:	d82c      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c3e:	d02f      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8003c40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c44:	d826      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8003c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c50:	d820      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5a:	d011      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8003c5c:	e01a      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c5e:	4b8c      	ldr	r3, [pc, #560]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c62:	4a8b      	ldr	r2, [pc, #556]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c68:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c6a:	e01a      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c70:	3308      	adds	r3, #8
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fc46 	bl	8004504 <RCCEx_PLL2_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c7e:	e010      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4da>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	332c      	adds	r3, #44	@ 0x2c
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fcd4 	bl	8004634 <RCCEx_PLL3_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003c92:	e006      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003c9c:	bf00      	nop
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
        break;
 8003ca0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003caa:	4b79      	ldr	r3, [pc, #484]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003cb0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003cbc:	4a74      	ldr	r2, [pc, #464]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003cca:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003cda:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cdc:	2300      	movs	r3, #0
 8003cde:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ce0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	d046      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cf2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cf6:	d028      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003cf8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8003cfc:	d821      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003cfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d02:	d022      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d08:	d81b      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d0e:	d01c      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d14:	d815      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d1a:	d008      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d20:	d80f      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d011      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d2a:	d00e      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003d2c:	e009      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d32:	3308      	adds	r3, #8
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 fbe5 	bl	8004504 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x584>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x584>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003d54:	4b4e      	ldr	r3, [pc, #312]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003d5a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d66:	4a4a      	ldr	r2, [pc, #296]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x5b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003d74:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003d84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d86:	2300      	movs	r3, #0
 8003d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	d03f      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d81e      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x616>
 8003da0:	a201      	add	r2, pc, #4	@ (adr r2, 8003da8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003de7 	.word	0x08003de7
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dcb 	.word	0x08003dcb
 8003db4:	08003de7 	.word	0x08003de7
 8003db8:	08003de7 	.word	0x08003de7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dbc:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	4a33      	ldr	r2, [pc, #204]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003dc8:	e00e      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	332c      	adds	r3, #44	@ 0x2c
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fc2f 	bl	8004634 <RCCEx_PLL3_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003ddc:	e004      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x620>
        break;
 8003de6:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003de8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10d      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003df0:	4b27      	ldr	r3, [pc, #156]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003df2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003df6:	f023 0107 	bic.w	r1, r3, #7
 8003dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e02:	4a23      	ldr	r2, [pc, #140]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e04:	430b      	orrs	r3, r1
 8003e06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e0a:	e003      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003e10:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e22:	2300      	movs	r3, #0
 8003e24:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	d04c      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e3c:	d02a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003e3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e42:	d821      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e48:	d026      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8003e4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e4e:	d81b      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e54:	d00e      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003e56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e5a:	d815      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01d      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d110      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003e72:	e014      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	332c      	adds	r3, #44	@ 0x2c
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fbda 	bl	8004634 <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e86:	e00a      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003e8e:	e006      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003e90:	46020c00 	.word	0x46020c00
        break;
 8003e94:	bf00      	nop
 8003e96:	e002      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
        break;
 8003e9c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003e9e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10d      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8003ea6:	4baf      	ldr	r3, [pc, #700]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003eac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb8:	4aaa      	ldr	r2, [pc, #680]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ec0:	e003      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x702>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003ec6:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ed8:	2300      	movs	r3, #0
 8003eda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003edc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f000 80b5 	beq.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x88a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b9d      	ldr	r3, [pc, #628]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d113      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x75c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efc:	4b99      	ldr	r3, [pc, #612]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f02:	4a98      	ldr	r2, [pc, #608]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003f0c:	4b95      	ldr	r3, [pc, #596]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
      pwrclkchanged = SET;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003f24:	4b90      	ldr	r3, [pc, #576]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	4a8f      	ldr	r2, [pc, #572]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f30:	f7fc fc76 	bl	8000820 <HAL_GetTick>
 8003f34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f38:	e00b      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x78a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fc fc71 	bl	8000820 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d903      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        ret = HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8003f50:	e005      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x796>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003f52:	4b85      	ldr	r3, [pc, #532]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ed      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x772>
      }
    }

    if (ret == HAL_OK)
 8003f5e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d165      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x86a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f66:	4b7f      	ldr	r3, [pc, #508]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d023      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8003f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f8c:	4b75      	ldr	r3, [pc, #468]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f9a:	4b72      	ldr	r3, [pc, #456]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa0:	4a70      	ldr	r2, [pc, #448]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003faa:	4b6e      	ldr	r3, [pc, #440]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb0:	4a6c      	ldr	r2, [pc, #432]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fba:	4a6a      	ldr	r2, [pc, #424]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d019      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x83c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fc fc26 	bl	8000820 <HAL_GetTick>
 8003fd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd8:	e00d      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fda:	f7fc fc21 	bl	8000820 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe4:	1ad2      	subs	r2, r2, r3
 8003fe6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d903      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
          {
            ret = HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
            break;
 8003ff4:	e006      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x83c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ea      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x812>
          }
        }
      }

      if (ret == HAL_OK)
 8004004:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x860>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800400c:	4b55      	ldr	r3, [pc, #340]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800400e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004012:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800401e:	4a51      	ldr	r2, [pc, #324]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004020:	430b      	orrs	r3, r1
 8004022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004026:	e008      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004028:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800402c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 8004030:	e003      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x872>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004032:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004036:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800403a:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x88a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004042:	4b48      	ldr	r3, [pc, #288]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8004044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004048:	4a46      	ldr	r2, [pc, #280]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800404a:	f023 0304 	bic.w	r3, r3, #4
 800404e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800405e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004060:	2300      	movs	r3, #0
 8004062:	657b      	str	r3, [r7, #84]	@ 0x54
 8004064:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d042      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004076:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800407a:	d022      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 800407c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004080:	d81b      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8004082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004086:	d011      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x8e4>
 8004088:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800408c:	d815      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8004092:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004096:	d110      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x8f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	3308      	adds	r3, #8
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fa30 	bl	8004504 <RCCEx_PLL2_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80040aa:	e00d      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	4a2c      	ldr	r2, [pc, #176]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80040b8:	e006      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x900>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80040c0:	e002      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 80040c2:	bf00      	nop
 80040c4:	e000      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x900>
        break;
 80040c6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80040c8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10d      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x924>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80040d0:	4b24      	ldr	r3, [pc, #144]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80040da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040e2:	4a20      	ldr	r2, [pc, #128]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 80040e4:	430b      	orrs	r3, r1
 80040e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80040f0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004102:	2300      	movs	r3, #0
 8004104:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004106:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800410a:	460b      	mov	r3, r1
 800410c:	4313      	orrs	r3, r2
 800410e:	d031      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004118:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800411c:	d00b      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800411e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004122:	d804      	bhi.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800412c:	d007      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x976>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 8004134:	e004      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x978>
        break;
 800413e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004140:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004144:	2b00      	cmp	r3, #0
 8004146:	d111      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x9a4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800414a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800414e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800415a:	4a02      	ldr	r2, [pc, #8]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 800415c:	430b      	orrs	r3, r1
 800415e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004162:	e007      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
 8004164:	46020c00 	.word	0x46020c00
 8004168:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004170:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004180:	643b      	str	r3, [r7, #64]	@ 0x40
 8004182:	2300      	movs	r3, #0
 8004184:	647b      	str	r3, [r7, #68]	@ 0x44
 8004186:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800418a:	460b      	mov	r3, r1
 800418c:	4313      	orrs	r3, r2
 800418e:	d019      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004198:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800419c:	d105      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800419e:	4ba1      	ldr	r3, [pc, #644]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a2:	4aa0      	ldr	r2, [pc, #640]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80041aa:	4b9e      	ldr	r3, [pc, #632]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80041b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041bc:	4a99      	ldr	r2, [pc, #612]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041be:	430b      	orrs	r3, r1
 80041c0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80041d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d2:	2300      	movs	r3, #0
 80041d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041d6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80041da:	460b      	mov	r3, r1
 80041dc:	4313      	orrs	r3, r2
 80041de:	d00c      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80041e0:	4b90      	ldr	r3, [pc, #576]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80041f2:	4a8c      	ldr	r2, [pc, #560]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004206:	633b      	str	r3, [r7, #48]	@ 0x30
 8004208:	2300      	movs	r3, #0
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
 800420c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d00c      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xa68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004216:	4b83      	ldr	r3, [pc, #524]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800421c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004224:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8004228:	4a7e      	ldr	r2, [pc, #504]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800422a:	430b      	orrs	r3, r1
 800422c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800423c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800423e:	2300      	movs	r3, #0
 8004240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004242:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004246:	460b      	mov	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	d00c      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800424c:	4b75      	ldr	r3, [pc, #468]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800424e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004252:	f023 0218 	bic.w	r2, r3, #24
 8004256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800425e:	4971      	ldr	r1, [pc, #452]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004272:	623b      	str	r3, [r7, #32]
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
 8004278:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d032      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xb20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004286:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800428a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004290:	4b64      	ldr	r3, [pc, #400]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	4a63      	ldr	r2, [pc, #396]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042a8:	d108      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	3308      	adds	r3, #8
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f927 	bl	8004504 <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
    }
    if (ret == HAL_OK)
 80042bc:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10d      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80042c4:	4b57      	ldr	r3, [pc, #348]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80042ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80042d6:	4953      	ldr	r1, [pc, #332]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80042de:	e003      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xb20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80042e4:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	2100      	movs	r1, #0
 80042f2:	61b9      	str	r1, [r7, #24]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042fe:	460b      	mov	r3, r1
 8004300:	4313      	orrs	r3, r2
 8004302:	d04a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8004304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004308:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800430c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004310:	d01e      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004312:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004316:	d825      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004318:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800431c:	d00e      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800431e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004322:	d81f      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d021      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004328:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432c:	d11a      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800432e:	4b3d      	ldr	r3, [pc, #244]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004332:	4a3c      	ldr	r2, [pc, #240]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004334:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004338:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800433a:	e018      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	3308      	adds	r3, #8
 8004342:	4618      	mov	r0, r3
 8004344:	f000 f8de 	bl	8004504 <RCCEx_PLL2_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800434e:	e00e      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	332c      	adds	r3, #44	@ 0x2c
 8004356:	4618      	mov	r0, r3
 8004358:	f000 f96c 	bl	8004634 <RCCEx_PLL3_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8004362:	e004      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xba6>

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xba6>
        break;
 800436c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436e:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xbca>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8004376:	4b2b      	ldr	r3, [pc, #172]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 8004378:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800437c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004384:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004388:	4926      	ldr	r1, [pc, #152]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004396:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043b0:	460b      	mov	r3, r1
 80043b2:	4313      	orrs	r3, r2
 80043b4:	d03c      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xc68>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043c2:	d00e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80043c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043c8:	d815      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d017      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80043ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d2:	d110      	bne.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	4a12      	ldr	r2, [pc, #72]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043de:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80043e0:	e00e      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	3308      	adds	r3, #8
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 f88b 	bl	8004504 <RCCEx_PLL2_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80043f4:	e004      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xc38>
      default:
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80043fc:	e000      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        break;
 80043fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004400:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10f      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xc60>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800440a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800440e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800441a:	4902      	ldr	r1, [pc, #8]	@ (8004424 <HAL_RCCEx_PeriphCLKConfig+0xc5c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004422:	e005      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004424:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 800442c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004446:	460b      	mov	r3, r1
 8004448:	4313      	orrs	r3, r2
 800444a:	d00c      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800444c:	4b2c      	ldr	r3, [pc, #176]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800444e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004452:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800445e:	4928      	ldr	r1, [pc, #160]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446e:	2100      	movs	r1, #0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	e9d7 1200 	ldrd	r1, r2, [r7]
 800447c:	460b      	mov	r3, r1
 800447e:	4313      	orrs	r3, r2
 8004480:	d036      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd28>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8004482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004486:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800448a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800448e:	d00d      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004490:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004494:	d811      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 8004496:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800449a:	d012      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 800449c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044a0:	d80b      	bhi.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xcf2>
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00d      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044aa:	d106      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xcf2>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80044ac:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b0:	4a13      	ldr	r2, [pc, #76]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b6:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80044b8:	e004      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

      default:
        ret = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
        break;
 80044c0:	e000      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
        break;
 80044c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80044cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80044d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044da:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80044de:	4908      	ldr	r1, [pc, #32]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80044e6:	e003      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0xd28>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e8:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80044ec:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80044f0:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80044fa:	46bd      	mov	sp, r7
 80044fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004500:	46020c00 	.word	0x46020c00

08004504 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800450c:	4b47      	ldr	r3, [pc, #284]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a46      	ldr	r2, [pc, #280]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 8004512:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004516:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004518:	f7fc f982 	bl	8000820 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800451e:	e008      	b.n	8004532 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004520:	f7fc f97e 	bl	8000820 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b02      	cmp	r3, #2
 800452c:	d901      	bls.n	8004532 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e077      	b.n	8004622 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004532:	4b3e      	ldr	r3, [pc, #248]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800453e:	4b3b      	ldr	r3, [pc, #236]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6852      	ldr	r2, [r2, #4]
 8004552:	3a01      	subs	r2, #1
 8004554:	0212      	lsls	r2, r2, #8
 8004556:	430a      	orrs	r2, r1
 8004558:	4934      	ldr	r1, [pc, #208]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 800455a:	4313      	orrs	r3, r2
 800455c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800455e:	4b33      	ldr	r3, [pc, #204]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 8004560:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004562:	4b33      	ldr	r3, [pc, #204]	@ (8004630 <RCCEx_PLL2_Config+0x12c>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	3a01      	subs	r2, #1
 800456c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68d2      	ldr	r2, [r2, #12]
 8004574:	3a01      	subs	r2, #1
 8004576:	0252      	lsls	r2, r2, #9
 8004578:	b292      	uxth	r2, r2
 800457a:	4311      	orrs	r1, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6912      	ldr	r2, [r2, #16]
 8004580:	3a01      	subs	r2, #1
 8004582:	0412      	lsls	r2, r2, #16
 8004584:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6952      	ldr	r2, [r2, #20]
 800458e:	3a01      	subs	r2, #1
 8004590:	0612      	lsls	r2, r2, #24
 8004592:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004596:	430a      	orrs	r2, r1
 8004598:	4924      	ldr	r1, [pc, #144]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 800459a:	4313      	orrs	r3, r2
 800459c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800459e:	4b23      	ldr	r3, [pc, #140]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a2:	f023 020c 	bic.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	4920      	ldr	r1, [pc, #128]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80045b0:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	491c      	ldr	r1, [pc, #112]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80045be:	4b1b      	ldr	r3, [pc, #108]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c2:	4a1a      	ldr	r2, [pc, #104]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045c4:	f023 0310 	bic.w	r3, r3, #16
 80045c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045ca:	4b18      	ldr	r3, [pc, #96]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045d2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	69d2      	ldr	r2, [r2, #28]
 80045da:	00d2      	lsls	r2, r2, #3
 80045dc:	4913      	ldr	r1, [pc, #76]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80045e2:	4b12      	ldr	r3, [pc, #72]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e6:	4a11      	ldr	r2, [pc, #68]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045e8:	f043 0310 	orr.w	r3, r3, #16
 80045ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80045ee:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a0e      	ldr	r2, [pc, #56]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 80045f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045fa:	f7fc f911 	bl	8000820 <HAL_GetTick>
 80045fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004600:	e008      	b.n	8004614 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004602:	f7fc f90d 	bl	8000820 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e006      	b.n	8004622 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <RCCEx_PLL2_Config+0x128>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004620:	2300      	movs	r3, #0

}
 8004622:	4618      	mov	r0, r3
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	46020c00 	.word	0x46020c00
 8004630:	80800000 	.word	0x80800000

08004634 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800463c:	4b47      	ldr	r3, [pc, #284]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a46      	ldr	r2, [pc, #280]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004646:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004648:	f7fc f8ea 	bl	8000820 <HAL_GetTick>
 800464c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800464e:	e008      	b.n	8004662 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004650:	f7fc f8e6 	bl	8000820 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e077      	b.n	8004752 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004662:	4b3e      	ldr	r3, [pc, #248]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800466e:	4b3b      	ldr	r3, [pc, #236]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004676:	f023 0303 	bic.w	r3, r3, #3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6811      	ldr	r1, [r2, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6852      	ldr	r2, [r2, #4]
 8004682:	3a01      	subs	r2, #1
 8004684:	0212      	lsls	r2, r2, #8
 8004686:	430a      	orrs	r2, r1
 8004688:	4934      	ldr	r1, [pc, #208]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 800468a:	4313      	orrs	r3, r2
 800468c:	630b      	str	r3, [r1, #48]	@ 0x30
 800468e:	4b33      	ldr	r3, [pc, #204]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004692:	4b33      	ldr	r3, [pc, #204]	@ (8004760 <RCCEx_PLL3_Config+0x12c>)
 8004694:	4013      	ands	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6892      	ldr	r2, [r2, #8]
 800469a:	3a01      	subs	r2, #1
 800469c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	68d2      	ldr	r2, [r2, #12]
 80046a4:	3a01      	subs	r2, #1
 80046a6:	0252      	lsls	r2, r2, #9
 80046a8:	b292      	uxth	r2, r2
 80046aa:	4311      	orrs	r1, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6912      	ldr	r2, [r2, #16]
 80046b0:	3a01      	subs	r2, #1
 80046b2:	0412      	lsls	r2, r2, #16
 80046b4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80046b8:	4311      	orrs	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6952      	ldr	r2, [r2, #20]
 80046be:	3a01      	subs	r2, #1
 80046c0:	0612      	lsls	r2, r2, #24
 80046c2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80046c6:	430a      	orrs	r2, r1
 80046c8:	4924      	ldr	r1, [pc, #144]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80046ce:	4b23      	ldr	r3, [pc, #140]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	f023 020c 	bic.w	r2, r3, #12
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	4920      	ldr	r1, [pc, #128]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80046e0:	4b1e      	ldr	r3, [pc, #120]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	491c      	ldr	r1, [pc, #112]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80046ee:	4b1b      	ldr	r3, [pc, #108]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f2:	4a1a      	ldr	r2, [pc, #104]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046f4:	f023 0310 	bic.w	r3, r3, #16
 80046f8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80046fa:	4b18      	ldr	r3, [pc, #96]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 80046fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004702:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	69d2      	ldr	r2, [r2, #28]
 800470a:	00d2      	lsls	r2, r2, #3
 800470c:	4913      	ldr	r1, [pc, #76]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 800470e:	4313      	orrs	r3, r2
 8004710:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004712:	4b12      	ldr	r3, [pc, #72]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	4a11      	ldr	r2, [pc, #68]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004718:	f043 0310 	orr.w	r3, r3, #16
 800471c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800471e:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a0e      	ldr	r2, [pc, #56]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004728:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800472a:	f7fc f879 	bl	8000820 <HAL_GetTick>
 800472e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004730:	e008      	b.n	8004744 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004732:	f7fc f875 	bl	8000820 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e006      	b.n	8004752 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004744:	4b05      	ldr	r3, [pc, #20]	@ (800475c <RCCEx_PLL3_Config+0x128>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	46020c00 	.word	0x46020c00
 8004760:	80800000 	.word	0x80800000

08004764 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004764:	b084      	sub	sp, #16
 8004766:	b580      	push	{r7, lr}
 8004768:	b084      	sub	sp, #16
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	f107 001c 	add.w	r0, r7, #28
 8004772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004776:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800477a:	2b03      	cmp	r3, #3
 800477c:	d105      	bne.n	800478a <USB_CoreInit+0x26>
  {
    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	60da      	str	r2, [r3, #12]
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f001 fad8 	bl	8005d40 <USB_CoreReset>
 8004790:	4603      	mov	r3, r0
 8004792:	73fb      	strb	r3, [r7, #15]

  if (cfg.dma_enable == 1U)
 8004794:	7fbb      	ldrb	r3, [r7, #30]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10b      	bne.n	80047b2 <USB_CoreInit+0x4e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f043 0208 	orr.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f043 0220 	orr.w	r2, r3, #32
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047be:	b004      	add	sp, #16
 80047c0:	4770      	bx	lr
	...

080047c4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d165      	bne.n	80048a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4a41      	ldr	r2, [pc, #260]	@ (80048e0 <USB_SetTurnaroundTime+0x11c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d906      	bls.n	80047ee <USB_SetTurnaroundTime+0x2a>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a40      	ldr	r2, [pc, #256]	@ (80048e4 <USB_SetTurnaroundTime+0x120>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d202      	bcs.n	80047ee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80047e8:	230f      	movs	r3, #15
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e062      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4a3c      	ldr	r2, [pc, #240]	@ (80048e4 <USB_SetTurnaroundTime+0x120>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d306      	bcc.n	8004804 <USB_SetTurnaroundTime+0x40>
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4a3b      	ldr	r2, [pc, #236]	@ (80048e8 <USB_SetTurnaroundTime+0x124>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d202      	bcs.n	8004804 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80047fe:	230e      	movs	r3, #14
 8004800:	617b      	str	r3, [r7, #20]
 8004802:	e057      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4a38      	ldr	r2, [pc, #224]	@ (80048e8 <USB_SetTurnaroundTime+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d306      	bcc.n	800481a <USB_SetTurnaroundTime+0x56>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	4a37      	ldr	r2, [pc, #220]	@ (80048ec <USB_SetTurnaroundTime+0x128>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d202      	bcs.n	800481a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004814:	230d      	movs	r3, #13
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e04c      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4a33      	ldr	r2, [pc, #204]	@ (80048ec <USB_SetTurnaroundTime+0x128>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d306      	bcc.n	8004830 <USB_SetTurnaroundTime+0x6c>
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	4a32      	ldr	r2, [pc, #200]	@ (80048f0 <USB_SetTurnaroundTime+0x12c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d802      	bhi.n	8004830 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800482a:	230c      	movs	r3, #12
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e041      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4a2f      	ldr	r2, [pc, #188]	@ (80048f0 <USB_SetTurnaroundTime+0x12c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d906      	bls.n	8004846 <USB_SetTurnaroundTime+0x82>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4a2e      	ldr	r2, [pc, #184]	@ (80048f4 <USB_SetTurnaroundTime+0x130>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d802      	bhi.n	8004846 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004840:	230b      	movs	r3, #11
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	e036      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a2a      	ldr	r2, [pc, #168]	@ (80048f4 <USB_SetTurnaroundTime+0x130>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d906      	bls.n	800485c <USB_SetTurnaroundTime+0x98>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	4a29      	ldr	r2, [pc, #164]	@ (80048f8 <USB_SetTurnaroundTime+0x134>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d802      	bhi.n	800485c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004856:	230a      	movs	r3, #10
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	e02b      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a26      	ldr	r2, [pc, #152]	@ (80048f8 <USB_SetTurnaroundTime+0x134>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d906      	bls.n	8004872 <USB_SetTurnaroundTime+0xae>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4a25      	ldr	r2, [pc, #148]	@ (80048fc <USB_SetTurnaroundTime+0x138>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d202      	bcs.n	8004872 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800486c:	2309      	movs	r3, #9
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	e020      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a21      	ldr	r2, [pc, #132]	@ (80048fc <USB_SetTurnaroundTime+0x138>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d306      	bcc.n	8004888 <USB_SetTurnaroundTime+0xc4>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4a20      	ldr	r2, [pc, #128]	@ (8004900 <USB_SetTurnaroundTime+0x13c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d802      	bhi.n	8004888 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004882:	2308      	movs	r3, #8
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e015      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <USB_SetTurnaroundTime+0x13c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d906      	bls.n	800489e <USB_SetTurnaroundTime+0xda>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4a1c      	ldr	r2, [pc, #112]	@ (8004904 <USB_SetTurnaroundTime+0x140>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d202      	bcs.n	800489e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004898:	2307      	movs	r3, #7
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e00a      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800489e:	2306      	movs	r3, #6
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e007      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d102      	bne.n	80048b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048aa:	2309      	movs	r3, #9
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	e001      	b.n	80048b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048b0:	2309      	movs	r3, #9
 80048b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	029b      	lsls	r3, r3, #10
 80048c8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80048cc:	431a      	orrs	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	00d8acbf 	.word	0x00d8acbf
 80048e4:	00e4e1c0 	.word	0x00e4e1c0
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	01067380 	.word	0x01067380
 80048f0:	011a499f 	.word	0x011a499f
 80048f4:	01312cff 	.word	0x01312cff
 80048f8:	014ca43f 	.word	0x014ca43f
 80048fc:	016e3600 	.word	0x016e3600
 8004900:	01a6ab1f 	.word	0x01a6ab1f
 8004904:	01e84800 	.word	0x01e84800

08004908 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0201 	bic.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d115      	bne.n	800499a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800497a:	200a      	movs	r0, #10
 800497c:	f7fb ff5c 	bl	8000838 <HAL_Delay>
      ms += 10U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	330a      	adds	r3, #10
 8004984:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 f94b 	bl	8005c22 <USB_GetMode>
 800498c:	4603      	mov	r3, r0
 800498e:	2b01      	cmp	r3, #1
 8004990:	d01e      	beq.n	80049d0 <USB_SetCurrentMode+0x84>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2bc7      	cmp	r3, #199	@ 0xc7
 8004996:	d9f0      	bls.n	800497a <USB_SetCurrentMode+0x2e>
 8004998:	e01a      	b.n	80049d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d115      	bne.n	80049cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7fb ff43 	bl	8000838 <HAL_Delay>
      ms += 10U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	330a      	adds	r3, #10
 80049b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 f932 	bl	8005c22 <USB_GetMode>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <USB_SetCurrentMode+0x84>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80049c8:	d9f0      	bls.n	80049ac <USB_SetCurrentMode+0x60>
 80049ca:	e001      	b.n	80049d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e005      	b.n	80049dc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2bc8      	cmp	r3, #200	@ 0xc8
 80049d4:	d101      	bne.n	80049da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049e4:	b084      	sub	sp, #16
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	e009      	b.n	8004a18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	3340      	adds	r3, #64	@ 0x40
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	2200      	movs	r2, #0
 8004a10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	3301      	adds	r3, #1
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b0e      	cmp	r3, #14
 8004a1c:	d9f2      	bls.n	8004a04 <USB_DevInit+0x20>
  }

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d11c      	bne.n	8004a6c <USB_DevInit+0x88>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a40:	f043 0302 	orr.w	r3, r3, #2
 8004a44:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a56:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	639a      	str	r2, [r3, #56]	@ 0x38
 8004a6a:	e011      	b.n	8004a90 <USB_DevInit+0xac>
  else
  {
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    /* B-peripheral session valid override disable */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	6013      	str	r3, [r2, #0]

#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
  if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004a9c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004aa0:	2b03      	cmp	r3, #3
 8004aa2:	d10d      	bne.n	8004ac0 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d104      	bne.n	8004ab6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004aac:	2100      	movs	r1, #0
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f968 	bl	8004d84 <USB_SetDevSpeed>
 8004ab4:	e008      	b.n	8004ac8 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f963 	bl	8004d84 <USB_SetDevSpeed>
 8004abe:	e003      	b.n	8004ac8 <USB_DevInit+0xe4>
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004ac0:	2103      	movs	r1, #3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f95e 	bl	8004d84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ac8:	2110      	movs	r1, #16
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8fa 	bl	8004cc4 <USB_FlushTxFifo>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f924 	bl	8004d28 <USB_FlushRxFifo>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004af0:	461a      	mov	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004afc:	461a      	mov	r2, r3
 8004afe:	2300      	movs	r3, #0
 8004b00:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e043      	b.n	8004b9c <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b2a:	d118      	bne.n	8004b5e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e013      	b.n	8004b70 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b54:	461a      	mov	r2, r3
 8004b56:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e008      	b.n	8004b70 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	2300      	movs	r3, #0
 8004b80:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b94:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d3b5      	bcc.n	8004b14 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	e043      	b.n	8004c36 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc4:	d118      	bne.n	8004bf8 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e013      	b.n	8004c0a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e008      	b.n	8004c0a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c04:	461a      	mov	r2, r3
 8004c06:	2300      	movs	r3, #0
 8004c08:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	3301      	adds	r3, #1
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d3b5      	bcc.n	8004bae <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c54:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c62:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f043 0210 	orr.w	r2, r3, #16
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699a      	ldr	r2, [r3, #24]
 8004c7c:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <USB_DevInit+0x2dc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c84:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f043 0208 	orr.w	r2, r3, #8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c98:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d107      	bne.n	8004cb0 <USB_DevInit+0x2cc>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ca8:	f043 0304 	orr.w	r3, r3, #4
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4770      	bx	lr
 8004cc0:	803c3800 	.word	0x803c3800

08004cc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cde:	d901      	bls.n	8004ce4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e01b      	b.n	8004d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	daf2      	bge.n	8004cd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	019b      	lsls	r3, r3, #6
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d08:	d901      	bls.n	8004d0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e006      	b.n	8004d1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d0f0      	beq.n	8004cfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d40:	d901      	bls.n	8004d46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e018      	b.n	8004d78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	daf2      	bge.n	8004d34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2210      	movs	r2, #16
 8004d56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d64:	d901      	bls.n	8004d6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e006      	b.n	8004d78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b10      	cmp	r3, #16
 8004d74:	d0f0      	beq.n	8004d58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d76:	2300      	movs	r3, #0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	68f9      	ldr	r1, [r7, #12]
 8004da0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b087      	sub	sp, #28
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 0306 	and.w	r3, r3, #6
 8004dce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]
 8004dda:	e00a      	b.n	8004df2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d002      	beq.n	8004de8 <USB_GetDevSpeed+0x32>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b06      	cmp	r3, #6
 8004de6:	d102      	bne.n	8004dee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004de8:	2302      	movs	r3, #2
 8004dea:	75fb      	strb	r3, [r7, #23]
 8004dec:	e001      	b.n	8004df2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dee:	230f      	movs	r3, #15
 8004df0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	371c      	adds	r7, #28
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	785b      	ldrb	r3, [r3, #1]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d13a      	bne.n	8004e92 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	68f9      	ldr	r1, [r7, #12]
 8004e36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d155      	bne.n	8004f00 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	791b      	ldrb	r3, [r3, #4]
 8004e6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	059b      	lsls	r3, r3, #22
 8004e76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	e036      	b.n	8004f00 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	68f9      	ldr	r1, [r7, #12]
 8004eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d11a      	bne.n	8004f00 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	791b      	ldrb	r3, [r3, #4]
 8004ee4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	0151      	lsls	r1, r2, #5
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	440a      	add	r2, r1
 8004ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004efa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004efe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
	...

08004f10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d161      	bne.n	8004ff0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f42:	d11f      	bne.n	8004f84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	015a      	lsls	r2, r3, #5
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	0151      	lsls	r1, r2, #5
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	440a      	add	r2, r1
 8004f7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f003 030f 	and.w	r3, r3, #15
 8004f94:	2101      	movs	r1, #1
 8004f96:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	43db      	mvns	r3, r3
 8004f9e:	68f9      	ldr	r1, [r7, #12]
 8004fa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fae:	69da      	ldr	r2, [r3, #28]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	2101      	movs	r1, #1
 8004fba:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	68f9      	ldr	r1, [r7, #12]
 8004fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fc8:	4013      	ands	r3, r2
 8004fca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	0159      	lsls	r1, r3, #5
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	440b      	add	r3, r1
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4b35      	ldr	r3, [pc, #212]	@ (80050c0 <USB_DeactivateEndpoint+0x1b0>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
 8004fee:	e060      	b.n	80050b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005002:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005006:	d11f      	bne.n	8005048 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005022:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005026:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005042:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005046:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800504e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	2101      	movs	r1, #1
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	041b      	lsls	r3, r3, #16
 8005060:	43db      	mvns	r3, r3
 8005062:	68f9      	ldr	r1, [r7, #12]
 8005064:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005068:	4013      	ands	r3, r2
 800506a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	2101      	movs	r1, #1
 800507e:	fa01 f303 	lsl.w	r3, r1, r3
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	43db      	mvns	r3, r3
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800508c:	4013      	ands	r3, r2
 800508e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	0159      	lsls	r1, r3, #5
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	440b      	add	r3, r1
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	4619      	mov	r1, r3
 80050ac:	4b05      	ldr	r3, [pc, #20]	@ (80050c4 <USB_DeactivateEndpoint+0x1b4>)
 80050ae:	4013      	ands	r3, r2
 80050b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	ec337800 	.word	0xec337800
 80050c4:	eff37800 	.word	0xeff37800

080050c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08a      	sub	sp, #40	@ 0x28
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	f040 817f 	bne.w	80053e8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d132      	bne.n	8005158 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	0151      	lsls	r1, r2, #5
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	440a      	add	r2, r1
 8005108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800510c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005110:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005114:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	69ba      	ldr	r2, [r7, #24]
 8005126:	0151      	lsls	r1, r2, #5
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	440a      	add	r2, r1
 800512c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005130:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005134:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005150:	0cdb      	lsrs	r3, r3, #19
 8005152:	04db      	lsls	r3, r3, #19
 8005154:	6113      	str	r3, [r2, #16]
 8005156:	e097      	b.n	8005288 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005172:	0cdb      	lsrs	r3, r3, #19
 8005174:	04db      	lsls	r3, r3, #19
 8005176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	0151      	lsls	r1, r2, #5
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	440a      	add	r2, r1
 800518e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005192:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005196:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800519a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d11a      	bne.n	80051d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d903      	bls.n	80051b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051d4:	6113      	str	r3, [r2, #16]
 80051d6:	e044      	b.n	8005262 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	4413      	add	r3, r2
 80051e2:	1e5a      	subs	r2, r3, #1
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	8afb      	ldrh	r3, [r7, #22]
 80051fe:	04d9      	lsls	r1, r3, #19
 8005200:	4ba4      	ldr	r3, [pc, #656]	@ (8005494 <USB_EPStartXfer+0x3cc>)
 8005202:	400b      	ands	r3, r1
 8005204:	69b9      	ldr	r1, [r7, #24]
 8005206:	0148      	lsls	r0, r1, #5
 8005208:	69f9      	ldr	r1, [r7, #28]
 800520a:	4401      	add	r1, r0
 800520c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005210:	4313      	orrs	r3, r2
 8005212:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	791b      	ldrb	r3, [r3, #4]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d122      	bne.n	8005262 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005236:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800523a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	8afb      	ldrh	r3, [r7, #22]
 800524c:	075b      	lsls	r3, r3, #29
 800524e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005252:	69b9      	ldr	r1, [r7, #24]
 8005254:	0148      	lsls	r0, r1, #5
 8005256:	69f9      	ldr	r1, [r7, #28]
 8005258:	4401      	add	r1, r0
 800525a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800525e:	4313      	orrs	r3, r2
 8005260:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005278:	69b9      	ldr	r1, [r7, #24]
 800527a:	0148      	lsls	r0, r1, #5
 800527c:	69f9      	ldr	r1, [r7, #28]
 800527e:	4401      	add	r1, r0
 8005280:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005284:	4313      	orrs	r3, r2
 8005286:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d14b      	bne.n	8005326 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a2:	461a      	mov	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	791b      	ldrb	r3, [r3, #4]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d128      	bne.n	8005304 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d110      	bne.n	80052e4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e00f      	b.n	8005304 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	0151      	lsls	r1, r2, #5
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	440a      	add	r2, r1
 80052fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005302:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800531e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e166      	b.n	80055f4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005340:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005344:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	791b      	ldrb	r3, [r3, #4]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d015      	beq.n	800537a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 814e 	beq.w	80055f4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800535e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f003 030f 	and.w	r3, r3, #15
 8005368:	2101      	movs	r1, #1
 800536a:	fa01 f303 	lsl.w	r3, r1, r3
 800536e:	69f9      	ldr	r1, [r7, #28]
 8005370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005374:	4313      	orrs	r3, r2
 8005376:	634b      	str	r3, [r1, #52]	@ 0x34
 8005378:	e13c      	b.n	80055f4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005386:	2b00      	cmp	r3, #0
 8005388:	d110      	bne.n	80053ac <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	0151      	lsls	r1, r2, #5
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	440a      	add	r2, r1
 80053a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	e00f      	b.n	80053cc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053ca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	68d9      	ldr	r1, [r3, #12]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	781a      	ldrb	r2, [r3, #0]
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	b298      	uxth	r0, r3
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	4603      	mov	r3, r0
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f9b9 	bl	8005758 <USB_WritePacket>
 80053e6:	e105      	b.n	80055f4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	0151      	lsls	r1, r2, #5
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	440a      	add	r2, r1
 80053fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005402:	0cdb      	lsrs	r3, r3, #19
 8005404:	04db      	lsls	r3, r3, #19
 8005406:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	0151      	lsls	r1, r2, #5
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	440a      	add	r2, r1
 800541e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005422:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005426:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800542a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d132      	bne.n	8005498 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005460:	69b9      	ldr	r1, [r7, #24]
 8005462:	0148      	lsls	r0, r1, #5
 8005464:	69f9      	ldr	r1, [r7, #28]
 8005466:	4401      	add	r1, r0
 8005468:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800546c:	4313      	orrs	r3, r2
 800546e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	0151      	lsls	r1, r2, #5
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	440a      	add	r2, r1
 8005486:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800548a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800548e:	6113      	str	r3, [r2, #16]
 8005490:	e062      	b.n	8005558 <USB_EPStartXfer+0x490>
 8005492:	bf00      	nop
 8005494:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d123      	bne.n	80054e8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b6:	69b9      	ldr	r1, [r7, #24]
 80054b8:	0148      	lsls	r0, r1, #5
 80054ba:	69f9      	ldr	r1, [r7, #28]
 80054bc:	4401      	add	r1, r0
 80054be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80054c2:	4313      	orrs	r3, r2
 80054c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054e4:	6113      	str	r3, [r2, #16]
 80054e6:	e037      	b.n	8005558 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	1e5a      	subs	r2, r3, #1
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	8afa      	ldrh	r2, [r7, #22]
 8005504:	fb03 f202 	mul.w	r2, r3, r2
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005518:	691a      	ldr	r2, [r3, #16]
 800551a:	8afb      	ldrh	r3, [r7, #22]
 800551c:	04d9      	lsls	r1, r3, #19
 800551e:	4b38      	ldr	r3, [pc, #224]	@ (8005600 <USB_EPStartXfer+0x538>)
 8005520:	400b      	ands	r3, r1
 8005522:	69b9      	ldr	r1, [r7, #24]
 8005524:	0148      	lsls	r0, r1, #5
 8005526:	69f9      	ldr	r1, [r7, #28]
 8005528:	4401      	add	r1, r0
 800552a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800552e:	4313      	orrs	r3, r2
 8005530:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005548:	69b9      	ldr	r1, [r7, #24]
 800554a:	0148      	lsls	r0, r1, #5
 800554c:	69f9      	ldr	r1, [r7, #28]
 800554e:	4401      	add	r1, r0
 8005550:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005554:	4313      	orrs	r3, r2
 8005556:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005558:	79fb      	ldrb	r3, [r7, #7]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d10d      	bne.n	800557a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d009      	beq.n	800557a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	68d9      	ldr	r1, [r3, #12]
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005576:	460a      	mov	r2, r1
 8005578:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	791b      	ldrb	r3, [r3, #4]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d128      	bne.n	80055d4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d110      	bne.n	80055b4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	e00f      	b.n	80055d4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80055f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	1ff80000 	.word	0x1ff80000

08005604 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d14a      	bne.n	80056b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005636:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800563a:	f040 8086 	bne.w	800574a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	015a      	lsls	r2, r3, #5
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	4413      	add	r3, r2
 8005648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	7812      	ldrb	r2, [r2, #0]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800565c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005660:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	7812      	ldrb	r2, [r2, #0]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005680:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005684:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005692:	4293      	cmp	r3, r2
 8005694:	d902      	bls.n	800569c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	75fb      	strb	r3, [r7, #23]
          break;
 800569a:	e056      	b.n	800574a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b4:	d0e7      	beq.n	8005686 <USB_EPStopXfer+0x82>
 80056b6:	e048      	b.n	800574a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056d0:	d13b      	bne.n	800574a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	7812      	ldrb	r2, [r2, #0]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005714:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005718:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005726:	4293      	cmp	r3, r2
 8005728:	d902      	bls.n	8005730 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	75fb      	strb	r3, [r7, #23]
          break;
 800572e:	e00c      	b.n	800574a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005748:	d0e7      	beq.n	800571a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800574a:	7dfb      	ldrb	r3, [r7, #23]
}
 800574c:	4618      	mov	r0, r3
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005758:	b480      	push	{r7}
 800575a:	b089      	sub	sp, #36	@ 0x24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4611      	mov	r1, r2
 8005764:	461a      	mov	r2, r3
 8005766:	460b      	mov	r3, r1
 8005768:	71fb      	strb	r3, [r7, #7]
 800576a:	4613      	mov	r3, r2
 800576c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005776:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800577a:	2b00      	cmp	r3, #0
 800577c:	d123      	bne.n	80057c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800577e:	88bb      	ldrh	r3, [r7, #4]
 8005780:	3303      	adds	r3, #3
 8005782:	089b      	lsrs	r3, r3, #2
 8005784:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005786:	2300      	movs	r3, #0
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	e018      	b.n	80057be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	031a      	lsls	r2, r3, #12
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005798:	461a      	mov	r2, r3
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	3301      	adds	r3, #1
 80057aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	3301      	adds	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	3301      	adds	r3, #1
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d3e2      	bcc.n	800578c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3724      	adds	r7, #36	@ 0x24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b08b      	sub	sp, #44	@ 0x2c
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057f2:	88fb      	ldrh	r3, [r7, #6]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057fa:	2300      	movs	r3, #0
 80057fc:	623b      	str	r3, [r7, #32]
 80057fe:	e014      	b.n	800582a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	601a      	str	r2, [r3, #0]
    pDest++;
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	3301      	adds	r3, #1
 8005810:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	3301      	adds	r3, #1
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	3301      	adds	r3, #1
 800581c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	3301      	adds	r3, #1
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	3301      	adds	r3, #1
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	6a3a      	ldr	r2, [r7, #32]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	429a      	cmp	r2, r3
 8005830:	d3e6      	bcc.n	8005800 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005832:	8bfb      	ldrh	r3, [r7, #30]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01e      	beq.n	8005876 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005842:	461a      	mov	r2, r3
 8005844:	f107 0310 	add.w	r3, r7, #16
 8005848:	6812      	ldr	r2, [r2, #0]
 800584a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	b2da      	uxtb	r2, r3
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	701a      	strb	r2, [r3, #0]
      i++;
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	3301      	adds	r3, #1
 8005862:	623b      	str	r3, [r7, #32]
      pDest++;
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	3301      	adds	r3, #1
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800586a:	8bfb      	ldrh	r3, [r7, #30]
 800586c:	3b01      	subs	r3, #1
 800586e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005870:	8bfb      	ldrh	r3, [r7, #30]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1ea      	bne.n	800584c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005878:	4618      	mov	r0, r3
 800587a:	372c      	adds	r7, #44	@ 0x2c
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d12c      	bne.n	80058fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	db12      	blt.n	80058d8 <USB_EPSetStall+0x54>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00f      	beq.n	80058d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	e02b      	b.n	8005952 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	db12      	blt.n	8005932 <USB_EPSetStall+0xae>
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00f      	beq.n	8005932 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800592c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005930:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800594c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005950:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d128      	bne.n	80059ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005996:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800599a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	791b      	ldrb	r3, [r3, #4]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d003      	beq.n	80059ac <USB_EPClearStall+0x4c>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	791b      	ldrb	r3, [r3, #4]
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d138      	bne.n	8005a1e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	e027      	b.n	8005a1e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	0151      	lsls	r1, r2, #5
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	440a      	add	r2, r1
 80059e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	791b      	ldrb	r3, [r3, #4]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d003      	beq.n	80059fe <USB_EPClearStall+0x9e>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	791b      	ldrb	r3, [r3, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d10f      	bne.n	8005a1e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a1c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a4a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a4e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	011b      	lsls	r3, r3, #4
 8005a5c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005a60:	68f9      	ldr	r1, [r7, #12]
 8005a62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aa6:	f023 0302 	bic.w	r3, r3, #2
 8005aaa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005ad4:	f023 0303 	bic.w	r3, r3, #3
 8005ad8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b14:	68fb      	ldr	r3, [r7, #12]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b3e:	69db      	ldr	r3, [r3, #28]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	0c1b      	lsrs	r3, r3, #16
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3714      	adds	r7, #20
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	4013      	ands	r3, r2
 8005b78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	b29b      	uxth	r3, r3
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b087      	sub	sp, #28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf6:	01db      	lsls	r3, r3, #7
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c00:	78fb      	ldrb	r3, [r7, #3]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4013      	ands	r3, r2
 8005c12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c14:	68bb      	ldr	r3, [r7, #8]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b085      	sub	sp, #20
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c5c:	f023 0307 	bic.w	r3, r3, #7
 8005c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	333c      	adds	r3, #60	@ 0x3c
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4a26      	ldr	r2, [pc, #152]	@ (8005d3c <USB_EP0_OutStart+0xb8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d90a      	bls.n	8005cbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cb8:	d101      	bne.n	8005cbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	e037      	b.n	8005d2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cec:	f043 0318 	orr.w	r3, r3, #24
 8005cf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d00:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005d04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d10f      	bne.n	8005d2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d12:	461a      	mov	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d26:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005d2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	4f54300a 	.word	0x4f54300a

08005d40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d58:	d901      	bls.n	8005d5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e01b      	b.n	8005d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	daf2      	bge.n	8005d4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f043 0201 	orr.w	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d82:	d901      	bls.n	8005d88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e006      	b.n	8005d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d0f0      	beq.n	8005d76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
	...

08005da4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005db0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005db4:	f002 fc88 	bl	80086c8 <USBD_static_malloc>
 8005db8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32b0      	adds	r2, #176	@ 0xb0
 8005dca:	2100      	movs	r1, #0
 8005dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	e0d4      	b.n	8005f7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dd4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005dd8:	2100      	movs	r1, #0
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f002 fcb8 	bl	8008750 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	32b0      	adds	r2, #176	@ 0xb0
 8005dea:	68f9      	ldr	r1, [r7, #12]
 8005dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	32b0      	adds	r2, #176	@ 0xb0
 8005dfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7c1b      	ldrb	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d138      	bne.n	8005e7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8005f88 <USBD_CDC_Init+0x1e4>)
 8005e0e:	7819      	ldrb	r1, [r3, #0]
 8005e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e14:	2202      	movs	r2, #2
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f002 fb33 	bl	8008482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e1c:	4b5a      	ldr	r3, [pc, #360]	@ (8005f88 <USBD_CDC_Init+0x1e4>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	f003 020f 	and.w	r2, r3, #15
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	3324      	adds	r3, #36	@ 0x24
 8005e32:	2201      	movs	r2, #1
 8005e34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e36:	4b55      	ldr	r3, [pc, #340]	@ (8005f8c <USBD_CDC_Init+0x1e8>)
 8005e38:	7819      	ldrb	r1, [r3, #0]
 8005e3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e3e:	2202      	movs	r2, #2
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f002 fb1e 	bl	8008482 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e46:	4b51      	ldr	r3, [pc, #324]	@ (8005f8c <USBD_CDC_Init+0x1e8>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	6879      	ldr	r1, [r7, #4]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	440b      	add	r3, r1
 8005e5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005e5e:	2201      	movs	r2, #1
 8005e60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e62:	4b4b      	ldr	r3, [pc, #300]	@ (8005f90 <USBD_CDC_Init+0x1ec>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	f003 020f 	and.w	r2, r3, #15
 8005e6a:	6879      	ldr	r1, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	3326      	adds	r3, #38	@ 0x26
 8005e78:	2210      	movs	r2, #16
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	e035      	b.n	8005eea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e7e:	4b42      	ldr	r3, [pc, #264]	@ (8005f88 <USBD_CDC_Init+0x1e4>)
 8005e80:	7819      	ldrb	r1, [r3, #0]
 8005e82:	2340      	movs	r3, #64	@ 0x40
 8005e84:	2202      	movs	r2, #2
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f002 fafb 	bl	8008482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8005f88 <USBD_CDC_Init+0x1e4>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	3324      	adds	r3, #36	@ 0x24
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ea6:	4b39      	ldr	r3, [pc, #228]	@ (8005f8c <USBD_CDC_Init+0x1e8>)
 8005ea8:	7819      	ldrb	r1, [r3, #0]
 8005eaa:	2340      	movs	r3, #64	@ 0x40
 8005eac:	2202      	movs	r2, #2
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f002 fae7 	bl	8008482 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005eb4:	4b35      	ldr	r3, [pc, #212]	@ (8005f8c <USBD_CDC_Init+0x1e8>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ecc:	2201      	movs	r2, #1
 8005ece:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8005f90 <USBD_CDC_Init+0x1ec>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 020f 	and.w	r2, r3, #15
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3326      	adds	r3, #38	@ 0x26
 8005ee6:	2210      	movs	r2, #16
 8005ee8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005eea:	4b29      	ldr	r3, [pc, #164]	@ (8005f90 <USBD_CDC_Init+0x1ec>)
 8005eec:	7819      	ldrb	r1, [r3, #0]
 8005eee:	2308      	movs	r3, #8
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f002 fac5 	bl	8008482 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ef8:	4b25      	ldr	r3, [pc, #148]	@ (8005f90 <USBD_CDC_Init+0x1ec>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 020f 	and.w	r2, r3, #15
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3324      	adds	r3, #36	@ 0x24
 8005f0e:	2201      	movs	r2, #1
 8005f10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	33b0      	adds	r3, #176	@ 0xb0
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e018      	b.n	8005f7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	7c1b      	ldrb	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f54:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <USBD_CDC_Init+0x1e8>)
 8005f56:	7819      	ldrb	r1, [r3, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f002 fb7c 	bl	8008660 <USBD_LL_PrepareReceive>
 8005f68:	e008      	b.n	8005f7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f6a:	4b08      	ldr	r3, [pc, #32]	@ (8005f8c <USBD_CDC_Init+0x1e8>)
 8005f6c:	7819      	ldrb	r1, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f002 fb72 	bl	8008660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3710      	adds	r7, #16
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000093 	.word	0x20000093
 8005f8c:	20000094 	.word	0x20000094
 8005f90:	20000095 	.word	0x20000095

08005f94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800608c <USBD_CDC_DeInit+0xf8>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f002 fa91 	bl	80084ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005fac:	4b37      	ldr	r3, [pc, #220]	@ (800608c <USBD_CDC_DeInit+0xf8>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	3324      	adds	r3, #36	@ 0x24
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005fc6:	4b32      	ldr	r3, [pc, #200]	@ (8006090 <USBD_CDC_DeInit+0xfc>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f002 fa7e 	bl	80084ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006090 <USBD_CDC_DeInit+0xfc>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	f003 020f 	and.w	r2, r3, #15
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005fea:	2200      	movs	r2, #0
 8005fec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fee:	4b29      	ldr	r3, [pc, #164]	@ (8006094 <USBD_CDC_DeInit+0x100>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f002 fa6a 	bl	80084ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ffa:	4b26      	ldr	r3, [pc, #152]	@ (8006094 <USBD_CDC_DeInit+0x100>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	3324      	adds	r3, #36	@ 0x24
 8006010:	2200      	movs	r2, #0
 8006012:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006014:	4b1f      	ldr	r3, [pc, #124]	@ (8006094 <USBD_CDC_DeInit+0x100>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 020f 	and.w	r2, r3, #15
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	3326      	adds	r3, #38	@ 0x26
 800602a:	2200      	movs	r2, #0
 800602c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	32b0      	adds	r2, #176	@ 0xb0
 8006038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01f      	beq.n	8006080 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	33b0      	adds	r3, #176	@ 0xb0
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	32b0      	adds	r2, #176	@ 0xb0
 800605e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006062:	4618      	mov	r0, r3
 8006064:	f002 fb3e 	bl	80086e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	32b0      	adds	r2, #176	@ 0xb0
 8006072:	2100      	movs	r1, #0
 8006074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000093 	.word	0x20000093
 8006090:	20000094 	.word	0x20000094
 8006094:	20000095 	.word	0x20000095

08006098 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	32b0      	adds	r2, #176	@ 0xb0
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e0bf      	b.n	8006248 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d050      	beq.n	8006176 <USBD_CDC_Setup+0xde>
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	f040 80af 	bne.w	8006238 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	88db      	ldrh	r3, [r3, #6]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d03a      	beq.n	8006158 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	da1b      	bge.n	8006124 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	33b0      	adds	r3, #176	@ 0xb0
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006102:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	88d2      	ldrh	r2, [r2, #6]
 8006108:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	88db      	ldrh	r3, [r3, #6]
 800610e:	2b07      	cmp	r3, #7
 8006110:	bf28      	it	cs
 8006112:	2307      	movcs	r3, #7
 8006114:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	89fa      	ldrh	r2, [r7, #14]
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fdbd 	bl	8007c9c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006122:	e090      	b.n	8006246 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	785a      	ldrb	r2, [r3, #1]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	88db      	ldrh	r3, [r3, #6]
 8006132:	2b3f      	cmp	r3, #63	@ 0x3f
 8006134:	d803      	bhi.n	800613e <USBD_CDC_Setup+0xa6>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	88db      	ldrh	r3, [r3, #6]
 800613a:	b2da      	uxtb	r2, r3
 800613c:	e000      	b.n	8006140 <USBD_CDC_Setup+0xa8>
 800613e:	2240      	movs	r2, #64	@ 0x40
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006146:	6939      	ldr	r1, [r7, #16]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800614e:	461a      	mov	r2, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fdcf 	bl	8007cf4 <USBD_CtlPrepareRx>
      break;
 8006156:	e076      	b.n	8006246 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	33b0      	adds	r3, #176	@ 0xb0
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	7850      	ldrb	r0, [r2, #1]
 800616e:	2200      	movs	r2, #0
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	4798      	blx	r3
      break;
 8006174:	e067      	b.n	8006246 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	2b0b      	cmp	r3, #11
 800617c:	d851      	bhi.n	8006222 <USBD_CDC_Setup+0x18a>
 800617e:	a201      	add	r2, pc, #4	@ (adr r2, 8006184 <USBD_CDC_Setup+0xec>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061b5 	.word	0x080061b5
 8006188:	08006231 	.word	0x08006231
 800618c:	08006223 	.word	0x08006223
 8006190:	08006223 	.word	0x08006223
 8006194:	08006223 	.word	0x08006223
 8006198:	08006223 	.word	0x08006223
 800619c:	08006223 	.word	0x08006223
 80061a0:	08006223 	.word	0x08006223
 80061a4:	08006223 	.word	0x08006223
 80061a8:	08006223 	.word	0x08006223
 80061ac:	080061df 	.word	0x080061df
 80061b0:	08006209 	.word	0x08006209
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b03      	cmp	r3, #3
 80061be:	d107      	bne.n	80061d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80061c0:	f107 030a 	add.w	r3, r7, #10
 80061c4:	2202      	movs	r2, #2
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fd67 	bl	8007c9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061ce:	e032      	b.n	8006236 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061d0:	6839      	ldr	r1, [r7, #0]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f001 fce5 	bl	8007ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	75fb      	strb	r3, [r7, #23]
          break;
 80061dc:	e02b      	b.n	8006236 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d107      	bne.n	80061fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061ea:	f107 030d 	add.w	r3, r7, #13
 80061ee:	2201      	movs	r2, #1
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f001 fd52 	bl	8007c9c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061f8:	e01d      	b.n	8006236 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fcd0 	bl	8007ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006202:	2303      	movs	r3, #3
 8006204:	75fb      	strb	r3, [r7, #23]
          break;
 8006206:	e016      	b.n	8006236 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b03      	cmp	r3, #3
 8006212:	d00f      	beq.n	8006234 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f001 fcc3 	bl	8007ba2 <USBD_CtlError>
            ret = USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006220:	e008      	b.n	8006234 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 fcbc 	bl	8007ba2 <USBD_CtlError>
          ret = USBD_FAIL;
 800622a:	2303      	movs	r3, #3
 800622c:	75fb      	strb	r3, [r7, #23]
          break;
 800622e:	e002      	b.n	8006236 <USBD_CDC_Setup+0x19e>
          break;
 8006230:	bf00      	nop
 8006232:	e008      	b.n	8006246 <USBD_CDC_Setup+0x1ae>
          break;
 8006234:	bf00      	nop
      }
      break;
 8006236:	e006      	b.n	8006246 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 fcb1 	bl	8007ba2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006240:	2303      	movs	r3, #3
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	bf00      	nop
  }

  return (uint8_t)ret;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006262:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	32b0      	adds	r2, #176	@ 0xb0
 800626e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006276:	2303      	movs	r3, #3
 8006278:	e065      	b.n	8006346 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	32b0      	adds	r2, #176	@ 0xb0
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	3318      	adds	r3, #24
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d02f      	beq.n	8006304 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	f003 020f 	and.w	r2, r3, #15
 80062aa:	6879      	ldr	r1, [r7, #4]
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	440b      	add	r3, r1
 80062b6:	3318      	adds	r3, #24
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	f003 010f 	and.w	r1, r3, #15
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	460b      	mov	r3, r1
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	440b      	add	r3, r1
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4403      	add	r3, r0
 80062cc:	331c      	adds	r3, #28
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80062d4:	fb01 f303 	mul.w	r3, r1, r3
 80062d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d112      	bne.n	8006304 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 020f 	and.w	r2, r3, #15
 80062e4:	6879      	ldr	r1, [r7, #4]
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	440b      	add	r3, r1
 80062f0:	3318      	adds	r3, #24
 80062f2:	2200      	movs	r2, #0
 80062f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062f6:	78f9      	ldrb	r1, [r7, #3]
 80062f8:	2300      	movs	r3, #0
 80062fa:	2200      	movs	r2, #0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f002 f98e 	bl	800861e <USBD_LL_Transmit>
 8006302:	e01f      	b.n	8006344 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	33b0      	adds	r3, #176	@ 0xb0
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	33b0      	adds	r3, #176	@ 0xb0
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006340:	78fa      	ldrb	r2, [r7, #3]
 8006342:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b084      	sub	sp, #16
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	460b      	mov	r3, r1
 8006358:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	32b0      	adds	r2, #176	@ 0xb0
 8006364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006368:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	32b0      	adds	r2, #176	@ 0xb0
 8006374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800637c:	2303      	movs	r3, #3
 800637e:	e01a      	b.n	80063b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f002 f98c 	bl	80086a2 <USBD_LL_GetRxDataSize>
 800638a:	4602      	mov	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	33b0      	adds	r3, #176	@ 0xb0
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80063b0:	4611      	mov	r1, r2
 80063b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b084      	sub	sp, #16
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	32b0      	adds	r2, #176	@ 0xb0
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e024      	b.n	800642a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	33b0      	adds	r3, #176	@ 0xb0
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d019      	beq.n	8006428 <USBD_CDC_EP0_RxReady+0x6a>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80063fa:	2bff      	cmp	r3, #255	@ 0xff
 80063fc:	d014      	beq.n	8006428 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	33b0      	adds	r3, #176	@ 0xb0
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006416:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800641e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	22ff      	movs	r2, #255	@ 0xff
 8006424:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800643c:	2182      	movs	r1, #130	@ 0x82
 800643e:	4818      	ldr	r0, [pc, #96]	@ (80064a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006440:	f000 fd4f 	bl	8006ee2 <USBD_GetEpDesc>
 8006444:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006446:	2101      	movs	r1, #1
 8006448:	4815      	ldr	r0, [pc, #84]	@ (80064a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800644a:	f000 fd4a 	bl	8006ee2 <USBD_GetEpDesc>
 800644e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006450:	2181      	movs	r1, #129	@ 0x81
 8006452:	4813      	ldr	r0, [pc, #76]	@ (80064a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006454:	f000 fd45 	bl	8006ee2 <USBD_GetEpDesc>
 8006458:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2210      	movs	r2, #16
 8006464:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	2200      	movs	r2, #0
 8006470:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006474:	711a      	strb	r2, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d006      	beq.n	800648e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006488:	711a      	strb	r2, [r3, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2243      	movs	r2, #67	@ 0x43
 8006492:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006494:	4b02      	ldr	r3, [pc, #8]	@ (80064a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000050 	.word	0x20000050

080064a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064ac:	2182      	movs	r1, #130	@ 0x82
 80064ae:	4818      	ldr	r0, [pc, #96]	@ (8006510 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064b0:	f000 fd17 	bl	8006ee2 <USBD_GetEpDesc>
 80064b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064b6:	2101      	movs	r1, #1
 80064b8:	4815      	ldr	r0, [pc, #84]	@ (8006510 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064ba:	f000 fd12 	bl	8006ee2 <USBD_GetEpDesc>
 80064be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064c0:	2181      	movs	r1, #129	@ 0x81
 80064c2:	4813      	ldr	r0, [pc, #76]	@ (8006510 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80064c4:	f000 fd0d 	bl	8006ee2 <USBD_GetEpDesc>
 80064c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2210      	movs	r2, #16
 80064d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2200      	movs	r2, #0
 80064e0:	711a      	strb	r2, [r3, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f042 0202 	orr.w	r2, r2, #2
 80064e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d006      	beq.n	80064fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	711a      	strb	r2, [r3, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f042 0202 	orr.w	r2, r2, #2
 80064fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2243      	movs	r2, #67	@ 0x43
 8006502:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006504:	4b02      	ldr	r3, [pc, #8]	@ (8006510 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000050 	.word	0x20000050

08006514 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800651c:	2182      	movs	r1, #130	@ 0x82
 800651e:	4818      	ldr	r0, [pc, #96]	@ (8006580 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006520:	f000 fcdf 	bl	8006ee2 <USBD_GetEpDesc>
 8006524:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006526:	2101      	movs	r1, #1
 8006528:	4815      	ldr	r0, [pc, #84]	@ (8006580 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800652a:	f000 fcda 	bl	8006ee2 <USBD_GetEpDesc>
 800652e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006530:	2181      	movs	r1, #129	@ 0x81
 8006532:	4813      	ldr	r0, [pc, #76]	@ (8006580 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006534:	f000 fcd5 	bl	8006ee2 <USBD_GetEpDesc>
 8006538:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2210      	movs	r2, #16
 8006544:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d006      	beq.n	800655a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2200      	movs	r2, #0
 8006550:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006554:	711a      	strb	r2, [r3, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d006      	beq.n	800656e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006568:	711a      	strb	r2, [r3, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2243      	movs	r2, #67	@ 0x43
 8006572:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006574:	4b02      	ldr	r3, [pc, #8]	@ (8006580 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000050 	.word	0x20000050

08006584 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	220a      	movs	r2, #10
 8006590:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006592:	4b03      	ldr	r3, [pc, #12]	@ (80065a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	2000000c 	.word	0x2000000c

080065a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e009      	b.n	80065cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	33b0      	adds	r3, #176	@ 0xb0
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	32b0      	adds	r2, #176	@ 0xb0
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e008      	b.n	8006610 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	371c      	adds	r7, #28
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	32b0      	adds	r2, #176	@ 0xb0
 8006630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006634:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	e004      	b.n	800664a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
	...

08006658 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	32b0      	adds	r2, #176	@ 0xb0
 800666a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006670:	2301      	movs	r3, #1
 8006672:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800667a:	2303      	movs	r3, #3
 800667c:	e025      	b.n	80066ca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11f      	bne.n	80066c8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2201      	movs	r2, #1
 800668c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006690:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <USBD_CDC_TransmitPacket+0x7c>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	f003 020f 	and.w	r2, r3, #15
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4403      	add	r3, r0
 80066aa:	3318      	adds	r3, #24
 80066ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80066ae:	4b09      	ldr	r3, [pc, #36]	@ (80066d4 <USBD_CDC_TransmitPacket+0x7c>)
 80066b0:	7819      	ldrb	r1, [r3, #0]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 ffad 	bl	800861e <USBD_LL_Transmit>

    ret = USBD_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000093 	.word	0x20000093

080066d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	32b0      	adds	r2, #176	@ 0xb0
 80066ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	32b0      	adds	r2, #176	@ 0xb0
 80066fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006702:	2303      	movs	r3, #3
 8006704:	e018      	b.n	8006738 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	7c1b      	ldrb	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10a      	bne.n	8006724 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800670e:	4b0c      	ldr	r3, [pc, #48]	@ (8006740 <USBD_CDC_ReceivePacket+0x68>)
 8006710:	7819      	ldrb	r1, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006718:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 ff9f 	bl	8008660 <USBD_LL_PrepareReceive>
 8006722:	e008      	b.n	8006736 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006724:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <USBD_CDC_ReceivePacket+0x68>)
 8006726:	7819      	ldrb	r1, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800672e:	2340      	movs	r3, #64	@ 0x40
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 ff95 	bl	8008660 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20000094 	.word	0x20000094

08006744 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006758:	2303      	movs	r3, #3
 800675a:	e01f      	b.n	800679c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	79fa      	ldrb	r2, [r7, #7]
 800678e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f001 fe09 	bl	80083a8 <USBD_LL_Init>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]

  return ret;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e025      	b.n	8006808 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	32ae      	adds	r2, #174	@ 0xae
 80067ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00f      	beq.n	80067f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	32ae      	adds	r2, #174	@ 0xae
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e8:	f107 020e 	add.w	r2, r7, #14
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
 80067f0:	4602      	mov	r2, r0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fe17 	bl	800844c <USBD_LL_Start>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800683e:	b580      	push	{r7, lr}
 8006840:	b084      	sub	sp, #16
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	460b      	mov	r3, r1
 8006848:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	4611      	mov	r1, r2
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	4611      	mov	r1, r2
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d001      	beq.n	80068a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800689c:	2303      	movs	r3, #3
 800689e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 f936 	bl	8007b2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d01a      	beq.n	800691c <USBD_LL_SetupStage+0x72>
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d822      	bhi.n	8006930 <USBD_LL_SetupStage+0x86>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <USBD_LL_SetupStage+0x4a>
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d00a      	beq.n	8006908 <USBD_LL_SetupStage+0x5e>
 80068f2:	e01d      	b.n	8006930 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fb63 	bl	8006fc8 <USBD_StdDevReq>
 8006902:	4603      	mov	r3, r0
 8006904:	73fb      	strb	r3, [r7, #15]
      break;
 8006906:	e020      	b.n	800694a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fbcb 	bl	80070ac <USBD_StdItfReq>
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]
      break;
 800691a:	e016      	b.n	800694a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fc2d 	bl	8007184 <USBD_StdEPReq>
 800692a:	4603      	mov	r3, r0
 800692c:	73fb      	strb	r3, [r7, #15]
      break;
 800692e:	e00c      	b.n	800694a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006936:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800693a:	b2db      	uxtb	r3, r3
 800693c:	4619      	mov	r1, r3
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 fde4 	bl	800850c <USBD_LL_StallEP>
 8006944:	4603      	mov	r3, r0
 8006946:	73fb      	strb	r3, [r7, #15]
      break;
 8006948:	bf00      	nop
  }

  return ret;
 800694a:	7bfb      	ldrb	r3, [r7, #15]
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	460b      	mov	r3, r1
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006966:	7afb      	ldrb	r3, [r7, #11]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d16e      	bne.n	8006a4a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006972:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800697a:	2b03      	cmp	r3, #3
 800697c:	f040 8098 	bne.w	8006ab0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	429a      	cmp	r2, r3
 800698a:	d913      	bls.n	80069b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	1ad2      	subs	r2, r2, r3
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	4293      	cmp	r3, r2
 80069a4:	bf28      	it	cs
 80069a6:	4613      	movcs	r3, r2
 80069a8:	461a      	mov	r2, r3
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f001 f9be 	bl	8007d2e <USBD_CtlContinueRx>
 80069b2:	e07d      	b.n	8006ab0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069ba:	f003 031f 	and.w	r3, r3, #31
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d014      	beq.n	80069ec <USBD_LL_DataOutStage+0x98>
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d81d      	bhi.n	8006a02 <USBD_LL_DataOutStage+0xae>
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <USBD_LL_DataOutStage+0x7c>
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d003      	beq.n	80069d6 <USBD_LL_DataOutStage+0x82>
 80069ce:	e018      	b.n	8006a02 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	75bb      	strb	r3, [r7, #22]
            break;
 80069d4:	e018      	b.n	8006a08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fa64 	bl	8006eae <USBD_CoreFindIF>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75bb      	strb	r3, [r7, #22]
            break;
 80069ea:	e00d      	b.n	8006a08 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	4619      	mov	r1, r3
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fa66 	bl	8006ec8 <USBD_CoreFindEP>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006a00:	e002      	b.n	8006a08 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	75bb      	strb	r3, [r7, #22]
            break;
 8006a06:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a08:	7dbb      	ldrb	r3, [r7, #22]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d119      	bne.n	8006a42 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d113      	bne.n	8006a42 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a1a:	7dba      	ldrb	r2, [r7, #22]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	32ae      	adds	r2, #174	@ 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00b      	beq.n	8006a42 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a2a:	7dba      	ldrb	r2, [r7, #22]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a32:	7dba      	ldrb	r2, [r7, #22]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	32ae      	adds	r2, #174	@ 0xae
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f001 f984 	bl	8007d50 <USBD_CtlSendStatus>
 8006a48:	e032      	b.n	8006ab0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	4619      	mov	r1, r3
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 fa37 	bl	8006ec8 <USBD_CoreFindEP>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a5e:	7dbb      	ldrb	r3, [r7, #22]
 8006a60:	2bff      	cmp	r3, #255	@ 0xff
 8006a62:	d025      	beq.n	8006ab0 <USBD_LL_DataOutStage+0x15c>
 8006a64:	7dbb      	ldrb	r3, [r7, #22]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d122      	bne.n	8006ab0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b03      	cmp	r3, #3
 8006a74:	d117      	bne.n	8006aa6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a76:	7dba      	ldrb	r2, [r7, #22]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	32ae      	adds	r2, #174	@ 0xae
 8006a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00f      	beq.n	8006aa6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a86:	7dba      	ldrb	r2, [r7, #22]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a8e:	7dba      	ldrb	r2, [r7, #22]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	32ae      	adds	r2, #174	@ 0xae
 8006a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	7afa      	ldrb	r2, [r7, #11]
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	4798      	blx	r3
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	e000      	b.n	8006ab2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d16f      	bne.n	8006bae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d15a      	bne.n	8006b94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d914      	bls.n	8006b14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	1ad2      	subs	r2, r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	461a      	mov	r2, r3
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f001 f8e6 	bl	8007cd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b06:	2300      	movs	r3, #0
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f001 fda7 	bl	8008660 <USBD_LL_PrepareReceive>
 8006b12:	e03f      	b.n	8006b94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d11c      	bne.n	8006b5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d316      	bcc.n	8006b5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d20f      	bcs.n	8006b5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f001 f8c7 	bl	8007cd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f001 fd84 	bl	8008660 <USBD_LL_PrepareReceive>
 8006b58:	e01c      	b.n	8006b94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d10f      	bne.n	8006b86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d009      	beq.n	8006b86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b86:	2180      	movs	r1, #128	@ 0x80
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f001 fcbf 	bl	800850c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f001 f8f1 	bl	8007d76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d03a      	beq.n	8006c14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fe42 	bl	8006828 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006bac:	e032      	b.n	8006c14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f985 	bl	8006ec8 <USBD_CoreFindEP>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2bff      	cmp	r3, #255	@ 0xff
 8006bc6:	d025      	beq.n	8006c14 <USBD_LL_DataInStage+0x15a>
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d122      	bne.n	8006c14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d11c      	bne.n	8006c14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bda:	7dfa      	ldrb	r2, [r7, #23]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	32ae      	adds	r2, #174	@ 0xae
 8006be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d014      	beq.n	8006c14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bea:	7dfa      	ldrb	r2, [r7, #23]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bf2:	7dfa      	ldrb	r2, [r7, #23]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	32ae      	adds	r2, #174	@ 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	7afa      	ldrb	r2, [r7, #11]
 8006c00:	4611      	mov	r1, r2
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	4798      	blx	r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c0a:	7dbb      	ldrb	r3, [r7, #22]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c10:	7dbb      	ldrb	r3, [r7, #22]
 8006c12:	e000      	b.n	8006c16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d014      	beq.n	8006c84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00e      	beq.n	8006c84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6852      	ldr	r2, [r2, #4]
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	4611      	mov	r1, r2
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c80:	2303      	movs	r3, #3
 8006c82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c84:	2340      	movs	r3, #64	@ 0x40
 8006c86:	2200      	movs	r2, #0
 8006c88:	2100      	movs	r1, #0
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fbf9 	bl	8008482 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2240      	movs	r2, #64	@ 0x40
 8006c9c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ca0:	2340      	movs	r3, #64	@ 0x40
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2180      	movs	r1, #128	@ 0x80
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fbeb 	bl	8008482 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2240      	movs	r2, #64	@ 0x40
 8006cb6:	621a      	str	r2, [r3, #32]

  return ret;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	78fa      	ldrb	r2, [r7, #3]
 8006cd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d006      	beq.n	8006d04 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2204      	movs	r2, #4
 8006d08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d0c:	2300      	movs	r3, #0
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d106      	bne.n	8006d3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b082      	sub	sp, #8
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d110      	bne.n	8006d80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	32ae      	adds	r2, #174	@ 0xae
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e01c      	b.n	8006de6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d115      	bne.n	8006de4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	32ae      	adds	r2, #174	@ 0xae
 8006dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	32ae      	adds	r2, #174	@ 0xae
 8006dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	78fa      	ldrb	r2, [r7, #3]
 8006dde:	4611      	mov	r1, r2
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	32ae      	adds	r2, #174	@ 0xae
 8006e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e01c      	b.n	8006e4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d115      	bne.n	8006e48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32ae      	adds	r2, #174	@ 0xae
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00b      	beq.n	8006e48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	32ae      	adds	r2, #174	@ 0xae
 8006e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e40:	78fa      	ldrb	r2, [r7, #3]
 8006e42:	4611      	mov	r1, r2
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00e      	beq.n	8006ea4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6852      	ldr	r2, [r2, #4]
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	4611      	mov	r1, r2
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	4798      	blx	r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b083      	sub	sp, #12
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ed4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b086      	sub	sp, #24
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	7812      	ldrb	r2, [r2, #0]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d91f      	bls.n	8006f48 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f0e:	e013      	b.n	8006f38 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f10:	f107 030a 	add.w	r3, r7, #10
 8006f14:	4619      	mov	r1, r3
 8006f16:	6978      	ldr	r0, [r7, #20]
 8006f18:	f000 f81b 	bl	8006f52 <USBD_GetNextDesc>
 8006f1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b05      	cmp	r3, #5
 8006f24:	d108      	bne.n	8006f38 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	789b      	ldrb	r3, [r3, #2]
 8006f2e:	78fa      	ldrb	r2, [r7, #3]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d008      	beq.n	8006f46 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f34:	2300      	movs	r3, #0
 8006f36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	897b      	ldrh	r3, [r7, #10]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d8e5      	bhi.n	8006f10 <USBD_GetEpDesc+0x2e>
 8006f44:	e000      	b.n	8006f48 <USBD_GetEpDesc+0x66>
          break;
 8006f46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f48:	693b      	ldr	r3, [r7, #16]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	7812      	ldrb	r2, [r2, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	461a      	mov	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b087      	sub	sp, #28
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fa8:	8a3b      	ldrh	r3, [r7, #16]
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	b21a      	sxth	r2, r3
 8006fae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	b21b      	sxth	r3, r3
 8006fb6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fb8:	89fb      	ldrh	r3, [r7, #14]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	371c      	adds	r7, #28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
	...

08006fc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006fde:	2b40      	cmp	r3, #64	@ 0x40
 8006fe0:	d005      	beq.n	8006fee <USBD_StdDevReq+0x26>
 8006fe2:	2b40      	cmp	r3, #64	@ 0x40
 8006fe4:	d857      	bhi.n	8007096 <USBD_StdDevReq+0xce>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00f      	beq.n	800700a <USBD_StdDevReq+0x42>
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d153      	bne.n	8007096 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	32ae      	adds	r2, #174	@ 0xae
 8006ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	4798      	blx	r3
 8007004:	4603      	mov	r3, r0
 8007006:	73fb      	strb	r3, [r7, #15]
      break;
 8007008:	e04a      	b.n	80070a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	785b      	ldrb	r3, [r3, #1]
 800700e:	2b09      	cmp	r3, #9
 8007010:	d83b      	bhi.n	800708a <USBD_StdDevReq+0xc2>
 8007012:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <USBD_StdDevReq+0x50>)
 8007014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007018:	0800706d 	.word	0x0800706d
 800701c:	08007081 	.word	0x08007081
 8007020:	0800708b 	.word	0x0800708b
 8007024:	08007077 	.word	0x08007077
 8007028:	0800708b 	.word	0x0800708b
 800702c:	0800704b 	.word	0x0800704b
 8007030:	08007041 	.word	0x08007041
 8007034:	0800708b 	.word	0x0800708b
 8007038:	08007063 	.word	0x08007063
 800703c:	08007055 	.word	0x08007055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007040:	6839      	ldr	r1, [r7, #0]
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa3c 	bl	80074c0 <USBD_GetDescriptor>
          break;
 8007048:	e024      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fbcb 	bl	80077e8 <USBD_SetAddress>
          break;
 8007052:	e01f      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007054:	6839      	ldr	r1, [r7, #0]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fc0a 	bl	8007870 <USBD_SetConfig>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
          break;
 8007060:	e018      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fcad 	bl	80079c4 <USBD_GetConfig>
          break;
 800706a:	e013      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fcde 	bl	8007a30 <USBD_GetStatus>
          break;
 8007074:	e00e      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fd0d 	bl	8007a98 <USBD_SetFeature>
          break;
 800707e:	e009      	b.n	8007094 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fd31 	bl	8007aea <USBD_ClrFeature>
          break;
 8007088:	e004      	b.n	8007094 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fd88 	bl	8007ba2 <USBD_CtlError>
          break;
 8007092:	bf00      	nop
      }
      break;
 8007094:	e004      	b.n	80070a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fd82 	bl	8007ba2 <USBD_CtlError>
      break;
 800709e:	bf00      	nop
  }

  return ret;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop

080070ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070c2:	2b40      	cmp	r3, #64	@ 0x40
 80070c4:	d005      	beq.n	80070d2 <USBD_StdItfReq+0x26>
 80070c6:	2b40      	cmp	r3, #64	@ 0x40
 80070c8:	d852      	bhi.n	8007170 <USBD_StdItfReq+0xc4>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <USBD_StdItfReq+0x26>
 80070ce:	2b20      	cmp	r3, #32
 80070d0:	d14e      	bne.n	8007170 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	3b01      	subs	r3, #1
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d840      	bhi.n	8007162 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	889b      	ldrh	r3, [r3, #4]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d836      	bhi.n	8007158 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	889b      	ldrh	r3, [r3, #4]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff fedb 	bl	8006eae <USBD_CoreFindIF>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	2bff      	cmp	r3, #255	@ 0xff
 8007100:	d01d      	beq.n	800713e <USBD_StdItfReq+0x92>
 8007102:	7bbb      	ldrb	r3, [r7, #14]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11a      	bne.n	800713e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007108:	7bba      	ldrb	r2, [r7, #14]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32ae      	adds	r2, #174	@ 0xae
 800710e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00f      	beq.n	8007138 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007118:	7bba      	ldrb	r2, [r7, #14]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007120:	7bba      	ldrb	r2, [r7, #14]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	32ae      	adds	r2, #174	@ 0xae
 8007126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007136:	e004      	b.n	8007142 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800713c:	e001      	b.n	8007142 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800713e:	2303      	movs	r3, #3
 8007140:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88db      	ldrh	r3, [r3, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d110      	bne.n	800716c <USBD_StdItfReq+0xc0>
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fdfd 	bl	8007d50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007156:	e009      	b.n	800716c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fd21 	bl	8007ba2 <USBD_CtlError>
          break;
 8007160:	e004      	b.n	800716c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fd1c 	bl	8007ba2 <USBD_CtlError>
          break;
 800716a:	e000      	b.n	800716e <USBD_StdItfReq+0xc2>
          break;
 800716c:	bf00      	nop
      }
      break;
 800716e:	e004      	b.n	800717a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fd15 	bl	8007ba2 <USBD_CtlError>
      break;
 8007178:	bf00      	nop
  }

  return ret;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	889b      	ldrh	r3, [r3, #4]
 8007196:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071a0:	2b40      	cmp	r3, #64	@ 0x40
 80071a2:	d007      	beq.n	80071b4 <USBD_StdEPReq+0x30>
 80071a4:	2b40      	cmp	r3, #64	@ 0x40
 80071a6:	f200 817f 	bhi.w	80074a8 <USBD_StdEPReq+0x324>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02a      	beq.n	8007204 <USBD_StdEPReq+0x80>
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	f040 817a 	bne.w	80074a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff fe85 	bl	8006ec8 <USBD_CoreFindEP>
 80071be:	4603      	mov	r3, r0
 80071c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071c2:	7b7b      	ldrb	r3, [r7, #13]
 80071c4:	2bff      	cmp	r3, #255	@ 0xff
 80071c6:	f000 8174 	beq.w	80074b2 <USBD_StdEPReq+0x32e>
 80071ca:	7b7b      	ldrb	r3, [r7, #13]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8170 	bne.w	80074b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071d2:	7b7a      	ldrb	r2, [r7, #13]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071da:	7b7a      	ldrb	r2, [r7, #13]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	32ae      	adds	r2, #174	@ 0xae
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	f000 8163 	beq.w	80074b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071ec:	7b7a      	ldrb	r2, [r7, #13]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	32ae      	adds	r2, #174	@ 0xae
 80071f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
 80071fe:	4603      	mov	r3, r0
 8007200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007202:	e156      	b.n	80074b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	785b      	ldrb	r3, [r3, #1]
 8007208:	2b03      	cmp	r3, #3
 800720a:	d008      	beq.n	800721e <USBD_StdEPReq+0x9a>
 800720c:	2b03      	cmp	r3, #3
 800720e:	f300 8145 	bgt.w	800749c <USBD_StdEPReq+0x318>
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 809b 	beq.w	800734e <USBD_StdEPReq+0x1ca>
 8007218:	2b01      	cmp	r3, #1
 800721a:	d03c      	beq.n	8007296 <USBD_StdEPReq+0x112>
 800721c:	e13e      	b.n	800749c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d002      	beq.n	8007230 <USBD_StdEPReq+0xac>
 800722a:	2b03      	cmp	r3, #3
 800722c:	d016      	beq.n	800725c <USBD_StdEPReq+0xd8>
 800722e:	e02c      	b.n	800728a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <USBD_StdEPReq+0xce>
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	2b80      	cmp	r3, #128	@ 0x80
 800723a:	d00a      	beq.n	8007252 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f963 	bl	800850c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007246:	2180      	movs	r1, #128	@ 0x80
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 f95f 	bl	800850c <USBD_LL_StallEP>
 800724e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007250:	e020      	b.n	8007294 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fca4 	bl	8007ba2 <USBD_CtlError>
              break;
 800725a:	e01b      	b.n	8007294 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	885b      	ldrh	r3, [r3, #2]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10e      	bne.n	8007282 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00b      	beq.n	8007282 <USBD_StdEPReq+0xfe>
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	2b80      	cmp	r3, #128	@ 0x80
 800726e:	d008      	beq.n	8007282 <USBD_StdEPReq+0xfe>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	88db      	ldrh	r3, [r3, #6]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d104      	bne.n	8007282 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	4619      	mov	r1, r3
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f001 f945 	bl	800850c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fd64 	bl	8007d50 <USBD_CtlSendStatus>

              break;
 8007288:	e004      	b.n	8007294 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fc88 	bl	8007ba2 <USBD_CtlError>
              break;
 8007292:	bf00      	nop
          }
          break;
 8007294:	e107      	b.n	80074a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d002      	beq.n	80072a8 <USBD_StdEPReq+0x124>
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d016      	beq.n	80072d4 <USBD_StdEPReq+0x150>
 80072a6:	e04b      	b.n	8007340 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <USBD_StdEPReq+0x146>
 80072ae:	7bbb      	ldrb	r3, [r7, #14]
 80072b0:	2b80      	cmp	r3, #128	@ 0x80
 80072b2:	d00a      	beq.n	80072ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 f927 	bl	800850c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072be:	2180      	movs	r1, #128	@ 0x80
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f001 f923 	bl	800850c <USBD_LL_StallEP>
 80072c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072c8:	e040      	b.n	800734c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc68 	bl	8007ba2 <USBD_CtlError>
              break;
 80072d2:	e03b      	b.n	800734c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	885b      	ldrh	r3, [r3, #2]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d136      	bne.n	800734a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d004      	beq.n	80072f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f001 f92d 	bl	800854a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fd2d 	bl	8007d50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7ff fde4 	bl	8006ec8 <USBD_CoreFindEP>
 8007300:	4603      	mov	r3, r0
 8007302:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007304:	7b7b      	ldrb	r3, [r7, #13]
 8007306:	2bff      	cmp	r3, #255	@ 0xff
 8007308:	d01f      	beq.n	800734a <USBD_StdEPReq+0x1c6>
 800730a:	7b7b      	ldrb	r3, [r7, #13]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11c      	bne.n	800734a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007310:	7b7a      	ldrb	r2, [r7, #13]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007318:	7b7a      	ldrb	r2, [r7, #13]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	32ae      	adds	r2, #174	@ 0xae
 800731e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d010      	beq.n	800734a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007328:	7b7a      	ldrb	r2, [r7, #13]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32ae      	adds	r2, #174	@ 0xae
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	4798      	blx	r3
 800733a:	4603      	mov	r3, r0
 800733c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800733e:	e004      	b.n	800734a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 fc2d 	bl	8007ba2 <USBD_CtlError>
              break;
 8007348:	e000      	b.n	800734c <USBD_StdEPReq+0x1c8>
              break;
 800734a:	bf00      	nop
          }
          break;
 800734c:	e0ab      	b.n	80074a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d002      	beq.n	8007360 <USBD_StdEPReq+0x1dc>
 800735a:	2b03      	cmp	r3, #3
 800735c:	d032      	beq.n	80073c4 <USBD_StdEPReq+0x240>
 800735e:	e097      	b.n	8007490 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <USBD_StdEPReq+0x1f2>
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	2b80      	cmp	r3, #128	@ 0x80
 800736a:	d004      	beq.n	8007376 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc17 	bl	8007ba2 <USBD_CtlError>
                break;
 8007374:	e091      	b.n	800749a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da0b      	bge.n	8007396 <USBD_StdEPReq+0x212>
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	3310      	adds	r3, #16
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	3304      	adds	r3, #4
 8007394:	e00b      	b.n	80073ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800739c:	4613      	mov	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	4413      	add	r3, r2
 80073ac:	3304      	adds	r3, #4
 80073ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2202      	movs	r2, #2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc6d 	bl	8007c9c <USBD_CtlSendData>
              break;
 80073c2:	e06a      	b.n	800749a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	da11      	bge.n	80073f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	f003 020f 	and.w	r2, r3, #15
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	3324      	adds	r3, #36	@ 0x24
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d117      	bne.n	8007416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fbda 	bl	8007ba2 <USBD_CtlError>
                  break;
 80073ee:	e054      	b.n	800749a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007406:	881b      	ldrh	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fbc7 	bl	8007ba2 <USBD_CtlError>
                  break;
 8007414:	e041      	b.n	800749a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800741a:	2b00      	cmp	r3, #0
 800741c:	da0b      	bge.n	8007436 <USBD_StdEPReq+0x2b2>
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	3310      	adds	r3, #16
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	4413      	add	r3, r2
 8007432:	3304      	adds	r3, #4
 8007434:	e00b      	b.n	800744e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	4413      	add	r3, r2
 800744c:	3304      	adds	r3, #4
 800744e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <USBD_StdEPReq+0x2d8>
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b80      	cmp	r3, #128	@ 0x80
 800745a:	d103      	bne.n	8007464 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e00e      	b.n	8007482 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 f88d 	bl	8008588 <USBD_LL_IsStallEP>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2201      	movs	r2, #1
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	e002      	b.n	8007482 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2202      	movs	r2, #2
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fc07 	bl	8007c9c <USBD_CtlSendData>
              break;
 800748e:	e004      	b.n	800749a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb85 	bl	8007ba2 <USBD_CtlError>
              break;
 8007498:	bf00      	nop
          }
          break;
 800749a:	e004      	b.n	80074a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fb7f 	bl	8007ba2 <USBD_CtlError>
          break;
 80074a4:	bf00      	nop
      }
      break;
 80074a6:	e005      	b.n	80074b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fb79 	bl	8007ba2 <USBD_CtlError>
      break;
 80074b0:	e000      	b.n	80074b4 <USBD_StdEPReq+0x330>
      break;
 80074b2:	bf00      	nop
  }

  return ret;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
	...

080074c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074ce:	2300      	movs	r3, #0
 80074d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	885b      	ldrh	r3, [r3, #2]
 80074da:	0a1b      	lsrs	r3, r3, #8
 80074dc:	b29b      	uxth	r3, r3
 80074de:	3b01      	subs	r3, #1
 80074e0:	2b0e      	cmp	r3, #14
 80074e2:	f200 8152 	bhi.w	800778a <USBD_GetDescriptor+0x2ca>
 80074e6:	a201      	add	r2, pc, #4	@ (adr r2, 80074ec <USBD_GetDescriptor+0x2c>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	0800755d 	.word	0x0800755d
 80074f0:	08007575 	.word	0x08007575
 80074f4:	080075b5 	.word	0x080075b5
 80074f8:	0800778b 	.word	0x0800778b
 80074fc:	0800778b 	.word	0x0800778b
 8007500:	0800772b 	.word	0x0800772b
 8007504:	08007757 	.word	0x08007757
 8007508:	0800778b 	.word	0x0800778b
 800750c:	0800778b 	.word	0x0800778b
 8007510:	0800778b 	.word	0x0800778b
 8007514:	0800778b 	.word	0x0800778b
 8007518:	0800778b 	.word	0x0800778b
 800751c:	0800778b 	.word	0x0800778b
 8007520:	0800778b 	.word	0x0800778b
 8007524:	08007529 	.word	0x08007529
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	7c12      	ldrb	r2, [r2, #16]
 8007540:	f107 0108 	add.w	r1, r7, #8
 8007544:	4610      	mov	r0, r2
 8007546:	4798      	blx	r3
 8007548:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800754a:	e126      	b.n	800779a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800754c:	6839      	ldr	r1, [r7, #0]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fb27 	bl	8007ba2 <USBD_CtlError>
        err++;
 8007554:	7afb      	ldrb	r3, [r7, #11]
 8007556:	3301      	adds	r3, #1
 8007558:	72fb      	strb	r3, [r7, #11]
      break;
 800755a:	e11e      	b.n	800779a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
      break;
 8007572:	e112      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	7c1b      	ldrb	r3, [r3, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10d      	bne.n	8007598 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	f107 0208 	add.w	r2, r7, #8
 8007588:	4610      	mov	r0, r2
 800758a:	4798      	blx	r3
 800758c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	2202      	movs	r2, #2
 8007594:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007596:	e100      	b.n	800779a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800759e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a0:	f107 0208 	add.w	r2, r7, #8
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
 80075a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3301      	adds	r3, #1
 80075ae:	2202      	movs	r2, #2
 80075b0:	701a      	strb	r2, [r3, #0]
      break;
 80075b2:	e0f2      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	885b      	ldrh	r3, [r3, #2]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	f200 80ac 	bhi.w	8007718 <USBD_GetDescriptor+0x258>
 80075c0:	a201      	add	r2, pc, #4	@ (adr r2, 80075c8 <USBD_GetDescriptor+0x108>)
 80075c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c6:	bf00      	nop
 80075c8:	080075e1 	.word	0x080075e1
 80075cc:	08007615 	.word	0x08007615
 80075d0:	08007649 	.word	0x08007649
 80075d4:	0800767d 	.word	0x0800767d
 80075d8:	080076b1 	.word	0x080076b1
 80075dc:	080076e5 	.word	0x080076e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7c12      	ldrb	r2, [r2, #16]
 80075f8:	f107 0108 	add.w	r1, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007602:	e091      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 facb 	bl	8007ba2 <USBD_CtlError>
            err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
          break;
 8007612:	e089      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007636:	e077      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fab1 	bl	8007ba2 <USBD_CtlError>
            err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
          break;
 8007646:	e06f      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 0108 	add.w	r1, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766a:	e05d      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fa97 	bl	8007ba2 <USBD_CtlError>
            err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
          break;
 800767a:	e055      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	7c12      	ldrb	r2, [r2, #16]
 8007694:	f107 0108 	add.w	r1, r7, #8
 8007698:	4610      	mov	r0, r2
 800769a:	4798      	blx	r3
 800769c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800769e:	e043      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa7d 	bl	8007ba2 <USBD_CtlError>
            err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
          break;
 80076ae:	e03b      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	7c12      	ldrb	r2, [r2, #16]
 80076c8:	f107 0108 	add.w	r1, r7, #8
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d2:	e029      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa63 	bl	8007ba2 <USBD_CtlError>
            err++;
 80076dc:	7afb      	ldrb	r3, [r7, #11]
 80076de:	3301      	adds	r3, #1
 80076e0:	72fb      	strb	r3, [r7, #11]
          break;
 80076e2:	e021      	b.n	8007728 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00b      	beq.n	8007708 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7c12      	ldrb	r2, [r2, #16]
 80076fc:	f107 0108 	add.w	r1, r7, #8
 8007700:	4610      	mov	r0, r2
 8007702:	4798      	blx	r3
 8007704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007706:	e00f      	b.n	8007728 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa49 	bl	8007ba2 <USBD_CtlError>
            err++;
 8007710:	7afb      	ldrb	r3, [r7, #11]
 8007712:	3301      	adds	r3, #1
 8007714:	72fb      	strb	r3, [r7, #11]
          break;
 8007716:	e007      	b.n	8007728 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007718:	6839      	ldr	r1, [r7, #0]
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa41 	bl	8007ba2 <USBD_CtlError>
          err++;
 8007720:	7afb      	ldrb	r3, [r7, #11]
 8007722:	3301      	adds	r3, #1
 8007724:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007726:	bf00      	nop
      }
      break;
 8007728:	e037      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	7c1b      	ldrb	r3, [r3, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d109      	bne.n	8007746 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800773a:	f107 0208 	add.w	r2, r7, #8
 800773e:	4610      	mov	r0, r2
 8007740:	4798      	blx	r3
 8007742:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007744:	e029      	b.n	800779a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fa2a 	bl	8007ba2 <USBD_CtlError>
        err++;
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	3301      	adds	r3, #1
 8007752:	72fb      	strb	r3, [r7, #11]
      break;
 8007754:	e021      	b.n	800779a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7c1b      	ldrb	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10d      	bne.n	800777a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	f107 0208 	add.w	r2, r7, #8
 800776a:	4610      	mov	r0, r2
 800776c:	4798      	blx	r3
 800776e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3301      	adds	r3, #1
 8007774:	2207      	movs	r2, #7
 8007776:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007778:	e00f      	b.n	800779a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fa10 	bl	8007ba2 <USBD_CtlError>
        err++;
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	3301      	adds	r3, #1
 8007786:	72fb      	strb	r3, [r7, #11]
      break;
 8007788:	e007      	b.n	800779a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fa08 	bl	8007ba2 <USBD_CtlError>
      err++;
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	3301      	adds	r3, #1
 8007796:	72fb      	strb	r3, [r7, #11]
      break;
 8007798:	bf00      	nop
  }

  if (err != 0U)
 800779a:	7afb      	ldrb	r3, [r7, #11]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11e      	bne.n	80077de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	88db      	ldrh	r3, [r3, #6]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d016      	beq.n	80077d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80077a8:	893b      	ldrh	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00e      	beq.n	80077cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	88da      	ldrh	r2, [r3, #6]
 80077b2:	893b      	ldrh	r3, [r7, #8]
 80077b4:	4293      	cmp	r3, r2
 80077b6:	bf28      	it	cs
 80077b8:	4613      	movcs	r3, r2
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80077be:	893b      	ldrh	r3, [r7, #8]
 80077c0:	461a      	mov	r2, r3
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fa69 	bl	8007c9c <USBD_CtlSendData>
 80077ca:	e009      	b.n	80077e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80077cc:	6839      	ldr	r1, [r7, #0]
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f9e7 	bl	8007ba2 <USBD_CtlError>
 80077d4:	e004      	b.n	80077e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 faba 	bl	8007d50 <USBD_CtlSendStatus>
 80077dc:	e000      	b.n	80077e0 <USBD_GetDescriptor+0x320>
    return;
 80077de:	bf00      	nop
  }
}
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop

080077e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	889b      	ldrh	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d131      	bne.n	800785e <USBD_SetAddress+0x76>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d12d      	bne.n	800785e <USBD_SetAddress+0x76>
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	885b      	ldrh	r3, [r3, #2]
 8007806:	2b7f      	cmp	r3, #127	@ 0x7f
 8007808:	d829      	bhi.n	800785e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	885b      	ldrh	r3, [r3, #2]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007814:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b03      	cmp	r3, #3
 8007820:	d104      	bne.n	800782c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f9bc 	bl	8007ba2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782a:	e01d      	b.n	8007868 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	7bfa      	ldrb	r2, [r7, #15]
 8007830:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fed1 	bl	80085e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fa86 	bl	8007d50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007844:	7bfb      	ldrb	r3, [r7, #15]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d004      	beq.n	8007854 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2202      	movs	r2, #2
 800784e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007852:	e009      	b.n	8007868 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800785c:	e004      	b.n	8007868 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f99e 	bl	8007ba2 <USBD_CtlError>
  }
}
 8007866:	bf00      	nop
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	885b      	ldrh	r3, [r3, #2]
 8007882:	b2da      	uxtb	r2, r3
 8007884:	4b4e      	ldr	r3, [pc, #312]	@ (80079c0 <USBD_SetConfig+0x150>)
 8007886:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007888:	4b4d      	ldr	r3, [pc, #308]	@ (80079c0 <USBD_SetConfig+0x150>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d905      	bls.n	800789c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f985 	bl	8007ba2 <USBD_CtlError>
    return USBD_FAIL;
 8007898:	2303      	movs	r3, #3
 800789a:	e08c      	b.n	80079b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d002      	beq.n	80078ae <USBD_SetConfig+0x3e>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d029      	beq.n	8007900 <USBD_SetConfig+0x90>
 80078ac:	e075      	b.n	800799a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80078ae:	4b44      	ldr	r3, [pc, #272]	@ (80079c0 <USBD_SetConfig+0x150>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d020      	beq.n	80078f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80078b6:	4b42      	ldr	r3, [pc, #264]	@ (80079c0 <USBD_SetConfig+0x150>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078c0:	4b3f      	ldr	r3, [pc, #252]	@ (80079c0 <USBD_SetConfig+0x150>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fe ffb9 	bl	800683e <USBD_SetClassConfig>
 80078cc:	4603      	mov	r3, r0
 80078ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d008      	beq.n	80078e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f962 	bl	8007ba2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e6:	e065      	b.n	80079b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fa31 	bl	8007d50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2203      	movs	r2, #3
 80078f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078f6:	e05d      	b.n	80079b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fa29 	bl	8007d50 <USBD_CtlSendStatus>
      break;
 80078fe:	e059      	b.n	80079b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007900:	4b2f      	ldr	r3, [pc, #188]	@ (80079c0 <USBD_SetConfig+0x150>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d112      	bne.n	800792e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007910:	4b2b      	ldr	r3, [pc, #172]	@ (80079c0 <USBD_SetConfig+0x150>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800791a:	4b29      	ldr	r3, [pc, #164]	@ (80079c0 <USBD_SetConfig+0x150>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fe ffa8 	bl	8006876 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa12 	bl	8007d50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800792c:	e042      	b.n	80079b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800792e:	4b24      	ldr	r3, [pc, #144]	@ (80079c0 <USBD_SetConfig+0x150>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	429a      	cmp	r2, r3
 800793a:	d02a      	beq.n	8007992 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7fe ff96 	bl	8006876 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800794a:	4b1d      	ldr	r3, [pc, #116]	@ (80079c0 <USBD_SetConfig+0x150>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007954:	4b1a      	ldr	r3, [pc, #104]	@ (80079c0 <USBD_SetConfig+0x150>)
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fe ff6f 	bl	800683e <USBD_SetClassConfig>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00f      	beq.n	800798a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f918 	bl	8007ba2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fe ff7b 	bl	8006876 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007988:	e014      	b.n	80079b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f9e0 	bl	8007d50 <USBD_CtlSendStatus>
      break;
 8007990:	e010      	b.n	80079b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f9dc 	bl	8007d50 <USBD_CtlSendStatus>
      break;
 8007998:	e00c      	b.n	80079b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f900 	bl	8007ba2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80079a2:	4b07      	ldr	r3, [pc, #28]	@ (80079c0 <USBD_SetConfig+0x150>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7fe ff64 	bl	8006876 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80079ae:	2303      	movs	r3, #3
 80079b0:	73fb      	strb	r3, [r7, #15]
      break;
 80079b2:	bf00      	nop
  }

  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	20000704 	.word	0x20000704

080079c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d004      	beq.n	80079e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8e2 	bl	8007ba2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079de:	e023      	b.n	8007a28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	dc02      	bgt.n	80079f2 <USBD_GetConfig+0x2e>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc03      	bgt.n	80079f8 <USBD_GetConfig+0x34>
 80079f0:	e015      	b.n	8007a1e <USBD_GetConfig+0x5a>
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d00b      	beq.n	8007a0e <USBD_GetConfig+0x4a>
 80079f6:	e012      	b.n	8007a1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3308      	adds	r3, #8
 8007a02:	2201      	movs	r2, #1
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f948 	bl	8007c9c <USBD_CtlSendData>
        break;
 8007a0c:	e00c      	b.n	8007a28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3304      	adds	r3, #4
 8007a12:	2201      	movs	r2, #1
 8007a14:	4619      	mov	r1, r3
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f940 	bl	8007c9c <USBD_CtlSendData>
        break;
 8007a1c:	e004      	b.n	8007a28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007a1e:	6839      	ldr	r1, [r7, #0]
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8be 	bl	8007ba2 <USBD_CtlError>
        break;
 8007a26:	bf00      	nop
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d81e      	bhi.n	8007a86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	88db      	ldrh	r3, [r3, #6]
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d004      	beq.n	8007a5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8a5 	bl	8007ba2 <USBD_CtlError>
        break;
 8007a58:	e01a      	b.n	8007a90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d005      	beq.n	8007a76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f043 0202 	orr.w	r2, r3, #2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f90c 	bl	8007c9c <USBD_CtlSendData>
      break;
 8007a84:	e004      	b.n	8007a90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f88a 	bl	8007ba2 <USBD_CtlError>
      break;
 8007a8e:	bf00      	nop
  }
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d107      	bne.n	8007aba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f94c 	bl	8007d50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ab8:	e013      	b.n	8007ae2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	885b      	ldrh	r3, [r3, #2]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d10b      	bne.n	8007ada <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	889b      	ldrh	r3, [r3, #4]
 8007ac6:	0a1b      	lsrs	r3, r3, #8
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f93c 	bl	8007d50 <USBD_CtlSendStatus>
}
 8007ad8:	e003      	b.n	8007ae2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007ada:	6839      	ldr	r1, [r7, #0]
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f860 	bl	8007ba2 <USBD_CtlError>
}
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d80b      	bhi.n	8007b1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d10c      	bne.n	8007b24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f91c 	bl	8007d50 <USBD_CtlSendStatus>
      }
      break;
 8007b18:	e004      	b.n	8007b24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007b1a:	6839      	ldr	r1, [r7, #0]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f840 	bl	8007ba2 <USBD_CtlError>
      break;
 8007b22:	e000      	b.n	8007b26 <USBD_ClrFeature+0x3c>
      break;
 8007b24:	bf00      	nop
  }
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b084      	sub	sp, #16
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3301      	adds	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	781a      	ldrb	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7ff fa16 	bl	8006f8a <SWAPBYTE>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	461a      	mov	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f7ff fa09 	bl	8006f8a <SWAPBYTE>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3301      	adds	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff f9fc 	bl	8006f8a <SWAPBYTE>
 8007b92:	4603      	mov	r3, r0
 8007b94:	461a      	mov	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	80da      	strh	r2, [r3, #6]
}
 8007b9a:	bf00      	nop
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bac:	2180      	movs	r1, #128	@ 0x80
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fcac 	bl	800850c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fca8 	bl	800850c <USBD_LL_StallEP>
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d042      	beq.n	8007c60 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007bde:	6938      	ldr	r0, [r7, #16]
 8007be0:	f000 f842 	bl	8007c68 <USBD_GetLen>
 8007be4:	4603      	mov	r3, r0
 8007be6:	3301      	adds	r3, #1
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bee:	d808      	bhi.n	8007c02 <USBD_GetString+0x3e>
 8007bf0:	6938      	ldr	r0, [r7, #16]
 8007bf2:	f000 f839 	bl	8007c68 <USBD_GetLen>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	e001      	b.n	8007c06 <USBD_GetString+0x42>
 8007c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007c0a:	7dfb      	ldrb	r3, [r7, #23]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	4413      	add	r3, r2
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	4413      	add	r3, r2
 8007c22:	2203      	movs	r2, #3
 8007c24:	701a      	strb	r2, [r3, #0]
  idx++;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
 8007c28:	3301      	adds	r3, #1
 8007c2a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007c2c:	e013      	b.n	8007c56 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	4413      	add	r3, r2
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]
    idx++;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	3301      	adds	r3, #1
 8007c44:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c46:	7dfb      	ldrb	r3, [r7, #23]
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
 8007c52:	3301      	adds	r3, #1
 8007c54:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1e7      	bne.n	8007c2e <USBD_GetString+0x6a>
 8007c5e:	e000      	b.n	8007c62 <USBD_GetString+0x9e>
    return;
 8007c60:	bf00      	nop
  }
}
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c78:	e005      	b.n	8007c86 <USBD_GetLen+0x1e>
  {
    len++;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1f5      	bne.n	8007c7a <USBD_GetLen+0x12>
  }

  return len;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	60b9      	str	r1, [r7, #8]
 8007ca6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2202      	movs	r2, #2
 8007cac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fcab 	bl	800861e <USBD_LL_Transmit>

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fc9a 	bl	800861e <USBD_LL_Transmit>

  return USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2203      	movs	r2, #3
 8007d04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f000 fc9e 	bl	8008660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 fc8d 	bl	8008660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2204      	movs	r2, #4
 8007d5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fc59 	bl	800861e <USBD_LL_Transmit>

  return USBD_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b082      	sub	sp, #8
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2205      	movs	r2, #5
 8007d82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d86:	2300      	movs	r3, #0
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 fc67 	bl	8008660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007da0:	2201      	movs	r2, #1
 8007da2:	4912      	ldr	r1, [pc, #72]	@ (8007dec <MX_USB_DEVICE_Init+0x50>)
 8007da4:	4812      	ldr	r0, [pc, #72]	@ (8007df0 <MX_USB_DEVICE_Init+0x54>)
 8007da6:	f7fe fccd 	bl	8006744 <USBD_Init>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007db0:	f7f8 fb32 	bl	8000418 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007db4:	490f      	ldr	r1, [pc, #60]	@ (8007df4 <MX_USB_DEVICE_Init+0x58>)
 8007db6:	480e      	ldr	r0, [pc, #56]	@ (8007df0 <MX_USB_DEVICE_Init+0x54>)
 8007db8:	f7fe fcf4 	bl	80067a4 <USBD_RegisterClass>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007dc2:	f7f8 fb29 	bl	8000418 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007dc6:	490c      	ldr	r1, [pc, #48]	@ (8007df8 <MX_USB_DEVICE_Init+0x5c>)
 8007dc8:	4809      	ldr	r0, [pc, #36]	@ (8007df0 <MX_USB_DEVICE_Init+0x54>)
 8007dca:	f7fe fbeb 	bl	80065a4 <USBD_CDC_RegisterInterface>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d001      	beq.n	8007dd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007dd4:	f7f8 fb20 	bl	8000418 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007dd8:	4805      	ldr	r0, [pc, #20]	@ (8007df0 <MX_USB_DEVICE_Init+0x54>)
 8007dda:	f7fe fd19 	bl	8006810 <USBD_Start>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007de4:	f7f8 fb18 	bl	8000418 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007de8:	bf00      	nop
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	200000ac 	.word	0x200000ac
 8007df0:	20000708 	.word	0x20000708
 8007df4:	20000018 	.word	0x20000018
 8007df8:	20000098 	.word	0x20000098

08007dfc <CDC_Init_HS>:

/**
 * @brief  Initializes the CDC media low layer over the USB HS IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_HS(void) {
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007e00:	2200      	movs	r2, #0
 8007e02:	4905      	ldr	r1, [pc, #20]	@ (8007e18 <CDC_Init_HS+0x1c>)
 8007e04:	4805      	ldr	r0, [pc, #20]	@ (8007e1c <CDC_Init_HS+0x20>)
 8007e06:	f7fe fbe7 	bl	80065d8 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007e0a:	4905      	ldr	r1, [pc, #20]	@ (8007e20 <CDC_Init_HS+0x24>)
 8007e0c:	4803      	ldr	r0, [pc, #12]	@ (8007e1c <CDC_Init_HS+0x20>)
 8007e0e:	f7fe fc05 	bl	800661c <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8007e12:	2300      	movs	r3, #0
	/* USER CODE END 8 */
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	200011e4 	.word	0x200011e4
 8007e1c:	20000708 	.word	0x20000708
 8007e20:	200009e4 	.word	0x200009e4

08007e24 <CDC_DeInit_HS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @param  None
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_HS(void) {
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 9 */
	return (USBD_OK);
 8007e28:	2300      	movs	r3, #0
	/* USER CODE END 9 */
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <CDC_Control_HS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
 8007e40:	4613      	mov	r3, r2
 8007e42:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 10 */
	switch (cmd) {
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	2b23      	cmp	r3, #35	@ 0x23
 8007e48:	d84a      	bhi.n	8007ee0 <CDC_Control_HS+0xac>
 8007e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e50 <CDC_Control_HS+0x1c>)
 8007e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e50:	08007ee1 	.word	0x08007ee1
 8007e54:	08007ee1 	.word	0x08007ee1
 8007e58:	08007ee1 	.word	0x08007ee1
 8007e5c:	08007ee1 	.word	0x08007ee1
 8007e60:	08007ee1 	.word	0x08007ee1
 8007e64:	08007ee1 	.word	0x08007ee1
 8007e68:	08007ee1 	.word	0x08007ee1
 8007e6c:	08007ee1 	.word	0x08007ee1
 8007e70:	08007ee1 	.word	0x08007ee1
 8007e74:	08007ee1 	.word	0x08007ee1
 8007e78:	08007ee1 	.word	0x08007ee1
 8007e7c:	08007ee1 	.word	0x08007ee1
 8007e80:	08007ee1 	.word	0x08007ee1
 8007e84:	08007ee1 	.word	0x08007ee1
 8007e88:	08007ee1 	.word	0x08007ee1
 8007e8c:	08007ee1 	.word	0x08007ee1
 8007e90:	08007ee1 	.word	0x08007ee1
 8007e94:	08007ee1 	.word	0x08007ee1
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007ee1 	.word	0x08007ee1
 8007ea0:	08007ee1 	.word	0x08007ee1
 8007ea4:	08007ee1 	.word	0x08007ee1
 8007ea8:	08007ee1 	.word	0x08007ee1
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	08007ee1 	.word	0x08007ee1
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee1 	.word	0x08007ee1
 8007ec4:	08007ee1 	.word	0x08007ee1
 8007ec8:	08007ee1 	.word	0x08007ee1
 8007ecc:	08007ee1 	.word	0x08007ee1
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007ee1 	.word	0x08007ee1
 8007ed8:	08007ee1 	.word	0x08007ee1
 8007edc:	08007ee1 	.word	0x08007ee1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8007ee0:	bf00      	nop
	}

	return (USBD_OK);
 8007ee2:	2300      	movs	r3, #0
	/* USER CODE END 10 */
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <CDC_Receive_HS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
 */
static int8_t CDC_Receive_HS(uint8_t *Buf, uint32_t *Len) {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 11 */
	// we send back what we recieved
	Buf[*Len] = '\0';
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	4413      	add	r3, r2
 8007f02:	2200      	movs	r2, #0
 8007f04:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_HS(Buf, *Len);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f80e 	bl	8007f30 <CDC_Transmit_HS>
// prepare for the next recieve
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4805      	ldr	r0, [pc, #20]	@ (8007f2c <CDC_Receive_HS+0x3c>)
 8007f18:	f7fe fb80 	bl	800661c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007f1c:	4803      	ldr	r0, [pc, #12]	@ (8007f2c <CDC_Receive_HS+0x3c>)
 8007f1e:	f7fe fbdb 	bl	80066d8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8007f22:	2300      	movs	r3, #0
	/* USER CODE END 11 */
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000708 	.word	0x20000708

08007f30 <CDC_Transmit_HS>:
 *         through this function.
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_HS(uint8_t *Buf, uint16_t Len) {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc =
 8007f40:	4b0f      	ldr	r3, [pc, #60]	@ (8007f80 <CDC_Transmit_HS+0x50>)
 8007f42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f46:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceHS.pClassData;

	if (hcdc == NULL)
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <CDC_Transmit_HS+0x22>
		return USBD_FAIL;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e012      	b.n	8007f78 <CDC_Transmit_HS+0x48>

	if (hcdc->TxState != 0) {
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <CDC_Transmit_HS+0x30>
		return USBD_BUSY;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e00b      	b.n	8007f78 <CDC_Transmit_HS+0x48>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8007f60:	887b      	ldrh	r3, [r7, #2]
 8007f62:	461a      	mov	r2, r3
 8007f64:	6879      	ldr	r1, [r7, #4]
 8007f66:	4806      	ldr	r0, [pc, #24]	@ (8007f80 <CDC_Transmit_HS+0x50>)
 8007f68:	f7fe fb36 	bl	80065d8 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8007f6c:	4804      	ldr	r0, [pc, #16]	@ (8007f80 <CDC_Transmit_HS+0x50>)
 8007f6e:	f7fe fb73 	bl	8006658 <USBD_CDC_TransmitPacket>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 12 */
	return result;
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20000708 	.word	0x20000708

08007f84 <CDC_TransmitCplt_HS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 14 */
	return result;
 8007f96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
	...

08007fa8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2212      	movs	r2, #18
 8007fb8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007fba:	4b03      	ldr	r3, [pc, #12]	@ (8007fc8 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	200000cc 	.word	0x200000cc

08007fcc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	2204      	movs	r2, #4
 8007fdc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007fde:	4b03      	ldr	r3, [pc, #12]	@ (8007fec <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	200000e0 	.word	0x200000e0

08007ff0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d105      	bne.n	800800e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	4907      	ldr	r1, [pc, #28]	@ (8008024 <USBD_HS_ProductStrDescriptor+0x34>)
 8008006:	4808      	ldr	r0, [pc, #32]	@ (8008028 <USBD_HS_ProductStrDescriptor+0x38>)
 8008008:	f7ff fddc 	bl	8007bc4 <USBD_GetString>
 800800c:	e004      	b.n	8008018 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4904      	ldr	r1, [pc, #16]	@ (8008024 <USBD_HS_ProductStrDescriptor+0x34>)
 8008012:	4805      	ldr	r0, [pc, #20]	@ (8008028 <USBD_HS_ProductStrDescriptor+0x38>)
 8008014:	f7ff fdd6 	bl	8007bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008018:	4b02      	ldr	r3, [pc, #8]	@ (8008024 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800801a:	4618      	mov	r0, r3
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200019e4 	.word	0x200019e4
 8008028:	080087d4 	.word	0x080087d4

0800802c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	4904      	ldr	r1, [pc, #16]	@ (800804c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800803c:	4804      	ldr	r0, [pc, #16]	@ (8008050 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800803e:	f7ff fdc1 	bl	8007bc4 <USBD_GetString>
  return USBD_StrDesc;
 8008042:	4b02      	ldr	r3, [pc, #8]	@ (800804c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008044:	4618      	mov	r0, r3
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	200019e4 	.word	0x200019e4
 8008050:	080087ec 	.word	0x080087ec

08008054 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	221a      	movs	r2, #26
 8008064:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008066:	f000 f843 	bl	80080f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800806a:	4b02      	ldr	r3, [pc, #8]	@ (8008074 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	200000e4 	.word	0x200000e4

08008078 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	6039      	str	r1, [r7, #0]
 8008082:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d105      	bne.n	8008096 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	4907      	ldr	r1, [pc, #28]	@ (80080ac <USBD_HS_ConfigStrDescriptor+0x34>)
 800808e:	4808      	ldr	r0, [pc, #32]	@ (80080b0 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008090:	f7ff fd98 	bl	8007bc4 <USBD_GetString>
 8008094:	e004      	b.n	80080a0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	4904      	ldr	r1, [pc, #16]	@ (80080ac <USBD_HS_ConfigStrDescriptor+0x34>)
 800809a:	4805      	ldr	r0, [pc, #20]	@ (80080b0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800809c:	f7ff fd92 	bl	8007bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080a0:	4b02      	ldr	r3, [pc, #8]	@ (80080ac <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	200019e4 	.word	0x200019e4
 80080b0:	08008800 	.word	0x08008800

080080b4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80080c0:	79fb      	ldrb	r3, [r7, #7]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	4907      	ldr	r1, [pc, #28]	@ (80080e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80080ca:	4808      	ldr	r0, [pc, #32]	@ (80080ec <USBD_HS_InterfaceStrDescriptor+0x38>)
 80080cc:	f7ff fd7a 	bl	8007bc4 <USBD_GetString>
 80080d0:	e004      	b.n	80080dc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	4904      	ldr	r1, [pc, #16]	@ (80080e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80080d6:	4805      	ldr	r0, [pc, #20]	@ (80080ec <USBD_HS_InterfaceStrDescriptor+0x38>)
 80080d8:	f7ff fd74 	bl	8007bc4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080dc:	4b02      	ldr	r3, [pc, #8]	@ (80080e8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200019e4 	.word	0x200019e4
 80080ec:	0800880c 	.word	0x0800880c

080080f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80080f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008134 <Get_SerialNum+0x44>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80080fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008138 <Get_SerialNum+0x48>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008102:	4b0e      	ldr	r3, [pc, #56]	@ (800813c <Get_SerialNum+0x4c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4413      	add	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008116:	2208      	movs	r2, #8
 8008118:	4909      	ldr	r1, [pc, #36]	@ (8008140 <Get_SerialNum+0x50>)
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 f814 	bl	8008148 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008120:	2204      	movs	r2, #4
 8008122:	4908      	ldr	r1, [pc, #32]	@ (8008144 <Get_SerialNum+0x54>)
 8008124:	68b8      	ldr	r0, [r7, #8]
 8008126:	f000 f80f 	bl	8008148 <IntToUnicode>
  }
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	0bfa0700 	.word	0x0bfa0700
 8008138:	0bfa0704 	.word	0x0bfa0704
 800813c:	0bfa0708 	.word	0x0bfa0708
 8008140:	200000e6 	.word	0x200000e6
 8008144:	200000f6 	.word	0x200000f6

08008148 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	4613      	mov	r3, r2
 8008154:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800815a:	2300      	movs	r3, #0
 800815c:	75fb      	strb	r3, [r7, #23]
 800815e:	e027      	b.n	80081b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	0f1b      	lsrs	r3, r3, #28
 8008164:	2b09      	cmp	r3, #9
 8008166:	d80b      	bhi.n	8008180 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	0f1b      	lsrs	r3, r3, #28
 800816c:	b2da      	uxtb	r2, r3
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4619      	mov	r1, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	440b      	add	r3, r1
 8008178:	3230      	adds	r2, #48	@ 0x30
 800817a:	b2d2      	uxtb	r2, r2
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e00a      	b.n	8008196 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	0f1b      	lsrs	r3, r3, #28
 8008184:	b2da      	uxtb	r2, r3
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4619      	mov	r1, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	440b      	add	r3, r1
 8008190:	3237      	adds	r2, #55	@ 0x37
 8008192:	b2d2      	uxtb	r2, r2
 8008194:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	3301      	adds	r3, #1
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	4413      	add	r3, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	3301      	adds	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
 80081b0:	7dfa      	ldrb	r2, [r7, #23]
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d3d3      	bcc.n	8008160 <IntToUnicode+0x18>
  }
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	371c      	adds	r7, #28
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7fe fb64 	bl	80068aa <USBD_LL_SetupStage>
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	4613      	mov	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	4619      	mov	r1, r3
 8008214:	f7fe fb9e 	bl	8006954 <USBD_LL_DataOutStage>
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	3320      	adds	r3, #32
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	4619      	mov	r1, r3
 8008248:	f7fe fc37 	bl	8006aba <USBD_LL_DataInStage>
}
 800824c:	bf00      	nop
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008262:	4618      	mov	r0, r3
 8008264:	f7fe fd71 	bl	8006d4a <USBD_LL_SOF>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	79db      	ldrb	r3, [r3, #7]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008284:	2300      	movs	r3, #0
 8008286:	73fb      	strb	r3, [r7, #15]
 8008288:	e008      	b.n	800829c <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	79db      	ldrb	r3, [r3, #7]
 800828e:	2b02      	cmp	r3, #2
 8008290:	d102      	bne.n	8008298 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008292:	2301      	movs	r3, #1
 8008294:	73fb      	strb	r3, [r7, #15]
 8008296:	e001      	b.n	800829c <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008298:	f7f8 f8be 	bl	8000418 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082a2:	7bfa      	ldrb	r2, [r7, #15]
 80082a4:	4611      	mov	r1, r2
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe fd0b 	bl	8006cc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fcb3 	bl	8006c1e <USBD_LL_Reset>
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fe fd07 	bl	8006ce2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80082e6:	f043 0301 	orr.w	r3, r3, #1
 80082ea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	7adb      	ldrb	r3, [r3, #11]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d005      	beq.n	8008300 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082f4:	4b04      	ldr	r3, [pc, #16]	@ (8008308 <HAL_PCD_SuspendCallback+0x48>)
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	4a03      	ldr	r2, [pc, #12]	@ (8008308 <HAL_PCD_SuspendCallback+0x48>)
 80082fa:	f043 0306 	orr.w	r3, r3, #6
 80082fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008300:	bf00      	nop
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	e000ed00 	.word	0xe000ed00

0800830c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fcfd 	bl	8006d1a <USBD_LL_Resume>
}
 8008320:	bf00      	nop
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	4611      	mov	r1, r2
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fd55 	bl	8006dee <USBD_LL_IsoOUTIncomplete>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	4611      	mov	r1, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fd11 	bl	8006d8a <USBD_LL_IsoINIncomplete>
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800837e:	4618      	mov	r0, r3
 8008380:	f7fe fd67 	bl	8006e52 <USBD_LL_DevConnected>
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800839a:	4618      	mov	r0, r3
 800839c:	f7fe fd64 	bl	8006e68 <USBD_LL_DevDisconnected>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d140      	bne.n	800843a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80083b8:	4a22      	ldr	r2, [pc, #136]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a20      	ldr	r2, [pc, #128]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80083c8:	4b1e      	ldr	r3, [pc, #120]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008448 <USBD_LL_Init+0xa0>)
 80083cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80083ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083d0:	2209      	movs	r2, #9
 80083d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80083d4:	4b1b      	ldr	r3, [pc, #108]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083d6:	2202      	movs	r2, #2
 80083d8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80083da:	4b1a      	ldr	r3, [pc, #104]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083dc:	2200      	movs	r2, #0
 80083de:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_HS_EMBEDDED_PHY;
 80083e0:	4b18      	ldr	r3, [pc, #96]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083e2:	2203      	movs	r2, #3
 80083e4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80083e6:	4b17      	ldr	r3, [pc, #92]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80083ec:	4b15      	ldr	r3, [pc, #84]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80083f2:	4b14      	ldr	r3, [pc, #80]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80083f8:	4b12      	ldr	r3, [pc, #72]	@ (8008444 <USBD_LL_Init+0x9c>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80083fe:	4b11      	ldr	r3, [pc, #68]	@ (8008444 <USBD_LL_Init+0x9c>)
 8008400:	2200      	movs	r2, #0
 8008402:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008404:	4b0f      	ldr	r3, [pc, #60]	@ (8008444 <USBD_LL_Init+0x9c>)
 8008406:	2200      	movs	r2, #0
 8008408:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800840a:	480e      	ldr	r0, [pc, #56]	@ (8008444 <USBD_LL_Init+0x9c>)
 800840c:	f7f8 fc24 	bl	8000c58 <HAL_PCD_Init>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008416:	f7f7 ffff 	bl	8000418 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800841a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800841e:	4809      	ldr	r0, [pc, #36]	@ (8008444 <USBD_LL_Init+0x9c>)
 8008420:	f7f9 fe67 	bl	80020f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008424:	2280      	movs	r2, #128	@ 0x80
 8008426:	2100      	movs	r1, #0
 8008428:	4806      	ldr	r0, [pc, #24]	@ (8008444 <USBD_LL_Init+0x9c>)
 800842a:	f7f9 fe1b 	bl	8002064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800842e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8008432:	2101      	movs	r1, #1
 8008434:	4803      	ldr	r0, [pc, #12]	@ (8008444 <USBD_LL_Init+0x9c>)
 8008436:	f7f9 fe15 	bl	8002064 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	2000011c 	.word	0x2000011c
 8008448:	42040000 	.word	0x42040000

0800844c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008462:	4618      	mov	r0, r3
 8008464:	f7f8 fd04 	bl	8000e70 <HAL_PCD_Start>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f942 	bl	80086f8 <USBD_Get_USB_Status>
 8008474:	4603      	mov	r3, r0
 8008476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008478:	7bbb      	ldrb	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	4608      	mov	r0, r1
 800848c:	4611      	mov	r1, r2
 800848e:	461a      	mov	r2, r3
 8008490:	4603      	mov	r3, r0
 8008492:	70fb      	strb	r3, [r7, #3]
 8008494:	460b      	mov	r3, r1
 8008496:	70bb      	strb	r3, [r7, #2]
 8008498:	4613      	mov	r3, r2
 800849a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80084aa:	78bb      	ldrb	r3, [r7, #2]
 80084ac:	883a      	ldrh	r2, [r7, #0]
 80084ae:	78f9      	ldrb	r1, [r7, #3]
 80084b0:	f7f9 f9f2 	bl	8001898 <HAL_PCD_EP_Open>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f91c 	bl	80086f8 <USBD_Get_USB_Status>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f9 fa3d 	bl	800196c <HAL_PCD_EP_Close>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 f8fd 	bl	80086f8 <USBD_Get_USB_Status>
 80084fe:	4603      	mov	r3, r0
 8008500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008502:	7bbb      	ldrb	r3, [r7, #14]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f7f9 faf5 	bl	8001b1a <HAL_PCD_EP_SetStall>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f8de 	bl	80086f8 <USBD_Get_USB_Status>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008540:	7bbb      	ldrb	r3, [r7, #14]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7f9 fb39 	bl	8001be0 <HAL_PCD_EP_ClrStall>
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f8bf 	bl	80086f8 <USBD_Get_USB_Status>
 800857a:	4603      	mov	r3, r0
 800857c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800857e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800859a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800859c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da0b      	bge.n	80085bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	4613      	mov	r3, r2
 80085ae:	00db      	lsls	r3, r3, #3
 80085b0:	4413      	add	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	440b      	add	r3, r1
 80085b6:	3316      	adds	r3, #22
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	e00b      	b.n	80085d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085c2:	68f9      	ldr	r1, [r7, #12]
 80085c4:	4613      	mov	r3, r2
 80085c6:	00db      	lsls	r3, r3, #3
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	440b      	add	r3, r1
 80085ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80085d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085fa:	78fa      	ldrb	r2, [r7, #3]
 80085fc:	4611      	mov	r1, r2
 80085fe:	4618      	mov	r0, r3
 8008600:	f7f9 f926 	bl	8001850 <HAL_PCD_SetAddress>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f874 	bl	80086f8 <USBD_Get_USB_Status>
 8008610:	4603      	mov	r3, r0
 8008612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008614:	7bbb      	ldrb	r3, [r7, #14]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b086      	sub	sp, #24
 8008622:	af00      	add	r7, sp, #0
 8008624:	60f8      	str	r0, [r7, #12]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	460b      	mov	r3, r1
 800862c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800863c:	7af9      	ldrb	r1, [r7, #11]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	f7f9 fa30 	bl	8001aa6 <HAL_PCD_EP_Transmit>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864a:	7dfb      	ldrb	r3, [r7, #23]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 f853 	bl	80086f8 <USBD_Get_USB_Status>
 8008652:	4603      	mov	r3, r0
 8008654:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008656:	7dbb      	ldrb	r3, [r7, #22]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3718      	adds	r7, #24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	607a      	str	r2, [r7, #4]
 800866a:	603b      	str	r3, [r7, #0]
 800866c:	460b      	mov	r3, r1
 800866e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800867e:	7af9      	ldrb	r1, [r7, #11]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	f7f9 f9bc 	bl	8001a00 <HAL_PCD_EP_Receive>
 8008688:	4603      	mov	r3, r0
 800868a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f832 	bl	80086f8 <USBD_Get_USB_Status>
 8008694:	4603      	mov	r3, r0
 8008696:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008698:	7dbb      	ldrb	r3, [r7, #22]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086b4:	78fa      	ldrb	r2, [r7, #3]
 80086b6:	4611      	mov	r1, r2
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7f9 f9dc 	bl	8001a76 <HAL_PCD_EP_GetRxCount>
 80086be:	4603      	mov	r3, r0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086d0:	4b03      	ldr	r3, [pc, #12]	@ (80086e0 <USBD_static_malloc+0x18>)
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20001be4 	.word	0x20001be4

080086e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4603      	mov	r3, r0
 8008700:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008706:	79fb      	ldrb	r3, [r7, #7]
 8008708:	2b03      	cmp	r3, #3
 800870a:	d817      	bhi.n	800873c <USBD_Get_USB_Status+0x44>
 800870c:	a201      	add	r2, pc, #4	@ (adr r2, 8008714 <USBD_Get_USB_Status+0x1c>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008725 	.word	0x08008725
 8008718:	0800872b 	.word	0x0800872b
 800871c:	08008731 	.word	0x08008731
 8008720:	08008737 	.word	0x08008737
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
    break;
 8008728:	e00b      	b.n	8008742 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800872a:	2303      	movs	r3, #3
 800872c:	73fb      	strb	r3, [r7, #15]
    break;
 800872e:	e008      	b.n	8008742 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008730:	2301      	movs	r3, #1
 8008732:	73fb      	strb	r3, [r7, #15]
    break;
 8008734:	e005      	b.n	8008742 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008736:	2303      	movs	r3, #3
 8008738:	73fb      	strb	r3, [r7, #15]
    break;
 800873a:	e002      	b.n	8008742 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	73fb      	strb	r3, [r7, #15]
    break;
 8008740:	bf00      	nop
  }
  return usb_status;
 8008742:	7bfb      	ldrb	r3, [r7, #15]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <memset>:
 8008750:	4402      	add	r2, r0
 8008752:	4603      	mov	r3, r0
 8008754:	4293      	cmp	r3, r2
 8008756:	d100      	bne.n	800875a <memset+0xa>
 8008758:	4770      	bx	lr
 800875a:	f803 1b01 	strb.w	r1, [r3], #1
 800875e:	e7f9      	b.n	8008754 <memset+0x4>

08008760 <__libc_init_array>:
 8008760:	b570      	push	{r4, r5, r6, lr}
 8008762:	4d0d      	ldr	r5, [pc, #52]	@ (8008798 <__libc_init_array+0x38>)
 8008764:	2600      	movs	r6, #0
 8008766:	4c0d      	ldr	r4, [pc, #52]	@ (800879c <__libc_init_array+0x3c>)
 8008768:	1b64      	subs	r4, r4, r5
 800876a:	10a4      	asrs	r4, r4, #2
 800876c:	42a6      	cmp	r6, r4
 800876e:	d109      	bne.n	8008784 <__libc_init_array+0x24>
 8008770:	4d0b      	ldr	r5, [pc, #44]	@ (80087a0 <__libc_init_array+0x40>)
 8008772:	2600      	movs	r6, #0
 8008774:	4c0b      	ldr	r4, [pc, #44]	@ (80087a4 <__libc_init_array+0x44>)
 8008776:	f000 f817 	bl	80087a8 <_init>
 800877a:	1b64      	subs	r4, r4, r5
 800877c:	10a4      	asrs	r4, r4, #2
 800877e:	42a6      	cmp	r6, r4
 8008780:	d105      	bne.n	800878e <__libc_init_array+0x2e>
 8008782:	bd70      	pop	{r4, r5, r6, pc}
 8008784:	f855 3b04 	ldr.w	r3, [r5], #4
 8008788:	3601      	adds	r6, #1
 800878a:	4798      	blx	r3
 800878c:	e7ee      	b.n	800876c <__libc_init_array+0xc>
 800878e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008792:	3601      	adds	r6, #1
 8008794:	4798      	blx	r3
 8008796:	e7f2      	b.n	800877e <__libc_init_array+0x1e>
 8008798:	0800886c 	.word	0x0800886c
 800879c:	0800886c 	.word	0x0800886c
 80087a0:	0800886c 	.word	0x0800886c
 80087a4:	08008870 	.word	0x08008870

080087a8 <_init>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr

080087b4 <_fini>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr
